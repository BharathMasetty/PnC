/*
 * Automatically Generated from Mathematica.
 * Thu 16 Aug 2018 23:24:08 GMT-05:00
 */
#include <stdio.h>
#include <stdlib.h>
#include <math.h>

#include "Ge_Draco.h"

#ifdef _MSC_VER
  #define INLINE __forceinline /* use __forceinline (VC++ specific) */
#else
  #define INLINE inline        /* use standard inline */
#endif

/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
INLINE double Power(double x, double y) { return pow(x, y); }
INLINE double Sqrt(double x) { return sqrt(x); }

INLINE double Abs(double x) { return fabs(x); }

INLINE double Exp(double x) { return exp(x); }
INLINE double Log(double x) { return log(x); }

INLINE double Sin(double x) { return sin(x); }
INLINE double Cos(double x) { return cos(x); }
INLINE double Tan(double x) { return tan(x); }

INLINE double Csc(double x) { return 1.0/sin(x); }
INLINE double Sec(double x) { return 1.0/cos(x); }

INLINE double ArcSin(double x) { return asin(x); }
INLINE double ArcCos(double x) { return acos(x); }
//INLINE double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
INLINE double ArcTan(double x, double y) { return atan2(y,x); }

INLINE double Sinh(double x) { return sinh(x); }
INLINE double Cosh(double x) { return cosh(x); }
INLINE double Tanh(double x) { return tanh(x); }

#define E 2.71828182845904523536029
#define Pi 3.14159265358979323846264
#define Degree 0.01745329251994329576924

/*
 * Sub functions
 */
static void output1(Eigen::Matrix<double,16,1> &p_output1, const Eigen::Matrix<double,16,1> &var1)
{
  double t53;
  double t25;
  double t45;
  double t116;
  double t128;
  double t137;
  double t163;
  double t87;
  double t138;
  double t182;
  double t186;
  double t207;
  double t213;
  double t215;
  double t222;
  double t234;
  double t405;
  double t411;
  double t414;
  double t443;
  double t257;
  double t279;
  double t282;
  double t312;
  double t321;
  double t336;
  double t431;
  double t446;
  double t464;
  double t471;
  double t483;
  double t485;
  double t499;
  double t504;
  double t515;
  double t520;
  double t533;
  double t628;
  double t631;
  double t635;
  double t651;
  double t561;
  double t580;
  double t587;
  double t643;
  double t652;
  double t667;
  double t684;
  double t709;
  double t723;
  double t732;
  double t749;
  double t756;
  double t770;
  double t772;
  double t889;
  double t894;
  double t899;
  double t916;
  double t784;
  double t786;
  double t798;
  double t906;
  double t918;
  double t930;
  double t932;
  double t964;
  double t969;
  double t982;
  double t989;
  double t999;
  double t1002;
  double t1018;
  double t1069;
  double t1131;
  double t1135;
  double t1144;
  double t1031;
  double t1039;
  double t1041;
  double t212;
  double t1294;
  double t1325;
  double t1333;
  double t1342;
  double t1334;
  double t1349;
  double t1350;
  double t1354;
  double t1356;
  double t1358;
  double t1362;
  double t1369;
  double t1391;
  double t1392;
  double t1400;
  double t1376;
  double t1380;
  double t1382;
  double t1447;
  double t1448;
  double t1453;
  double t1461;
  double t1454;
  double t1469;
  double t1478;
  double t1479;
  double t1485;
  double t1490;
  double t1496;
  double t1502;
  double t1509;
  double t1510;
  double t1512;
  double t1524;
  double t1526;
  double t1531;
  double t1547;
  double t1548;
  double t1549;
  double t1552;
  double t1550;
  double t1554;
  double t1564;
  double t1565;
  double t1570;
  double t1571;
  double t1577;
  double t1583;
  double t1587;
  double t1591;
  double t1592;
  double t1615;
  double t1640;
  double t1641;
  double t1665;
  double t1597;
  double t1598;
  double t1603;
  double t1664;
  double t1667;
  double t1669;
  double t1684;
  double t1685;
  double t1692;
  double t1695;
  double t1708;
  double t1710;
  double t1715;
  double t1716;
  double t1765;
  double t1766;
  double t1770;
  double t1780;
  double t1728;
  double t1732;
  double t1742;
  double t1910;
  double t1978;
  double t1981;
  double t1987;
  double t2003;
  double t2005;
  double t2008;
  double t2018;
  double t2022;
  double t2047;
  double t2051;
  double t2055;
  double t2057;
  double t2058;
  double t2068;
  double t2082;
  double t2083;
  double t2096;
  double t2098;
  double t1138;
  double t1155;
  double t1160;
  double t2101;
  double t2112;
  double t2121;
  double t1175;
  double t1180;
  double t1194;
  double t2125;
  double t2138;
  double t2144;
  double t1919;
  double t2257;
  double t2281;
  double t2283;
  double t2304;
  double t2317;
  double t2319;
  double t2287;
  double t2289;
  double t2292;
  double t2337;
  double t2342;
  double t2343;
  double t2349;
  double t2359;
  double t2370;
  double t2382;
  double t2391;
  double t2410;
  double t2414;
  double t1774;
  double t1783;
  double t1785;
  double t2416;
  double t2419;
  double t2420;
  double t1791;
  double t1795;
  double t1798;
  double t2429;
  double t2438;
  double t2443;
  double t2490;
  double t2495;
  double t2496;
  double t2497;
  double t2504;
  double t2513;
  double t2519;
  double t2527;
  double t2531;
  double t2533;
  double t2537;
  double t2539;
  double t2541;
  double t2576;
  double t2593;
  double t2600;
  double t2603;
  double t2604;
  double t2609;
  double t2615;
  double t2624;
  double t2627;
  double t2646;
  double t2647;
  double t2648;
  double t2662;
  double t2666;
  double t2679;
  double t2682;
  double t2688;
  double t2770;
  double t2776;
  double t2778;
  double t2785;
  double t2789;
  double t2792;
  double t2794;
  double t2796;
  double t2799;
  double t2806;
  double t2812;
  double t2818;
  double t2819;
  double t2832;
  double t2863;
  double t2879;
  double t2882;
  double t2888;
  double t2891;
  double t2896;
  double t2903;
  double t2904;
  double t2996;
  double t2997;
  double t3000;
  double t2978;
  double t2985;
  double t2987;
  double t2993;
  double t3002;
  double t3003;
  double t3004;
  double t3007;
  double t3010;
  double t3011;
  double t3018;
  double t3028;
  double t3044;
  double t3060;
  double t3067;
  double t3069;
  double t3080;
  double t3081;
  double t3091;
  double t3093;
  double t3108;
  double t3189;
  double t3192;
  double t3202;
  double t3169;
  double t3171;
  double t3183;
  double t3216;
  double t3219;
  double t3224;
  double t3231;
  double t3236;
  double t3239;
  double t3247;
  double t3256;
  double t3284;
  double t3339;
  double t3340;
  double t3341;
  double t3297;
  double t3369;
  double t3371;
  double t3375;
  double t3380;
  double t3382;
  double t3384;
  double t3385;
  double t3389;
  double t3395;
  double t3405;
  double t3413;
  double t3415;
  double t3420;
  double t3445;
  double t3467;
  double t3471;
  double t3472;
  double t3474;
  double t3479;
  double t3488;
  double t3491;
  double t3492;
  double t3509;
  double t3512;
  double t3513;
  double t3515;
  double t3516;
  double t3521;
  double t3522;
  double t3528;
  double t3573;
  double t3575;
  double t3577;
  double t3580;
  double t3589;
  double t3594;
  double t3595;
  double t3596;
  double t3601;
  double t3606;
  double t3619;
  double t3623;
  double t3624;
  double t3639;
  double t3655;
  double t3656;
  double t3664;
  double t3665;
  double t3671;
  double t3676;
  double t3679;
  double t3683;
  double t3746;
  double t3748;
  double t3750;
  double t3739;
  double t3744;
  double t3758;
  double t3759;
  double t3762;
  double t3764;
  double t3766;
  double t3772;
  double t3778;
  double t3780;
  double t3786;
  double t3787;
  double t3788;
  double t3800;
  double t3813;
  double t3815;
  double t3816;
  double t3817;
  double t3822;
  double t3824;
  double t3826;
  double t3886;
  double t3889;
  double t3890;
  double t3880;
  double t3881;
  double t3882;
  double t3892;
  double t3894;
  double t3897;
  double t3898;
  double t3899;
  double t3901;
  double t3906;
  double t3907;
  double t3922;
  double t3964;
  double t3968;
  double t3970;
  double t3938;
  t53 = Sin(var1[4]);
  t25 = Cos(var1[4]);
  t45 = Cos(var1[5]);
  t116 = Cos(var1[11]);
  t128 = -1.*t116;
  t137 = 1. + t128;
  t163 = Sin(var1[11]);
  t87 = Sin(var1[5]);
  t138 = -0.022225*t137;
  t182 = -0.086996*t163;
  t186 = t138 + t182;
  t207 = -1.*t25*t186;
  t213 = -0.086996*t137;
  t215 = 0.022225*t163;
  t222 = t213 + t215;
  t234 = -1.*t222*t53*t87;
  t405 = Cos(var1[12]);
  t411 = -1.*t405;
  t414 = 1. + t411;
  t443 = Sin(var1[12]);
  t257 = t25*t163;
  t279 = -1.*t116*t53*t87;
  t282 = t257 + t279;
  t312 = -1.*t116*t25;
  t321 = -1.*t163*t53*t87;
  t336 = t312 + t321;
  t431 = -0.31508*t414;
  t446 = 0.156996*t443;
  t464 = t431 + t446;
  t471 = -1.*t45*t464*t53;
  t483 = -0.156996*t414;
  t485 = -0.31508*t443;
  t499 = t483 + t485;
  t504 = t499*t282;
  t515 = -1.*t45*t443*t53;
  t520 = t405*t282;
  t533 = t515 + t520;
  t628 = Cos(var1[13]);
  t631 = -1.*t628;
  t635 = 1. + t631;
  t651 = Sin(var1[13]);
  t561 = -1.*t405*t45*t53;
  t580 = -1.*t443*t282;
  t587 = t561 + t580;
  t643 = -0.022225*t635;
  t652 = 0.38008*t651;
  t667 = t643 + t652;
  t684 = t667*t336;
  t709 = -0.38008*t635;
  t723 = -0.022225*t651;
  t732 = t709 + t723;
  t749 = t732*t587;
  t756 = t651*t336;
  t770 = t628*t587;
  t772 = t756 + t770;
  t889 = Cos(var1[14]);
  t894 = -1.*t889;
  t899 = 1. + t894;
  t916 = Sin(var1[14]);
  t784 = t628*t336;
  t786 = -1.*t651*t587;
  t798 = t784 + t786;
  t906 = -0.86008*t899;
  t918 = -0.022225*t916;
  t930 = t906 + t918;
  t932 = t930*t772;
  t964 = -0.022225*t899;
  t969 = 0.86008*t916;
  t982 = t964 + t969;
  t989 = t982*t798;
  t999 = -1.*t916*t772;
  t1002 = t889*t798;
  t1018 = t999 + t1002;
  t1069 = Cos(var1[15]);
  t1131 = -1.*t1069;
  t1135 = 1. + t1131;
  t1144 = Sin(var1[15]);
  t1031 = t889*t772;
  t1039 = t916*t798;
  t1041 = t1031 + t1039;
  t212 = 0.261934*t45*t53;
  t1294 = Cos(var1[6]);
  t1325 = -1.*t1294;
  t1333 = 1. + t1325;
  t1342 = Sin(var1[6]);
  t1334 = 0.087004*t1333;
  t1349 = 0.022225*t1342;
  t1350 = t1334 + t1349;
  t1354 = -1.*t53*t87*t1350;
  t1356 = -0.022225*t1333;
  t1358 = 0.087004*t1342;
  t1362 = t1356 + t1358;
  t1369 = -1.*t25*t1362;
  t1391 = -1.*t25*t1294;
  t1392 = -1.*t53*t87*t1342;
  t1400 = t1391 + t1392;
  t1376 = -1.*t1294*t53*t87;
  t1380 = t25*t1342;
  t1382 = t1376 + t1380;
  t1447 = Cos(var1[7]);
  t1448 = -1.*t1447;
  t1453 = 1. + t1448;
  t1461 = Sin(var1[7]);
  t1454 = 0.157004*t1453;
  t1469 = -0.31508*t1461;
  t1478 = t1454 + t1469;
  t1479 = t1382*t1478;
  t1485 = -0.31508*t1453;
  t1490 = -0.157004*t1461;
  t1496 = t1485 + t1490;
  t1502 = -1.*t45*t53*t1496;
  t1509 = t1447*t1382;
  t1510 = -1.*t45*t53*t1461;
  t1512 = t1509 + t1510;
  t1524 = -1.*t45*t1447*t53;
  t1526 = -1.*t1382*t1461;
  t1531 = t1524 + t1526;
  t1547 = Cos(var1[8]);
  t1548 = -1.*t1547;
  t1549 = 1. + t1548;
  t1552 = Sin(var1[8]);
  t1550 = -0.38008*t1549;
  t1554 = -0.022225*t1552;
  t1564 = t1550 + t1554;
  t1565 = t1531*t1564;
  t1570 = -0.022225*t1549;
  t1571 = 0.38008*t1552;
  t1577 = t1570 + t1571;
  t1583 = t1400*t1577;
  t1587 = t1547*t1531;
  t1591 = t1400*t1552;
  t1592 = t1587 + t1591;
  t1615 = Cos(var1[9]);
  t1640 = -1.*t1615;
  t1641 = 1. + t1640;
  t1665 = Sin(var1[9]);
  t1597 = t1547*t1400;
  t1598 = -1.*t1531*t1552;
  t1603 = t1597 + t1598;
  t1664 = -0.86008*t1641;
  t1667 = -0.022225*t1665;
  t1669 = t1664 + t1667;
  t1684 = t1669*t1592;
  t1685 = -0.022225*t1641;
  t1692 = 0.86008*t1665;
  t1695 = t1685 + t1692;
  t1708 = t1695*t1603;
  t1710 = -1.*t1665*t1592;
  t1715 = t1615*t1603;
  t1716 = t1710 + t1715;
  t1765 = Cos(var1[10]);
  t1766 = -1.*t1765;
  t1770 = 1. + t1766;
  t1780 = Sin(var1[10]);
  t1728 = t1615*t1592;
  t1732 = t1665*t1603;
  t1742 = t1728 + t1732;
  t1910 = t25*t45*t222;
  t1978 = t116*t25*t45*t499;
  t1981 = -1.*t25*t464*t87;
  t1987 = -1.*t116*t25*t45*t443;
  t2003 = -1.*t405*t25*t87;
  t2005 = t1987 + t2003;
  t2008 = t116*t405*t25*t45;
  t2018 = -1.*t25*t443*t87;
  t2022 = t2008 + t2018;
  t2047 = t25*t45*t163*t667;
  t2051 = t732*t2005;
  t2055 = t25*t45*t163*t651;
  t2057 = t628*t2005;
  t2058 = t2055 + t2057;
  t2068 = t628*t25*t45*t163;
  t2082 = -1.*t651*t2005;
  t2083 = t2068 + t2082;
  t2096 = t930*t2058;
  t2098 = t982*t2083;
  t1138 = -0.021147*t1135;
  t1155 = 1.34008*t1144;
  t1160 = t1138 + t1155;
  t2101 = -1.*t916*t2058;
  t2112 = t889*t2083;
  t2121 = t2101 + t2112;
  t1175 = -1.34008*t1135;
  t1180 = -0.021147*t1144;
  t1194 = t1175 + t1180;
  t2125 = t889*t2058;
  t2138 = t916*t2083;
  t2144 = t2125 + t2138;
  t1919 = 0.261934*t25*t87;
  t2257 = t25*t45*t1350;
  t2281 = t25*t45*t1294*t1478;
  t2283 = -1.*t25*t87*t1496;
  t2304 = t25*t45*t1294*t1447;
  t2317 = -1.*t25*t87*t1461;
  t2319 = t2304 + t2317;
  t2287 = -1.*t25*t1447*t87;
  t2289 = -1.*t25*t45*t1294*t1461;
  t2292 = t2287 + t2289;
  t2337 = t2292*t1564;
  t2342 = t25*t45*t1342*t1577;
  t2343 = t1547*t2292;
  t2349 = t25*t45*t1342*t1552;
  t2359 = t2343 + t2349;
  t2370 = t25*t45*t1547*t1342;
  t2382 = -1.*t2292*t1552;
  t2391 = t2370 + t2382;
  t2410 = t1669*t2359;
  t2414 = t1695*t2391;
  t1774 = -0.021147*t1770;
  t1783 = 1.34008*t1780;
  t1785 = t1774 + t1783;
  t2416 = -1.*t1665*t2359;
  t2419 = t1615*t2391;
  t2420 = t2416 + t2419;
  t1791 = -1.34008*t1770;
  t1795 = -0.021147*t1780;
  t1798 = t1791 + t1795;
  t2429 = t1615*t2359;
  t2438 = t1665*t2391;
  t2443 = t2429 + t2438;
  t2490 = 0.087004*t1294;
  t2495 = -0.022225*t1342;
  t2496 = t2490 + t2495;
  t2497 = -1.*t53*t2496;
  t2504 = 0.022225*t1294;
  t2513 = t2504 + t1358;
  t2519 = t25*t87*t2513;
  t2527 = t25*t1294*t87;
  t2531 = t53*t1342;
  t2533 = t2527 + t2531;
  t2537 = t1294*t53;
  t2539 = -1.*t25*t87*t1342;
  t2541 = t2537 + t2539;
  t2576 = t2541*t1478;
  t2593 = -1.*t2541*t1461*t1564;
  t2600 = t2533*t1577;
  t2603 = -1.*t1547*t2541*t1461;
  t2604 = t2533*t1552;
  t2609 = t2603 + t2604;
  t2615 = t1547*t2533;
  t2624 = t2541*t1461*t1552;
  t2627 = t2615 + t2624;
  t2646 = t1669*t2609;
  t2647 = t1695*t2627;
  t2648 = -1.*t1665*t2609;
  t2662 = t1615*t2627;
  t2666 = t2648 + t2662;
  t2679 = t1615*t2609;
  t2682 = t1665*t2627;
  t2688 = t2679 + t2682;
  t2770 = -0.157004*t1447;
  t2776 = t2770 + t1469;
  t2778 = t25*t45*t2776;
  t2785 = -0.31508*t1447;
  t2789 = 0.157004*t1461;
  t2792 = t2785 + t2789;
  t2794 = t2533*t2792;
  t2796 = -1.*t1447*t2533;
  t2799 = -1.*t25*t45*t1461;
  t2806 = t2796 + t2799;
  t2812 = t25*t45*t1447;
  t2818 = -1.*t2533*t1461;
  t2819 = t2812 + t2818;
  t2832 = t2806*t1564;
  t2863 = t1547*t1669*t2806;
  t2879 = -1.*t1695*t2806*t1552;
  t2882 = -1.*t1547*t1665*t2806;
  t2888 = -1.*t1615*t2806*t1552;
  t2891 = t2882 + t2888;
  t2896 = t1615*t1547*t2806;
  t2903 = -1.*t1665*t2806*t1552;
  t2904 = t2896 + t2903;
  t2996 = -1.*t1294*t53;
  t2997 = t25*t87*t1342;
  t3000 = t2996 + t2997;
  t2978 = -0.022225*t1547;
  t2985 = -0.38008*t1552;
  t2987 = t2978 + t2985;
  t2993 = t2819*t2987;
  t3002 = 0.38008*t1547;
  t3003 = t3002 + t1554;
  t3004 = t3000*t3003;
  t3007 = -1.*t1547*t2819;
  t3010 = -1.*t3000*t1552;
  t3011 = t3007 + t3010;
  t3018 = t1547*t3000;
  t3028 = -1.*t2819*t1552;
  t3044 = t3018 + t3028;
  t3060 = t1695*t3011;
  t3067 = t1669*t3044;
  t3069 = t1665*t3011;
  t3080 = t1615*t3044;
  t3081 = t3069 + t3080;
  t3091 = t1615*t3011;
  t3093 = -1.*t1665*t3044;
  t3108 = t3091 + t3093;
  t3189 = t1547*t2819;
  t3192 = t3000*t1552;
  t3202 = t3189 + t3192;
  t3169 = -0.022225*t1615;
  t3171 = -0.86008*t1665;
  t3183 = t3169 + t3171;
  t3216 = t3183*t3202;
  t3219 = 0.86008*t1615;
  t3224 = t3219 + t1667;
  t3231 = t3224*t3044;
  t3236 = -1.*t1665*t3202;
  t3239 = t3236 + t3080;
  t3247 = -1.*t1615*t3202;
  t3256 = t3247 + t3093;
  t3284 = -1.*t1780*t3239;
  t3339 = t1615*t3202;
  t3340 = t1665*t3044;
  t3341 = t3339 + t3340;
  t3297 = t1765*t3239;
  t3369 = -0.086996*t116;
  t3371 = -0.022225*t163;
  t3375 = t3369 + t3371;
  t3380 = -1.*t3375*t53;
  t3382 = 0.022225*t116;
  t3384 = t3382 + t182;
  t3385 = t25*t3384*t87;
  t3389 = t163*t53;
  t3395 = t116*t25*t87;
  t3405 = t3389 + t3395;
  t3413 = t116*t53;
  t3415 = -1.*t25*t163*t87;
  t3420 = t3413 + t3415;
  t3445 = t499*t3420;
  t3467 = t667*t3405;
  t3471 = -1.*t443*t732*t3420;
  t3472 = t651*t3405;
  t3474 = -1.*t628*t443*t3420;
  t3479 = t3472 + t3474;
  t3488 = t628*t3405;
  t3491 = t443*t651*t3420;
  t3492 = t3488 + t3491;
  t3509 = t930*t3479;
  t3512 = t982*t3492;
  t3513 = -1.*t916*t3479;
  t3515 = t889*t3492;
  t3516 = t3513 + t3515;
  t3521 = t889*t3479;
  t3522 = t916*t3492;
  t3528 = t3521 + t3522;
  t3573 = 0.156996*t405;
  t3575 = t3573 + t485;
  t3577 = t25*t45*t3575;
  t3580 = -0.31508*t405;
  t3589 = -0.156996*t443;
  t3594 = t3580 + t3589;
  t3595 = t3594*t3405;
  t3596 = -1.*t25*t45*t443;
  t3601 = -1.*t405*t3405;
  t3606 = t3596 + t3601;
  t3619 = t405*t25*t45;
  t3623 = -1.*t443*t3405;
  t3624 = t3619 + t3623;
  t3639 = t732*t3606;
  t3655 = t628*t930*t3606;
  t3656 = -1.*t651*t982*t3606;
  t3664 = -1.*t889*t651*t3606;
  t3665 = -1.*t628*t916*t3606;
  t3671 = t3664 + t3665;
  t3676 = t628*t889*t3606;
  t3679 = -1.*t651*t916*t3606;
  t3683 = t3676 + t3679;
  t3746 = -1.*t116*t53;
  t3748 = t25*t163*t87;
  t3750 = t3746 + t3748;
  t3739 = 0.38008*t628;
  t3744 = t3739 + t723;
  t3758 = t3744*t3750;
  t3759 = -0.022225*t628;
  t3762 = -0.38008*t651;
  t3764 = t3759 + t3762;
  t3766 = t3764*t3624;
  t3772 = -1.*t651*t3750;
  t3778 = -1.*t628*t3624;
  t3780 = t3772 + t3778;
  t3786 = t628*t3750;
  t3787 = -1.*t651*t3624;
  t3788 = t3786 + t3787;
  t3800 = t982*t3780;
  t3813 = t930*t3788;
  t3815 = t916*t3780;
  t3816 = t889*t3788;
  t3817 = t3815 + t3816;
  t3822 = t889*t3780;
  t3824 = -1.*t916*t3788;
  t3826 = t3822 + t3824;
  t3886 = t651*t3750;
  t3889 = t628*t3624;
  t3890 = t3886 + t3889;
  t3880 = -0.022225*t889;
  t3881 = -0.86008*t916;
  t3882 = t3880 + t3881;
  t3892 = t3882*t3890;
  t3894 = 0.86008*t889;
  t3897 = t3894 + t918;
  t3898 = t3897*t3788;
  t3899 = -1.*t916*t3890;
  t3901 = t3899 + t3816;
  t3906 = -1.*t889*t3890;
  t3907 = t3906 + t3824;
  t3922 = -1.*t1144*t3901;
  t3964 = t889*t3890;
  t3968 = t916*t3788;
  t3970 = t3964 + t3968;
  t3938 = t1069*t3901;

  p_output1(0)=0;
  p_output1(1)=0;
  p_output1(2)=349.236;
  p_output1(3)=0;
  p_output1(4)=4.905*(t1354 + t1369 - 0.018834*t1400 + t1479 + t1502 + 0.177665*t1512 - 0.340809*t1531) + 58.86*(t1354 + t1369 + t1479 + t1502 + 0.173654*t1512 + t1565 + t1583 - 0.620188*t1592 - 0.021332*t1603) + 37.278*(t1354 + t1369 + t1479 + t1502 + 0.166946*t1512 + t1565 + t1583 + t1684 + t1708 - 0.038294*t1716 - 1.107902*t1742) + 4.905*(t1354 + t1369 + t1479 + t1502 + 0.166999*t1512 + t1565 + t1583 + t1684 + t1708 - 1.329456*(t1742*t1765 + t1716*t1780) + 0.023136*(t1716*t1765 - 1.*t1742*t1780) + t1716*t1785 + t1742*t1798) + 9.81*(t1354 + t1369 + 0.16373*t1382 - 0.023556*t1400 + t212) + 9.81*(t207 + t212 + t234 - 0.163722*t282 - 0.020894*t336) + 4.905*(t207 + t234 - 0.018834*t336 + t471 + t504 - 0.177657*t533 - 0.340809*t587) + 58.86*(t207 + t234 + t471 + t504 - 0.160346*t533 + t684 + t749 - 0.620188*t772 - 0.021332*t798) + 117.72*(0.013391*t25 + 0.187273*t45*t53 - 0.000754*t53*t87) + 37.278*(-0.038294*t1018 - 1.107902*t1041 + t207 + t234 + t471 + t504 - 0.167054*t533 + t684 + t749 + t932 + t989) + 4.905*(-1.329456*(t1041*t1069 + t1018*t1144) + 0.023136*(t1018*t1069 - 1.*t1041*t1144) + t1018*t1160 + t1041*t1194 + t207 + t234 + t471 + t504 - 0.167001*t533 + t684 + t749 + t932 + t989);
  p_output1(5)=58.86*(t1910 + t1978 + t1981 - 0.160346*t2022 + t2047 + t2051 - 0.620188*t2058 - 0.021332*t2083) + 37.278*(t1910 + t1978 + t1981 - 0.167054*t2022 + t2047 + t2051 + t2096 + t2098 - 0.038294*t2121 - 1.107902*t2144) + 4.905*(t1910 + t1978 + t1981 - 0.167001*t2022 + t2047 + t2051 + t2096 + t2098 + t1160*t2121 + t1194*t2144 - 1.329456*(t1144*t2121 + t1069*t2144) + 0.023136*(t1069*t2121 - 1.*t1144*t2144)) + 58.86*(t2257 + t2281 + t2283 + 0.173654*t2319 + t2337 + t2342 - 0.620188*t2359 - 0.021332*t2391) + 37.278*(t2257 + t2281 + t2283 + 0.166946*t2319 + t2337 + t2342 + t2410 + t2414 - 0.038294*t2420 - 1.107902*t2443) + 4.905*(t2257 + t2281 + t2283 + 0.166999*t2319 + t2337 + t2342 + t2410 + t2414 + t1785*t2420 + t1798*t2443 - 1.329456*(t1780*t2420 + t1765*t2443) + 0.023136*(t1765*t2420 - 1.*t1780*t2443)) + 9.81*(t1919 + t2257 + 0.16373*t1294*t25*t45 - 0.023556*t1342*t25*t45) + 4.905*(t2257 + t2281 + t2283 - 0.340809*t2292 + 0.177665*t2319 - 0.018834*t1342*t25*t45) + 9.81*(t1910 + t1919 - 0.163722*t116*t25*t45 - 0.020894*t163*t25*t45) + 4.905*(t1910 + t1978 + t1981 - 0.340809*t2005 - 0.177657*t2022 - 0.018834*t163*t25*t45) + 117.72*(0.000754*t25*t45 + 0.187273*t25*t87);
  p_output1(6)=9.81*(t2497 + t2519 - 0.023556*t2533 + 0.16373*t2541) + 4.905*(t2497 + t2519 - 0.018834*t2533 + 0.177665*t1447*t2541 + 0.340809*t1461*t2541 + t2576) + 58.86*(t2497 + t2519 + 0.173654*t1447*t2541 + t2576 + t2593 + t2600 - 0.620188*t2609 - 0.021332*t2627) + 37.278*(t2497 + t2519 + 0.166946*t1447*t2541 + t2576 + t2593 + t2600 + t2646 + t2647 - 0.038294*t2666 - 1.107902*t2688) + 4.905*(t2497 + t2519 + 0.166999*t1447*t2541 + t2576 + t2593 + t2600 + t2646 + t2647 + t1785*t2666 + t1798*t2688 - 1.329456*(t1780*t2666 + t1765*t2688) + 0.023136*(t1765*t2666 - 1.*t1780*t2688));
  p_output1(7)=4.905*(t2778 + t2794 - 0.340809*t2806 + 0.177665*t2819) + 58.86*(t2778 + t2794 - 0.620188*t1547*t2806 + 0.021332*t1552*t2806 + 0.173654*t2819 + t2832) + 37.278*(t2778 + t2794 + 0.166946*t2819 + t2832 + t2863 + t2879 - 0.038294*t2891 - 1.107902*t2904) + 4.905*(t2778 + t2794 + 0.166999*t2819 + t2832 + t2863 + t2879 + t1785*t2891 + t1798*t2904 - 1.329456*(t1780*t2891 + t1765*t2904) + 0.023136*(t1765*t2891 - 1.*t1780*t2904));
  p_output1(8)=58.86*(t2993 + t3004 - 0.021332*t3011 - 0.620188*t3044) + 37.278*(t2993 + t3004 + t3060 + t3067 - 1.107902*t3081 - 0.038294*t3108) + 4.905*(t2993 + t3004 + t3060 + t3067 + t1798*t3081 + t1785*t3108 + 0.023136*(-1.*t1780*t3081 + t1765*t3108) - 1.329456*(t1765*t3081 + t1780*t3108));
  p_output1(9)=37.278*(t3216 + t3231 - 1.107902*t3239 - 0.038294*t3256) + 4.905*(t3216 + t3231 + t1798*t3239 + t1785*t3256 + 0.023136*(t1765*t3256 + t3284) - 1.329456*(t1780*t3256 + t3297));
  p_output1(10)=4.905*((1.34008*t1765 + t1795)*t3239 + (-0.021147*t1765 - 1.34008*t1780)*t3341 + 0.023136*(t3284 - 1.*t1765*t3341) - 1.329456*(t3297 - 1.*t1780*t3341));
  p_output1(11)=9.81*(t3380 + t3385 - 0.020894*t3405 - 0.163722*t3420) + 37.278*(t3380 + t3385 + t3445 + t3467 + t3471 + t3509 + t3512 - 0.038294*t3516 - 1.107902*t3528 - 0.167054*t3420*t405) + 4.905*(t3380 + t3385 + t3445 + t3467 + t3471 + t3509 + t3512 + t1160*t3516 + t1194*t3528 - 1.329456*(t1144*t3516 + t1069*t3528) + 0.023136*(t1069*t3516 - 1.*t1144*t3528) - 0.167001*t3420*t405) + 58.86*(t3380 + t3385 + t3445 + t3467 + t3471 - 0.620188*t3479 - 0.021332*t3492 - 0.160346*t3420*t405) + 4.905*(t3380 + t3385 - 0.018834*t3405 + t3445 - 0.177657*t3420*t405 + 0.340809*t3420*t443);
  p_output1(12)=4.905*(t3577 + t3595 - 0.340809*t3606 - 0.177657*t3624) + 37.278*(t3577 + t3595 - 0.167054*t3624 + t3639 + t3655 + t3656 - 0.038294*t3671 - 1.107902*t3683) + 4.905*(t3577 + t3595 - 0.167001*t3624 + t3639 + t3655 + t3656 + t1160*t3671 + t1194*t3683 - 1.329456*(t1144*t3671 + t1069*t3683) + 0.023136*(t1069*t3671 - 1.*t1144*t3683)) + 58.86*(t3577 + t3595 - 0.160346*t3624 + t3639 - 0.620188*t3606*t628 + 0.021332*t3606*t651);
  p_output1(13)=58.86*(t3758 + t3766 - 0.021332*t3780 - 0.620188*t3788) + 37.278*(t3758 + t3766 + t3800 + t3813 - 1.107902*t3817 - 0.038294*t3826) + 4.905*(t3758 + t3766 + t3800 + t3813 + t1194*t3817 + t1160*t3826 + 0.023136*(-1.*t1144*t3817 + t1069*t3826) - 1.329456*(t1069*t3817 + t1144*t3826));
  p_output1(14)=37.278*(t3892 + t3898 - 1.107902*t3901 - 0.038294*t3907) + 4.905*(t3892 + t3898 + t1194*t3901 + t1160*t3907 + 0.023136*(t1069*t3907 + t3922) - 1.329456*(t1144*t3907 + t3938));
  p_output1(15)=4.905*((1.34008*t1069 + t1180)*t3901 + (-0.021147*t1069 - 1.34008*t1144)*t3970 + 0.023136*(t3922 - 1.*t1069*t3970) - 1.329456*(t3938 - 1.*t1144*t3970));
}


       
void Ge_Draco(Eigen::Matrix<double,16,1> &p_output1, const Eigen::Matrix<double,16,1> &var1)
{
  // Call Subroutines
  output1(p_output1, var1);

}
