/*
 * Automatically Generated from Mathematica.
 * Thu 16 Aug 2018 18:08:06 GMT-05:00
 */
#include <stdio.h>
#include <stdlib.h>
#include <math.h>

#include "Ge_Draco.h"

#ifdef _MSC_VER
  #define INLINE __forceinline /* use __forceinline (VC++ specific) */
#else
  #define INLINE inline        /* use standard inline */
#endif

/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
INLINE double Power(double x, double y) { return pow(x, y); }
INLINE double Sqrt(double x) { return sqrt(x); }

INLINE double Abs(double x) { return fabs(x); }

INLINE double Exp(double x) { return exp(x); }
INLINE double Log(double x) { return log(x); }

INLINE double Sin(double x) { return sin(x); }
INLINE double Cos(double x) { return cos(x); }
INLINE double Tan(double x) { return tan(x); }

INLINE double Csc(double x) { return 1.0/sin(x); }
INLINE double Sec(double x) { return 1.0/cos(x); }

INLINE double ArcSin(double x) { return asin(x); }
INLINE double ArcCos(double x) { return acos(x); }
//INLINE double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
INLINE double ArcTan(double x, double y) { return atan2(y,x); }

INLINE double Sinh(double x) { return sinh(x); }
INLINE double Cosh(double x) { return cosh(x); }
INLINE double Tanh(double x) { return tanh(x); }

#define E 2.71828182845904523536029
#define Pi 3.14159265358979323846264
#define Degree 0.01745329251994329576924

/*
 * Sub functions
 */
static void output1(Eigen::Matrix<double,16,1> &p_output1, const Eigen::Matrix<double,16,1> &var1)
{
  double t114;
  double t13;
  double t98;
  double t235;
  double t250;
  double t251;
  double t267;
  double t132;
  double t258;
  double t277;
  double t279;
  double t294;
  double t300;
  double t351;
  double t366;
  double t389;
  double t537;
  double t542;
  double t550;
  double t561;
  double t397;
  double t413;
  double t434;
  double t446;
  double t456;
  double t481;
  double t552;
  double t571;
  double t575;
  double t593;
  double t605;
  double t636;
  double t647;
  double t657;
  double t686;
  double t702;
  double t707;
  double t807;
  double t808;
  double t811;
  double t815;
  double t727;
  double t741;
  double t743;
  double t812;
  double t819;
  double t822;
  double t832;
  double t845;
  double t849;
  double t864;
  double t886;
  double t938;
  double t940;
  double t956;
  double t1068;
  double t1087;
  double t1106;
  double t1153;
  double t988;
  double t996;
  double t1000;
  double t1143;
  double t1159;
  double t1171;
  double t1214;
  double t1217;
  double t1223;
  double t1224;
  double t1229;
  double t1234;
  double t1245;
  double t1248;
  double t1360;
  double t1363;
  double t1367;
  double t1379;
  double t1257;
  double t1258;
  double t1291;
  double t299;
  double t1510;
  double t1515;
  double t1525;
  double t1539;
  double t1537;
  double t1546;
  double t1552;
  double t1590;
  double t1596;
  double t1607;
  double t1614;
  double t1619;
  double t1636;
  double t1640;
  double t1651;
  double t1620;
  double t1628;
  double t1631;
  double t1679;
  double t1680;
  double t1681;
  double t1691;
  double t1682;
  double t1699;
  double t1703;
  double t1708;
  double t1709;
  double t1721;
  double t1722;
  double t1728;
  double t1732;
  double t1737;
  double t1741;
  double t1743;
  double t1750;
  double t1752;
  double t1798;
  double t1809;
  double t1810;
  double t1813;
  double t1812;
  double t1820;
  double t1821;
  double t1824;
  double t1834;
  double t1854;
  double t1874;
  double t1878;
  double t1885;
  double t1890;
  double t1903;
  double t1976;
  double t1993;
  double t2001;
  double t2014;
  double t1938;
  double t1940;
  double t1947;
  double t2009;
  double t2025;
  double t2036;
  double t2041;
  double t2054;
  double t2055;
  double t2060;
  double t2063;
  double t2065;
  double t2070;
  double t2071;
  double t2106;
  double t2126;
  double t2132;
  double t2139;
  double t2086;
  double t2089;
  double t2091;
  double t2254;
  double t2284;
  double t2288;
  double t2291;
  double t2298;
  double t2300;
  double t2304;
  double t2306;
  double t2307;
  double t2315;
  double t2319;
  double t2329;
  double t2343;
  double t2351;
  double t2363;
  double t2365;
  double t2374;
  double t2404;
  double t2413;
  double t1378;
  double t1386;
  double t1419;
  double t2424;
  double t2425;
  double t2438;
  double t1437;
  double t1438;
  double t1455;
  double t2442;
  double t2444;
  double t2446;
  double t2262;
  double t2524;
  double t2557;
  double t2562;
  double t2582;
  double t2583;
  double t2590;
  double t2563;
  double t2569;
  double t2572;
  double t2606;
  double t2609;
  double t2612;
  double t2613;
  double t2617;
  double t2622;
  double t2625;
  double t2626;
  double t2646;
  double t2649;
  double t2135;
  double t2148;
  double t2152;
  double t2658;
  double t2660;
  double t2661;
  double t2167;
  double t2171;
  double t2173;
  double t2692;
  double t2709;
  double t2713;
  double t2772;
  double t2777;
  double t2779;
  double t2781;
  double t2785;
  double t2793;
  double t2794;
  double t2797;
  double t2798;
  double t2803;
  double t2817;
  double t2826;
  double t2827;
  double t2857;
  double t2891;
  double t2893;
  double t2895;
  double t2902;
  double t2904;
  double t2912;
  double t2913;
  double t2918;
  double t2937;
  double t2938;
  double t2939;
  double t2940;
  double t2942;
  double t2948;
  double t2949;
  double t2956;
  double t3050;
  double t3051;
  double t3052;
  double t3054;
  double t3060;
  double t3062;
  double t3067;
  double t3071;
  double t3072;
  double t3077;
  double t3086;
  double t3088;
  double t3091;
  double t3107;
  double t3119;
  double t3133;
  double t3136;
  double t3143;
  double t3157;
  double t3162;
  double t3167;
  double t3169;
  double t3313;
  double t3316;
  double t3323;
  double t3296;
  double t3303;
  double t3308;
  double t3312;
  double t3325;
  double t3326;
  double t3328;
  double t3330;
  double t3332;
  double t3333;
  double t3337;
  double t3344;
  double t3347;
  double t3368;
  double t3370;
  double t3377;
  double t3380;
  double t3382;
  double t3386;
  double t3392;
  double t3406;
  double t3513;
  double t3519;
  double t3526;
  double t3497;
  double t3502;
  double t3507;
  double t3528;
  double t3532;
  double t3538;
  double t3546;
  double t3553;
  double t3554;
  double t3576;
  double t3581;
  double t3598;
  double t3669;
  double t3670;
  double t3671;
  double t3608;
  double t3709;
  double t3711;
  double t3718;
  double t3719;
  double t3724;
  double t3728;
  double t3729;
  double t3730;
  double t3733;
  double t3736;
  double t3741;
  double t3742;
  double t3743;
  double t3754;
  double t3764;
  double t3766;
  double t3767;
  double t3770;
  double t3772;
  double t3781;
  double t3783;
  double t3785;
  double t3793;
  double t3801;
  double t3802;
  double t3808;
  double t3813;
  double t3817;
  double t3818;
  double t3820;
  double t3864;
  double t3874;
  double t3876;
  double t3879;
  double t3881;
  double t3888;
  double t3894;
  double t3898;
  double t3900;
  double t3910;
  double t3913;
  double t3919;
  double t3921;
  double t3939;
  double t3950;
  double t3951;
  double t3961;
  double t3962;
  double t3967;
  double t3970;
  double t3971;
  double t3973;
  double t4023;
  double t4024;
  double t4025;
  double t4019;
  double t4021;
  double t4027;
  double t4028;
  double t4029;
  double t4031;
  double t4033;
  double t4034;
  double t4035;
  double t4038;
  double t4041;
  double t4043;
  double t4047;
  double t4058;
  double t4059;
  double t4061;
  double t4064;
  double t4072;
  double t4076;
  double t4081;
  double t4083;
  double t4134;
  double t4138;
  double t4140;
  double t4128;
  double t4129;
  double t4132;
  double t4145;
  double t4146;
  double t4151;
  double t4155;
  double t4156;
  double t4157;
  double t4163;
  double t4164;
  double t4175;
  double t4220;
  double t4221;
  double t4223;
  double t4187;
  t114 = Sin(var1[4]);
  t13 = Cos(var1[4]);
  t98 = Cos(var1[5]);
  t235 = Cos(var1[11]);
  t250 = -1.*t235;
  t251 = 1. + t250;
  t267 = Sin(var1[11]);
  t132 = Sin(var1[5]);
  t258 = -0.022225*t251;
  t277 = -0.086996*t267;
  t279 = t258 + t277;
  t294 = -1.*t13*t279;
  t300 = -0.086996*t251;
  t351 = 0.022225*t267;
  t366 = t300 + t351;
  t389 = -1.*t366*t114*t132;
  t537 = Cos(var1[12]);
  t542 = -1.*t537;
  t550 = 1. + t542;
  t561 = Sin(var1[12]);
  t397 = t13*t267;
  t413 = -1.*t235*t114*t132;
  t434 = t397 + t413;
  t446 = -1.*t235*t13;
  t456 = -1.*t267*t114*t132;
  t481 = t446 + t456;
  t552 = -0.31508*t550;
  t571 = 0.156996*t561;
  t575 = t552 + t571;
  t593 = -1.*t98*t575*t114;
  t605 = -0.156996*t550;
  t636 = -0.31508*t561;
  t647 = t605 + t636;
  t657 = t647*t434;
  t686 = -1.*t98*t561*t114;
  t702 = t537*t434;
  t707 = t686 + t702;
  t807 = Cos(var1[13]);
  t808 = -1.*t807;
  t811 = 1. + t808;
  t815 = Sin(var1[13]);
  t727 = -1.*t537*t98*t114;
  t741 = -1.*t561*t434;
  t743 = t727 + t741;
  t812 = -0.022225*t811;
  t819 = 0.38008*t815;
  t822 = t812 + t819;
  t832 = t822*t481;
  t845 = -0.38008*t811;
  t849 = -0.022225*t815;
  t864 = t845 + t849;
  t886 = t864*t743;
  t938 = t815*t481;
  t940 = t807*t743;
  t956 = t938 + t940;
  t1068 = Cos(var1[14]);
  t1087 = -1.*t1068;
  t1106 = 1. + t1087;
  t1153 = Sin(var1[14]);
  t988 = t807*t481;
  t996 = -1.*t815*t743;
  t1000 = t988 + t996;
  t1143 = -0.86008*t1106;
  t1159 = -0.022225*t1153;
  t1171 = t1143 + t1159;
  t1214 = t1171*t956;
  t1217 = -0.022225*t1106;
  t1223 = 0.86008*t1153;
  t1224 = t1217 + t1223;
  t1229 = t1224*t1000;
  t1234 = -1.*t1153*t956;
  t1245 = t1068*t1000;
  t1248 = t1234 + t1245;
  t1360 = Cos(var1[15]);
  t1363 = -1.*t1360;
  t1367 = 1. + t1363;
  t1379 = Sin(var1[15]);
  t1257 = t1068*t956;
  t1258 = t1153*t1000;
  t1291 = t1257 + t1258;
  t299 = 0.261934*t98*t114;
  t1510 = Cos(var1[6]);
  t1515 = -1.*t1510;
  t1525 = 1. + t1515;
  t1539 = Sin(var1[6]);
  t1537 = 0.087004*t1525;
  t1546 = 0.022225*t1539;
  t1552 = t1537 + t1546;
  t1590 = -1.*t114*t132*t1552;
  t1596 = -0.022225*t1525;
  t1607 = 0.087004*t1539;
  t1614 = t1596 + t1607;
  t1619 = -1.*t13*t1614;
  t1636 = -1.*t13*t1510;
  t1640 = -1.*t114*t132*t1539;
  t1651 = t1636 + t1640;
  t1620 = -1.*t1510*t114*t132;
  t1628 = t13*t1539;
  t1631 = t1620 + t1628;
  t1679 = Cos(var1[7]);
  t1680 = -1.*t1679;
  t1681 = 1. + t1680;
  t1691 = Sin(var1[7]);
  t1682 = 0.157004*t1681;
  t1699 = -0.31508*t1691;
  t1703 = t1682 + t1699;
  t1708 = t1631*t1703;
  t1709 = -0.31508*t1681;
  t1721 = -0.157004*t1691;
  t1722 = t1709 + t1721;
  t1728 = -1.*t98*t114*t1722;
  t1732 = t1679*t1631;
  t1737 = -1.*t98*t114*t1691;
  t1741 = t1732 + t1737;
  t1743 = -1.*t98*t1679*t114;
  t1750 = -1.*t1631*t1691;
  t1752 = t1743 + t1750;
  t1798 = Cos(var1[8]);
  t1809 = -1.*t1798;
  t1810 = 1. + t1809;
  t1813 = Sin(var1[8]);
  t1812 = -0.38008*t1810;
  t1820 = -0.022225*t1813;
  t1821 = t1812 + t1820;
  t1824 = t1752*t1821;
  t1834 = -0.022225*t1810;
  t1854 = 0.38008*t1813;
  t1874 = t1834 + t1854;
  t1878 = t1651*t1874;
  t1885 = t1798*t1752;
  t1890 = t1651*t1813;
  t1903 = t1885 + t1890;
  t1976 = Cos(var1[9]);
  t1993 = -1.*t1976;
  t2001 = 1. + t1993;
  t2014 = Sin(var1[9]);
  t1938 = t1798*t1651;
  t1940 = -1.*t1752*t1813;
  t1947 = t1938 + t1940;
  t2009 = -0.86008*t2001;
  t2025 = -0.022225*t2014;
  t2036 = t2009 + t2025;
  t2041 = t2036*t1903;
  t2054 = -0.022225*t2001;
  t2055 = 0.86008*t2014;
  t2060 = t2054 + t2055;
  t2063 = t2060*t1947;
  t2065 = -1.*t2014*t1903;
  t2070 = t1976*t1947;
  t2071 = t2065 + t2070;
  t2106 = Cos(var1[10]);
  t2126 = -1.*t2106;
  t2132 = 1. + t2126;
  t2139 = Sin(var1[10]);
  t2086 = t1976*t1903;
  t2089 = t2014*t1947;
  t2091 = t2086 + t2089;
  t2254 = t13*t98*t366;
  t2284 = t235*t13*t98*t647;
  t2288 = -1.*t13*t575*t132;
  t2291 = -1.*t235*t13*t98*t561;
  t2298 = -1.*t537*t13*t132;
  t2300 = t2291 + t2298;
  t2304 = t235*t537*t13*t98;
  t2306 = -1.*t13*t561*t132;
  t2307 = t2304 + t2306;
  t2315 = t13*t98*t267*t822;
  t2319 = t864*t2300;
  t2329 = t13*t98*t267*t815;
  t2343 = t807*t2300;
  t2351 = t2329 + t2343;
  t2363 = t807*t13*t98*t267;
  t2365 = -1.*t815*t2300;
  t2374 = t2363 + t2365;
  t2404 = t1171*t2351;
  t2413 = t1224*t2374;
  t1378 = -0.021147*t1367;
  t1386 = 1.34008*t1379;
  t1419 = t1378 + t1386;
  t2424 = -1.*t1153*t2351;
  t2425 = t1068*t2374;
  t2438 = t2424 + t2425;
  t1437 = -1.34008*t1367;
  t1438 = -0.021147*t1379;
  t1455 = t1437 + t1438;
  t2442 = t1068*t2351;
  t2444 = t1153*t2374;
  t2446 = t2442 + t2444;
  t2262 = 0.261934*t13*t132;
  t2524 = t13*t98*t1552;
  t2557 = t13*t98*t1510*t1703;
  t2562 = -1.*t13*t132*t1722;
  t2582 = t13*t98*t1510*t1679;
  t2583 = -1.*t13*t132*t1691;
  t2590 = t2582 + t2583;
  t2563 = -1.*t13*t1679*t132;
  t2569 = -1.*t13*t98*t1510*t1691;
  t2572 = t2563 + t2569;
  t2606 = t2572*t1821;
  t2609 = t13*t98*t1539*t1874;
  t2612 = t1798*t2572;
  t2613 = t13*t98*t1539*t1813;
  t2617 = t2612 + t2613;
  t2622 = t13*t98*t1798*t1539;
  t2625 = -1.*t2572*t1813;
  t2626 = t2622 + t2625;
  t2646 = t2036*t2617;
  t2649 = t2060*t2626;
  t2135 = -0.021147*t2132;
  t2148 = 1.34008*t2139;
  t2152 = t2135 + t2148;
  t2658 = -1.*t2014*t2617;
  t2660 = t1976*t2626;
  t2661 = t2658 + t2660;
  t2167 = -1.34008*t2132;
  t2171 = -0.021147*t2139;
  t2173 = t2167 + t2171;
  t2692 = t1976*t2617;
  t2709 = t2014*t2626;
  t2713 = t2692 + t2709;
  t2772 = 0.087004*t1510;
  t2777 = -0.022225*t1539;
  t2779 = t2772 + t2777;
  t2781 = -1.*t114*t2779;
  t2785 = 0.022225*t1510;
  t2793 = t2785 + t1607;
  t2794 = t13*t132*t2793;
  t2797 = t13*t1510*t132;
  t2798 = t114*t1539;
  t2803 = t2797 + t2798;
  t2817 = t1510*t114;
  t2826 = -1.*t13*t132*t1539;
  t2827 = t2817 + t2826;
  t2857 = t2827*t1703;
  t2891 = -1.*t2827*t1691*t1821;
  t2893 = t2803*t1874;
  t2895 = -1.*t1798*t2827*t1691;
  t2902 = t2803*t1813;
  t2904 = t2895 + t2902;
  t2912 = t1798*t2803;
  t2913 = t2827*t1691*t1813;
  t2918 = t2912 + t2913;
  t2937 = t2036*t2904;
  t2938 = t2060*t2918;
  t2939 = -1.*t2014*t2904;
  t2940 = t1976*t2918;
  t2942 = t2939 + t2940;
  t2948 = t1976*t2904;
  t2949 = t2014*t2918;
  t2956 = t2948 + t2949;
  t3050 = -0.157004*t1679;
  t3051 = t3050 + t1699;
  t3052 = t13*t98*t3051;
  t3054 = -0.31508*t1679;
  t3060 = 0.157004*t1691;
  t3062 = t3054 + t3060;
  t3067 = t2803*t3062;
  t3071 = -1.*t1679*t2803;
  t3072 = -1.*t13*t98*t1691;
  t3077 = t3071 + t3072;
  t3086 = t13*t98*t1679;
  t3088 = -1.*t2803*t1691;
  t3091 = t3086 + t3088;
  t3107 = t3077*t1821;
  t3119 = t1798*t2036*t3077;
  t3133 = -1.*t2060*t3077*t1813;
  t3136 = -1.*t1798*t2014*t3077;
  t3143 = -1.*t1976*t3077*t1813;
  t3157 = t3136 + t3143;
  t3162 = t1976*t1798*t3077;
  t3167 = -1.*t2014*t3077*t1813;
  t3169 = t3162 + t3167;
  t3313 = -1.*t1510*t114;
  t3316 = t13*t132*t1539;
  t3323 = t3313 + t3316;
  t3296 = -0.022225*t1798;
  t3303 = -0.38008*t1813;
  t3308 = t3296 + t3303;
  t3312 = t3091*t3308;
  t3325 = 0.38008*t1798;
  t3326 = t3325 + t1820;
  t3328 = t3323*t3326;
  t3330 = -1.*t1798*t3091;
  t3332 = -1.*t3323*t1813;
  t3333 = t3330 + t3332;
  t3337 = t1798*t3323;
  t3344 = -1.*t3091*t1813;
  t3347 = t3337 + t3344;
  t3368 = t2060*t3333;
  t3370 = t2036*t3347;
  t3377 = t2014*t3333;
  t3380 = t1976*t3347;
  t3382 = t3377 + t3380;
  t3386 = t1976*t3333;
  t3392 = -1.*t2014*t3347;
  t3406 = t3386 + t3392;
  t3513 = t1798*t3091;
  t3519 = t3323*t1813;
  t3526 = t3513 + t3519;
  t3497 = -0.022225*t1976;
  t3502 = -0.86008*t2014;
  t3507 = t3497 + t3502;
  t3528 = t3507*t3526;
  t3532 = 0.86008*t1976;
  t3538 = t3532 + t2025;
  t3546 = t3538*t3347;
  t3553 = -1.*t2014*t3526;
  t3554 = t3553 + t3380;
  t3576 = -1.*t1976*t3526;
  t3581 = t3576 + t3392;
  t3598 = -1.*t2139*t3554;
  t3669 = t1976*t3526;
  t3670 = t2014*t3347;
  t3671 = t3669 + t3670;
  t3608 = t2106*t3554;
  t3709 = -0.086996*t235;
  t3711 = -0.022225*t267;
  t3718 = t3709 + t3711;
  t3719 = -1.*t3718*t114;
  t3724 = 0.022225*t235;
  t3728 = t3724 + t277;
  t3729 = t13*t3728*t132;
  t3730 = t267*t114;
  t3733 = t235*t13*t132;
  t3736 = t3730 + t3733;
  t3741 = t235*t114;
  t3742 = -1.*t13*t267*t132;
  t3743 = t3741 + t3742;
  t3754 = t647*t3743;
  t3764 = t822*t3736;
  t3766 = -1.*t561*t864*t3743;
  t3767 = t815*t3736;
  t3770 = -1.*t807*t561*t3743;
  t3772 = t3767 + t3770;
  t3781 = t807*t3736;
  t3783 = t561*t815*t3743;
  t3785 = t3781 + t3783;
  t3793 = t1171*t3772;
  t3801 = t1224*t3785;
  t3802 = -1.*t1153*t3772;
  t3808 = t1068*t3785;
  t3813 = t3802 + t3808;
  t3817 = t1068*t3772;
  t3818 = t1153*t3785;
  t3820 = t3817 + t3818;
  t3864 = 0.156996*t537;
  t3874 = t3864 + t636;
  t3876 = t13*t98*t3874;
  t3879 = -0.31508*t537;
  t3881 = -0.156996*t561;
  t3888 = t3879 + t3881;
  t3894 = t3888*t3736;
  t3898 = -1.*t13*t98*t561;
  t3900 = -1.*t537*t3736;
  t3910 = t3898 + t3900;
  t3913 = t537*t13*t98;
  t3919 = -1.*t561*t3736;
  t3921 = t3913 + t3919;
  t3939 = t864*t3910;
  t3950 = t807*t1171*t3910;
  t3951 = -1.*t815*t1224*t3910;
  t3961 = -1.*t1068*t815*t3910;
  t3962 = -1.*t807*t1153*t3910;
  t3967 = t3961 + t3962;
  t3970 = t807*t1068*t3910;
  t3971 = -1.*t815*t1153*t3910;
  t3973 = t3970 + t3971;
  t4023 = -1.*t235*t114;
  t4024 = t13*t267*t132;
  t4025 = t4023 + t4024;
  t4019 = 0.38008*t807;
  t4021 = t4019 + t849;
  t4027 = t4021*t4025;
  t4028 = -0.022225*t807;
  t4029 = -0.38008*t815;
  t4031 = t4028 + t4029;
  t4033 = t4031*t3921;
  t4034 = -1.*t815*t4025;
  t4035 = -1.*t807*t3921;
  t4038 = t4034 + t4035;
  t4041 = t807*t4025;
  t4043 = -1.*t815*t3921;
  t4047 = t4041 + t4043;
  t4058 = t1224*t4038;
  t4059 = t1171*t4047;
  t4061 = t1153*t4038;
  t4064 = t1068*t4047;
  t4072 = t4061 + t4064;
  t4076 = t1068*t4038;
  t4081 = -1.*t1153*t4047;
  t4083 = t4076 + t4081;
  t4134 = t815*t4025;
  t4138 = t807*t3921;
  t4140 = t4134 + t4138;
  t4128 = -0.022225*t1068;
  t4129 = -0.86008*t1153;
  t4132 = t4128 + t4129;
  t4145 = t4132*t4140;
  t4146 = 0.86008*t1068;
  t4151 = t4146 + t1159;
  t4155 = t4151*t4047;
  t4156 = -1.*t1153*t4140;
  t4157 = t4156 + t4064;
  t4163 = -1.*t1068*t4140;
  t4164 = t4163 + t4081;
  t4175 = -1.*t1379*t4157;
  t4220 = t1068*t4140;
  t4221 = t1153*t4047;
  t4223 = t4220 + t4221;
  t4187 = t1360*t4157;

  p_output1(0)=0;
  p_output1(1)=0;
  p_output1(2)=349.236;
  p_output1(3)=0;
  p_output1(4)=4.905*(t1590 + t1619 - 0.018834*t1651 + t1708 + t1728 + 0.177665*t1741 - 0.340809*t1752) + 58.86*(t1590 + t1619 + t1708 + t1728 + 0.173654*t1741 + t1824 + t1878 - 0.620188*t1903 - 0.021332*t1947) + 37.278*(t1590 + t1619 + t1708 + t1728 + 0.166946*t1741 + t1824 + t1878 + t2041 + t2063 - 0.038294*t2071 - 1.107902*t2091) + 4.905*(t1590 + t1619 + t1708 + t1728 + 0.166999*t1741 + t1824 + t1878 + t2041 + t2063 - 1.329456*(t2091*t2106 + t2071*t2139) + 0.023136*(t2071*t2106 - 1.*t2091*t2139) + t2071*t2152 + t2091*t2173) + 9.81*(t1590 + t1619 + 0.16373*t1631 - 0.023556*t1651 + t299) + 9.81*(t294 + t299 + t389 - 0.163722*t434 - 0.020894*t481) + 4.905*(t294 + t389 - 0.018834*t481 + t593 + t657 - 0.177657*t707 - 0.340809*t743) + 37.278*(t1214 + t1229 - 0.038294*t1248 - 1.107902*t1291 + t294 + t389 + t593 + t657 - 0.167054*t707 + t832 + t886) + 4.905*(t1214 + t1229 - 1.329456*(t1291*t1360 + t1248*t1379) + 0.023136*(t1248*t1360 - 1.*t1291*t1379) + t1248*t1419 + t1291*t1455 + t294 + t389 + t593 + t657 - 0.167001*t707 + t832 + t886) + 58.86*(-0.021332*t1000 + t294 + t389 + t593 + t657 - 0.160346*t707 + t832 + t886 - 0.620188*t956) + 117.72*(0.013391*t13 - 0.000754*t114*t132 + 0.187273*t114*t98);
  p_output1(5)=58.86*(t2254 + t2284 + t2288 - 0.160346*t2307 + t2315 + t2319 - 0.620188*t2351 - 0.021332*t2374) + 37.278*(t2254 + t2284 + t2288 - 0.167054*t2307 + t2315 + t2319 + t2404 + t2413 - 0.038294*t2438 - 1.107902*t2446) + 4.905*(t2254 + t2284 + t2288 - 0.167001*t2307 + t2315 + t2319 + t2404 + t2413 + t1419*t2438 + t1455*t2446 - 1.329456*(t1379*t2438 + t1360*t2446) + 0.023136*(t1360*t2438 - 1.*t1379*t2446)) + 58.86*(t2524 + t2557 + t2562 + 0.173654*t2590 + t2606 + t2609 - 0.620188*t2617 - 0.021332*t2626) + 37.278*(t2524 + t2557 + t2562 + 0.166946*t2590 + t2606 + t2609 + t2646 + t2649 - 0.038294*t2661 - 1.107902*t2713) + 4.905*(t2524 + t2557 + t2562 + 0.166999*t2590 + t2606 + t2609 + t2646 + t2649 + t2152*t2661 + t2173*t2713 - 1.329456*(t2139*t2661 + t2106*t2713) + 0.023136*(t2106*t2661 - 1.*t2139*t2713)) + 117.72*(0.187273*t13*t132 + 0.000754*t13*t98) + 9.81*(t2262 + t2524 + 0.16373*t13*t1510*t98 - 0.023556*t13*t1539*t98) + 4.905*(t2524 + t2557 + t2562 - 0.340809*t2572 + 0.177665*t2590 - 0.018834*t13*t1539*t98) + 9.81*(t2254 + t2262 - 0.163722*t13*t235*t98 - 0.020894*t13*t267*t98) + 4.905*(t2254 + t2284 + t2288 - 0.340809*t2300 - 0.177657*t2307 - 0.018834*t13*t267*t98);
  p_output1(6)=9.81*(t2781 + t2794 - 0.023556*t2803 + 0.16373*t2827) + 4.905*(t2781 + t2794 - 0.018834*t2803 + 0.177665*t1679*t2827 + 0.340809*t1691*t2827 + t2857) + 58.86*(t2781 + t2794 + 0.173654*t1679*t2827 + t2857 + t2891 + t2893 - 0.620188*t2904 - 0.021332*t2918) + 37.278*(t2781 + t2794 + 0.166946*t1679*t2827 + t2857 + t2891 + t2893 + t2937 + t2938 - 0.038294*t2942 - 1.107902*t2956) + 4.905*(t2781 + t2794 + 0.166999*t1679*t2827 + t2857 + t2891 + t2893 + t2937 + t2938 + t2152*t2942 + t2173*t2956 - 1.329456*(t2139*t2942 + t2106*t2956) + 0.023136*(t2106*t2942 - 1.*t2139*t2956));
  p_output1(7)=4.905*(t3052 + t3067 - 0.340809*t3077 + 0.177665*t3091) + 58.86*(t3052 + t3067 - 0.620188*t1798*t3077 + 0.021332*t1813*t3077 + 0.173654*t3091 + t3107) + 37.278*(t3052 + t3067 + 0.166946*t3091 + t3107 + t3119 + t3133 - 0.038294*t3157 - 1.107902*t3169) + 4.905*(t3052 + t3067 + 0.166999*t3091 + t3107 + t3119 + t3133 + t2152*t3157 + t2173*t3169 - 1.329456*(t2139*t3157 + t2106*t3169) + 0.023136*(t2106*t3157 - 1.*t2139*t3169));
  p_output1(8)=58.86*(t3312 + t3328 - 0.021332*t3333 - 0.620188*t3347) + 37.278*(t3312 + t3328 + t3368 + t3370 - 1.107902*t3382 - 0.038294*t3406) + 4.905*(t3312 + t3328 + t3368 + t3370 + t2173*t3382 + t2152*t3406 + 0.023136*(-1.*t2139*t3382 + t2106*t3406) - 1.329456*(t2106*t3382 + t2139*t3406));
  p_output1(9)=37.278*(t3528 + t3546 - 1.107902*t3554 - 0.038294*t3581) + 4.905*(t3528 + t3546 + t2173*t3554 + t2152*t3581 + 0.023136*(t2106*t3581 + t3598) - 1.329456*(t2139*t3581 + t3608));
  p_output1(10)=4.905*((1.34008*t2106 + t2171)*t3554 + (-0.021147*t2106 - 1.34008*t2139)*t3671 + 0.023136*(t3598 - 1.*t2106*t3671) - 1.329456*(t3608 - 1.*t2139*t3671));
  p_output1(11)=9.81*(t3719 + t3729 - 0.020894*t3736 - 0.163722*t3743) + 37.278*(t3719 + t3729 + t3754 + t3764 + t3766 + t3793 + t3801 - 0.038294*t3813 - 1.107902*t3820 - 0.167054*t3743*t537) + 4.905*(t3719 + t3729 + t3754 + t3764 + t3766 + t3793 + t3801 + t1419*t3813 + t1455*t3820 - 1.329456*(t1379*t3813 + t1360*t3820) + 0.023136*(t1360*t3813 - 1.*t1379*t3820) - 0.167001*t3743*t537) + 58.86*(t3719 + t3729 + t3754 + t3764 + t3766 - 0.620188*t3772 - 0.021332*t3785 - 0.160346*t3743*t537) + 4.905*(t3719 + t3729 - 0.018834*t3736 + t3754 - 0.177657*t3743*t537 + 0.340809*t3743*t561);
  p_output1(12)=4.905*(t3876 + t3894 - 0.340809*t3910 - 0.177657*t3921) + 37.278*(t3876 + t3894 - 0.167054*t3921 + t3939 + t3950 + t3951 - 0.038294*t3967 - 1.107902*t3973) + 4.905*(t3876 + t3894 - 0.167001*t3921 + t3939 + t3950 + t3951 + t1419*t3967 + t1455*t3973 - 1.329456*(t1379*t3967 + t1360*t3973) + 0.023136*(t1360*t3967 - 1.*t1379*t3973)) + 58.86*(t3876 + t3894 - 0.160346*t3921 + t3939 - 0.620188*t3910*t807 + 0.021332*t3910*t815);
  p_output1(13)=58.86*(t4027 + t4033 - 0.021332*t4038 - 0.620188*t4047) + 37.278*(t4027 + t4033 + t4058 + t4059 - 1.107902*t4072 - 0.038294*t4083) + 4.905*(t4027 + t4033 + t4058 + t4059 + t1455*t4072 + t1419*t4083 + 0.023136*(-1.*t1379*t4072 + t1360*t4083) - 1.329456*(t1360*t4072 + t1379*t4083));
  p_output1(14)=37.278*(t4145 + t4155 - 1.107902*t4157 - 0.038294*t4164) + 4.905*(t4145 + t4155 + t1455*t4157 + t1419*t4164 + 0.023136*(t1360*t4164 + t4175) - 1.329456*(t1379*t4164 + t4187));
  p_output1(15)=4.905*((1.34008*t1360 + t1438)*t4157 + (-0.021147*t1360 - 1.34008*t1379)*t4223 + 0.023136*(t4175 - 1.*t1360*t4223) - 1.329456*(t4187 - 1.*t1379*t4223));
}


       
void Ge_Draco(Eigen::Matrix<double,16,1> &p_output1, const Eigen::Matrix<double,16,1> &var1)
{
  // Call Subroutines
  output1(p_output1, var1);

}
