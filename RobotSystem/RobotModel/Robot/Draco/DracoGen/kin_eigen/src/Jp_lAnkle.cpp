/*
 * Automatically Generated from Mathematica.
 * Thu 16 Aug 2018 18:04:50 GMT-05:00
 */
#include <stdio.h>
#include <stdlib.h>
#include <math.h>

#include "Jp_lAnkle.h"

#ifdef _MSC_VER
  #define INLINE __forceinline /* use __forceinline (VC++ specific) */
#else
  #define INLINE inline        /* use standard inline */
#endif

/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
INLINE double Power(double x, double y) { return pow(x, y); }
INLINE double Sqrt(double x) { return sqrt(x); }

INLINE double Abs(double x) { return fabs(x); }

INLINE double Exp(double x) { return exp(x); }
INLINE double Log(double x) { return log(x); }

INLINE double Sin(double x) { return sin(x); }
INLINE double Cos(double x) { return cos(x); }
INLINE double Tan(double x) { return tan(x); }

INLINE double Csc(double x) { return 1.0/sin(x); }
INLINE double Sec(double x) { return 1.0/cos(x); }

INLINE double ArcSin(double x) { return asin(x); }
INLINE double ArcCos(double x) { return acos(x); }
//INLINE double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
INLINE double ArcTan(double x, double y) { return atan2(y,x); }

INLINE double Sinh(double x) { return sinh(x); }
INLINE double Cosh(double x) { return cosh(x); }
INLINE double Tanh(double x) { return tanh(x); }

#define E 2.71828182845904523536029
#define Pi 3.14159265358979323846264
#define Degree 0.01745329251994329576924

/*
 * Sub functions
 */
static void output1(Eigen::Matrix<double,3,16> &p_output1, const Eigen::Matrix<double,16,1> &var1)
{
  double t178;
  double t298;
  double t345;
  double t359;
  double t395;
  double t39;
  double t76;
  double t136;
  double t205;
  double t211;
  double t215;
  double t251;
  double t486;
  double t989;
  double t1050;
  double t1079;
  double t1104;
  double t690;
  double t763;
  double t861;
  double t1286;
  double t1304;
  double t1321;
  double t1973;
  double t1982;
  double t1997;
  double t2006;
  double t1709;
  double t1761;
  double t1891;
  double t2071;
  double t2087;
  double t2121;
  double t2239;
  double t2262;
  double t2281;
  double t2356;
  double t2460;
  double t2493;
  double t2506;
  double t2660;
  double t2665;
  double t2675;
  double t2686;
  double t2721;
  double t2761;
  double t2852;
  double t2888;
  double t2990;
  double t3090;
  double t3475;
  double t3487;
  double t3488;
  double t382;
  double t401;
  double t413;
  double t527;
  double t564;
  double t628;
  double t3959;
  double t4038;
  double t4080;
  double t1099;
  double t1107;
  double t1254;
  double t1379;
  double t1386;
  double t1441;
  double t4176;
  double t4214;
  double t4215;
  double t4230;
  double t4235;
  double t4263;
  double t1998;
  double t2023;
  double t2033;
  double t2151;
  double t2153;
  double t2182;
  double t2353;
  double t2384;
  double t2387;
  double t4481;
  double t4505;
  double t4514;
  double t4530;
  double t4558;
  double t4573;
  double t2529;
  double t2644;
  double t2656;
  double t2836;
  double t2856;
  double t2869;
  double t4605;
  double t4644;
  double t4692;
  double t4783;
  double t4784;
  double t4813;
  double t3147;
  double t3318;
  double t3467;
  double t4952;
  double t4972;
  double t5005;
  double t5043;
  double t5056;
  double t5058;
  double t5665;
  double t5676;
  double t5691;
  double t5900;
  double t5919;
  double t5977;
  double t6012;
  double t6022;
  double t6039;
  double t6161;
  double t6174;
  double t6182;
  double t6193;
  double t6195;
  double t6199;
  double t6207;
  double t6227;
  double t6232;
  double t6267;
  double t6268;
  double t6288;
  double t6642;
  double t6646;
  double t6655;
  double t6689;
  double t6706;
  double t6710;
  double t6714;
  double t6722;
  double t6726;
  double t6797;
  double t6804;
  double t6810;
  double t6826;
  double t6844;
  double t6865;
  double t6872;
  double t6883;
  double t6887;
  double t6895;
  double t6900;
  double t6922;
  double t7100;
  double t7101;
  double t7118;
  double t7145;
  double t7162;
  double t7169;
  double t7172;
  double t7178;
  double t7183;
  double t7194;
  double t7200;
  double t7237;
  double t7246;
  double t7259;
  double t7262;
  double t7278;
  double t7286;
  double t7300;
  double t7338;
  double t7347;
  double t7348;
  double t7434;
  double t7441;
  double t7442;
  double t7477;
  double t7478;
  double t7479;
  double t7488;
  double t7490;
  double t7498;
  double t7505;
  double t7506;
  double t7511;
  double t7539;
  double t7541;
  double t7560;
  double t7565;
  double t7578;
  double t7579;
  double t7644;
  double t7645;
  double t7651;
  double t7695;
  double t7699;
  double t7700;
  double t7708;
  double t7711;
  double t7714;
  double t7722;
  double t7732;
  double t7737;
  double t7745;
  double t7765;
  double t7766;
  double t7771;
  double t7781;
  double t7787;
  double t7899;
  double t7906;
  double t7907;
  double t7914;
  double t7916;
  double t7920;
  double t7923;
  double t7926;
  double t7928;
  double t7935;
  double t7946;
  double t7947;
  double t7953;
  double t7970;
  double t7980;
  double t8064;
  double t8075;
  double t8076;
  double t8088;
  double t8090;
  double t8093;
  double t8120;
  double t8136;
  double t8139;
  double t8141;
  double t8154;
  double t8158;
  double t8179;
  double t8181;
  double t8192;
  double t8047;
  double t8048;
  double t8050;
  double t8060;
  double t8062;
  double t8254;
  double t8263;
  double t8264;
  double t8280;
  double t8296;
  double t8315;
  double t8340;
  double t8342;
  double t8346;
  double t8354;
  double t8356;
  double t8379;
  double t8381;
  double t8383;
  double t8418;
  double t8424;
  double t8427;
  double t8435;
  double t8443;
  double t8449;
  double t8532;
  double t8536;
  double t8537;
  double t8557;
  double t8560;
  double t8562;
  double t8565;
  double t8567;
  double t8583;
  double t8650;
  double t8656;
  double t8663;
  double t8683;
  double t8694;
  double t8697;
  double t8704;
  double t8706;
  double t8707;
  double t8852;
  double t8862;
  double t8863;
  double t8889;
  double t8891;
  double t8901;
  double t8903;
  double t8920;
  double t8932;
  double t8809;
  double t8814;
  double t8827;
  double t8835;
  double t8836;
  double t9009;
  double t9015;
  double t9026;
  double t9066;
  double t9069;
  double t9071;
  double t9076;
  double t9077;
  double t9079;
  double t9157;
  double t9160;
  double t9161;
  double t9206;
  double t9219;
  double t9220;
  double t9250;
  double t9254;
  double t9261;
  double t9355;
  double t9358;
  double t9369;
  double t9381;
  double t9407;
  double t9416;
  double t9418;
  double t9422;
  double t9042;
  double t9048;
  double t9054;
  double t9326;
  double t9327;
  double t9328;
  double t9338;
  double t9347;
  double t9483;
  double t9493;
  double t9494;
  double t9515;
  double t9522;
  double t9532;
  double t9557;
  double t9559;
  double t9579;
  double t9587;
  double t9601;
  double t9602;
  double t9609;
  double t9613;
  double t9617;
  double t9167;
  double t9168;
  double t9184;
  double t9635;
  double t9638;
  double t9640;
  double t9651;
  double t9652;
  double t9653;
  double t9657;
  double t9660;
  double t9663;
  double t9671;
  double t9672;
  double t9677;
  double t9683;
  double t9691;
  double t9692;
  double t9729;
  double t9732;
  double t5356;
  double t9718;
  double t9719;
  double t9720;
  double t9722;
  double t9723;
  double t9749;
  double t9750;
  double t9751;
  double t9754;
  double t9755;
  double t9757;
  double t9758;
  double t9771;
  double t9772;
  double t9773;
  double t9776;
  double t9777;
  double t9780;
  double t9783;
  double t9734;
  double t5433;
  double t5555;
  double t9797;
  double t9799;
  double t9803;
  double t9805;
  double t9806;
  double t9760;
  double t9816;
  double t9817;
  double t9818;
  double t9764;
  double t9786;
  double t9828;
  double t9829;
  double t9830;
  double t9792;
  t178 = Sin(var1[3]);
  t298 = Cos(var1[6]);
  t345 = -1.*t298;
  t359 = 1. + t345;
  t395 = Sin(var1[6]);
  t39 = Cos(var1[3]);
  t76 = Cos(var1[5]);
  t136 = -1.*t39*t76;
  t205 = Sin(var1[4]);
  t211 = Sin(var1[5]);
  t215 = -1.*t178*t205*t211;
  t251 = t136 + t215;
  t486 = Cos(var1[4]);
  t989 = Cos(var1[7]);
  t1050 = -1.*t989;
  t1079 = 1. + t1050;
  t1104 = Sin(var1[7]);
  t690 = t298*t251;
  t763 = t486*t178*t395;
  t861 = t690 + t763;
  t1286 = -1.*t76*t178*t205;
  t1304 = t39*t211;
  t1321 = t1286 + t1304;
  t1973 = Cos(var1[8]);
  t1982 = -1.*t1973;
  t1997 = 1. + t1982;
  t2006 = Sin(var1[8]);
  t1709 = t989*t1321;
  t1761 = -1.*t861*t1104;
  t1891 = t1709 + t1761;
  t2071 = -1.*t486*t298*t178;
  t2087 = t251*t395;
  t2121 = t2071 + t2087;
  t2239 = Cos(var1[9]);
  t2262 = -1.*t2239;
  t2281 = 1. + t2262;
  t2356 = Sin(var1[9]);
  t2460 = t1973*t1891;
  t2493 = t2121*t2006;
  t2506 = t2460 + t2493;
  t2660 = t1973*t2121;
  t2665 = -1.*t1891*t2006;
  t2675 = t2660 + t2665;
  t2686 = Cos(var1[10]);
  t2721 = -1.*t2686;
  t2761 = 1. + t2721;
  t2852 = Sin(var1[10]);
  t2888 = -1.*t2356*t2506;
  t2990 = t2239*t2675;
  t3090 = t2888 + t2990;
  t3475 = t2239*t2506;
  t3487 = t2356*t2675;
  t3488 = t3475 + t3487;
  t382 = 0.087004*t359;
  t401 = 0.022225*t395;
  t413 = 0. + t382 + t401;
  t527 = -0.022225*t359;
  t564 = 0.087004*t395;
  t628 = 0. + t527 + t564;
  t3959 = -1.*t76*t178;
  t4038 = t39*t205*t211;
  t4080 = t3959 + t4038;
  t1099 = 0.157004*t1079;
  t1107 = -0.31508*t1104;
  t1254 = 0. + t1099 + t1107;
  t1379 = -0.31508*t1079;
  t1386 = -0.157004*t1104;
  t1441 = 0. + t1379 + t1386;
  t4176 = t298*t4080;
  t4214 = -1.*t39*t486*t395;
  t4215 = t4176 + t4214;
  t4230 = t39*t76*t205;
  t4235 = t178*t211;
  t4263 = t4230 + t4235;
  t1998 = -0.38008*t1997;
  t2023 = -0.022225*t2006;
  t2033 = 0. + t1998 + t2023;
  t2151 = -0.022225*t1997;
  t2153 = 0.38008*t2006;
  t2182 = 0. + t2151 + t2153;
  t2353 = -0.86008*t2281;
  t2384 = -0.022225*t2356;
  t2387 = 0. + t2353 + t2384;
  t4481 = t989*t4263;
  t4505 = -1.*t4215*t1104;
  t4514 = t4481 + t4505;
  t4530 = t39*t486*t298;
  t4558 = t4080*t395;
  t4573 = t4530 + t4558;
  t2529 = -0.022225*t2281;
  t2644 = 0.86008*t2356;
  t2656 = 0. + t2529 + t2644;
  t2836 = -0.021147*t2761;
  t2856 = 1.34008*t2852;
  t2869 = 0. + t2836 + t2856;
  t4605 = t1973*t4514;
  t4644 = t4573*t2006;
  t4692 = t4605 + t4644;
  t4783 = t1973*t4573;
  t4784 = -1.*t4514*t2006;
  t4813 = t4783 + t4784;
  t3147 = -1.34008*t2761;
  t3318 = -0.021147*t2852;
  t3467 = 0. + t3147 + t3318;
  t4952 = -1.*t2356*t4692;
  t4972 = t2239*t4813;
  t5005 = t4952 + t4972;
  t5043 = t2239*t4692;
  t5056 = t2356*t4813;
  t5058 = t5043 + t5056;
  t5665 = t39*t486*t298*t211;
  t5676 = t39*t205*t395;
  t5691 = t5665 + t5676;
  t5900 = t39*t486*t76*t989;
  t5919 = -1.*t5691*t1104;
  t5977 = t5900 + t5919;
  t6012 = -1.*t39*t298*t205;
  t6022 = t39*t486*t211*t395;
  t6039 = t6012 + t6022;
  t6161 = t1973*t5977;
  t6174 = t6039*t2006;
  t6182 = t6161 + t6174;
  t6193 = t1973*t6039;
  t6195 = -1.*t5977*t2006;
  t6199 = t6193 + t6195;
  t6207 = -1.*t2356*t6182;
  t6227 = t2239*t6199;
  t6232 = t6207 + t6227;
  t6267 = t2239*t6182;
  t6268 = t2356*t6199;
  t6288 = t6267 + t6268;
  t6642 = t486*t298*t178*t211;
  t6646 = t178*t205*t395;
  t6655 = t6642 + t6646;
  t6689 = t486*t76*t989*t178;
  t6706 = -1.*t6655*t1104;
  t6710 = t6689 + t6706;
  t6714 = -1.*t298*t178*t205;
  t6722 = t486*t178*t211*t395;
  t6726 = t6714 + t6722;
  t6797 = t1973*t6710;
  t6804 = t6726*t2006;
  t6810 = t6797 + t6804;
  t6826 = t1973*t6726;
  t6844 = -1.*t6710*t2006;
  t6865 = t6826 + t6844;
  t6872 = -1.*t2356*t6810;
  t6883 = t2239*t6865;
  t6887 = t6872 + t6883;
  t6895 = t2239*t6810;
  t6900 = t2356*t6865;
  t6922 = t6895 + t6900;
  t7100 = -1.*t298*t205*t211;
  t7101 = t486*t395;
  t7118 = t7100 + t7101;
  t7145 = -1.*t76*t989*t205;
  t7162 = -1.*t7118*t1104;
  t7169 = t7145 + t7162;
  t7172 = -1.*t486*t298;
  t7178 = -1.*t205*t211*t395;
  t7183 = t7172 + t7178;
  t7194 = t1973*t7169;
  t7200 = t7183*t2006;
  t7237 = t7194 + t7200;
  t7246 = t1973*t7183;
  t7259 = -1.*t7169*t2006;
  t7262 = t7246 + t7259;
  t7278 = -1.*t2356*t7237;
  t7286 = t2239*t7262;
  t7300 = t7278 + t7286;
  t7338 = t2239*t7237;
  t7347 = t2356*t7262;
  t7348 = t7338 + t7347;
  t7434 = t76*t178;
  t7441 = -1.*t39*t205*t211;
  t7442 = t7434 + t7441;
  t7477 = t989*t7442;
  t7478 = -1.*t298*t4263*t1104;
  t7479 = t7477 + t7478;
  t7488 = t1973*t7479;
  t7490 = t4263*t395*t2006;
  t7498 = t7488 + t7490;
  t7505 = t1973*t4263*t395;
  t7506 = -1.*t7479*t2006;
  t7511 = t7505 + t7506;
  t7539 = -1.*t2356*t7498;
  t7541 = t2239*t7511;
  t7560 = t7539 + t7541;
  t7565 = t2239*t7498;
  t7578 = t2356*t7511;
  t7579 = t7565 + t7578;
  t7644 = t76*t178*t205;
  t7645 = -1.*t39*t211;
  t7651 = t7644 + t7645;
  t7695 = t989*t251;
  t7699 = -1.*t298*t7651*t1104;
  t7700 = t7695 + t7699;
  t7708 = t1973*t7700;
  t7711 = t7651*t395*t2006;
  t7714 = t7708 + t7711;
  t7722 = t1973*t7651*t395;
  t7732 = -1.*t7700*t2006;
  t7737 = t7722 + t7732;
  t7745 = -1.*t2356*t7714;
  t7765 = t2239*t7737;
  t7766 = t7745 + t7765;
  t7771 = t2239*t7714;
  t7781 = t2356*t7737;
  t7787 = t7771 + t7781;
  t7899 = -1.*t486*t989*t211;
  t7906 = -1.*t486*t76*t298*t1104;
  t7907 = t7899 + t7906;
  t7914 = t1973*t7907;
  t7916 = t486*t76*t395*t2006;
  t7920 = t7914 + t7916;
  t7923 = t486*t76*t1973*t395;
  t7926 = -1.*t7907*t2006;
  t7928 = t7923 + t7926;
  t7935 = -1.*t2356*t7920;
  t7946 = t2239*t7928;
  t7947 = t7935 + t7946;
  t7953 = t2239*t7920;
  t7970 = t2356*t7928;
  t7980 = t7953 + t7970;
  t8064 = -1.*t39*t486*t298;
  t8075 = -1.*t4080*t395;
  t8076 = t8064 + t8075;
  t8088 = -1.*t1973*t8076*t1104;
  t8090 = t4215*t2006;
  t8093 = t8088 + t8090;
  t8120 = t1973*t4215;
  t8136 = t8076*t1104*t2006;
  t8139 = t8120 + t8136;
  t8141 = -1.*t2356*t8093;
  t8154 = t2239*t8139;
  t8158 = t8141 + t8154;
  t8179 = t2239*t8093;
  t8181 = t2356*t8139;
  t8192 = t8179 + t8181;
  t8047 = 0.087004*t298;
  t8048 = -0.022225*t395;
  t8050 = t8047 + t8048;
  t8060 = 0.022225*t298;
  t8062 = t8060 + t564;
  t8254 = t39*t76;
  t8263 = t178*t205*t211;
  t8264 = t8254 + t8263;
  t8280 = -1.*t8264*t395;
  t8296 = t2071 + t8280;
  t8315 = t298*t8264;
  t8340 = -1.*t486*t178*t395;
  t8342 = t8315 + t8340;
  t8346 = -1.*t1973*t8296*t1104;
  t8354 = t8342*t2006;
  t8356 = t8346 + t8354;
  t8379 = t1973*t8342;
  t8381 = t8296*t1104*t2006;
  t8383 = t8379 + t8381;
  t8418 = -1.*t2356*t8356;
  t8424 = t2239*t8383;
  t8427 = t8418 + t8424;
  t8435 = t2239*t8356;
  t8443 = t2356*t8383;
  t8449 = t8435 + t8443;
  t8532 = t298*t205;
  t8536 = -1.*t486*t211*t395;
  t8537 = t8532 + t8536;
  t8557 = t486*t298*t211;
  t8560 = t205*t395;
  t8562 = t8557 + t8560;
  t8565 = -1.*t1973*t8537*t1104;
  t8567 = t8562*t2006;
  t8583 = t8565 + t8567;
  t8650 = t1973*t8562;
  t8656 = t8537*t1104*t2006;
  t8663 = t8650 + t8656;
  t8683 = -1.*t2356*t8583;
  t8694 = t2239*t8663;
  t8697 = t8683 + t8694;
  t8704 = t2239*t8583;
  t8706 = t2356*t8663;
  t8707 = t8704 + t8706;
  t8852 = -1.*t989*t4215;
  t8862 = -1.*t4263*t1104;
  t8863 = t8852 + t8862;
  t8889 = -1.*t1973*t2356*t8863;
  t8891 = -1.*t2239*t8863*t2006;
  t8901 = t8889 + t8891;
  t8903 = t2239*t1973*t8863;
  t8920 = -1.*t2356*t8863*t2006;
  t8932 = t8903 + t8920;
  t8809 = -0.157004*t989;
  t8814 = t8809 + t1107;
  t8827 = -0.31508*t989;
  t8835 = 0.157004*t1104;
  t8836 = t8827 + t8835;
  t9009 = -1.*t989*t8342;
  t9015 = -1.*t7651*t1104;
  t9026 = t9009 + t9015;
  t9066 = -1.*t1973*t2356*t9026;
  t9069 = -1.*t2239*t9026*t2006;
  t9071 = t9066 + t9069;
  t9076 = t2239*t1973*t9026;
  t9077 = -1.*t2356*t9026*t2006;
  t9079 = t9076 + t9077;
  t9157 = -1.*t989*t8562;
  t9160 = -1.*t486*t76*t1104;
  t9161 = t9157 + t9160;
  t9206 = -1.*t1973*t2356*t9161;
  t9219 = -1.*t2239*t9161*t2006;
  t9220 = t9206 + t9219;
  t9250 = t2239*t1973*t9161;
  t9254 = -1.*t2356*t9161*t2006;
  t9261 = t9250 + t9254;
  t9355 = -1.*t1973*t4514;
  t9358 = -1.*t4573*t2006;
  t9369 = t9355 + t9358;
  t9381 = t2356*t9369;
  t9407 = t9381 + t4972;
  t9416 = t2239*t9369;
  t9418 = -1.*t2356*t4813;
  t9422 = t9416 + t9418;
  t9042 = t989*t7651;
  t9048 = -1.*t8342*t1104;
  t9054 = t9042 + t9048;
  t9326 = -0.022225*t1973;
  t9327 = -0.38008*t2006;
  t9328 = t9326 + t9327;
  t9338 = 0.38008*t1973;
  t9347 = t9338 + t2023;
  t9483 = t486*t298*t178;
  t9493 = t8264*t395;
  t9494 = t9483 + t9493;
  t9515 = -1.*t1973*t9054;
  t9522 = -1.*t9494*t2006;
  t9532 = t9515 + t9522;
  t9557 = t1973*t9494;
  t9559 = -1.*t9054*t2006;
  t9579 = t9557 + t9559;
  t9587 = t2356*t9532;
  t9601 = t2239*t9579;
  t9602 = t9587 + t9601;
  t9609 = t2239*t9532;
  t9613 = -1.*t2356*t9579;
  t9617 = t9609 + t9613;
  t9167 = t486*t76*t989;
  t9168 = -1.*t8562*t1104;
  t9184 = t9167 + t9168;
  t9635 = -1.*t298*t205;
  t9638 = t486*t211*t395;
  t9640 = t9635 + t9638;
  t9651 = -1.*t1973*t9184;
  t9652 = -1.*t9640*t2006;
  t9653 = t9651 + t9652;
  t9657 = t1973*t9640;
  t9660 = -1.*t9184*t2006;
  t9663 = t9657 + t9660;
  t9671 = t2356*t9653;
  t9672 = t2239*t9663;
  t9677 = t9671 + t9672;
  t9683 = t2239*t9653;
  t9691 = -1.*t2356*t9663;
  t9692 = t9683 + t9691;
  t9729 = -1.*t2239*t4692;
  t9732 = t9729 + t9418;
  t5356 = t2686*t5005;
  t9718 = -0.022225*t2239;
  t9719 = -0.86008*t2356;
  t9720 = t9718 + t9719;
  t9722 = 0.86008*t2239;
  t9723 = t9722 + t2384;
  t9749 = t1973*t9054;
  t9750 = t9494*t2006;
  t9751 = t9749 + t9750;
  t9754 = -1.*t2356*t9751;
  t9755 = t9754 + t9601;
  t9757 = -1.*t2239*t9751;
  t9758 = t9757 + t9613;
  t9771 = t1973*t9184;
  t9772 = t9640*t2006;
  t9773 = t9771 + t9772;
  t9776 = -1.*t2356*t9773;
  t9777 = t9776 + t9672;
  t9780 = -1.*t2239*t9773;
  t9783 = t9780 + t9691;
  t9734 = -1.*t2852*t5005;
  t5433 = -1.*t2852*t5058;
  t5555 = t5356 + t5433;
  t9797 = 1.34008*t2686;
  t9799 = t9797 + t3318;
  t9803 = -0.021147*t2686;
  t9805 = -1.34008*t2852;
  t9806 = t9803 + t9805;
  t9760 = -1.*t2852*t9755;
  t9816 = t2239*t9751;
  t9817 = t2356*t9579;
  t9818 = t9816 + t9817;
  t9764 = t2686*t9755;
  t9786 = -1.*t2852*t9777;
  t9828 = t2239*t9773;
  t9829 = t2356*t9663;
  t9830 = t9828 + t9829;
  t9792 = t2686*t9777;

  p_output1(0)=1.;
  p_output1(1)=0;
  p_output1(2)=0;
  p_output1(3)=0;
  p_output1(4)=1.;
  p_output1(5)=0;
  p_output1(6)=0;
  p_output1(7)=0;
  p_output1(8)=1.;
  p_output1(9)=t1321*t1441 + t1891*t2033 + t2121*t2182 + t2387*t2506 + t2656*t2675 + t2869*t3090 + t3467*t3488 - 1.34008*(t2852*t3090 + t2686*t3488) - 0.021147*(t2686*t3090 - 1.*t2852*t3488) + t251*t413 - 1.*t178*t486*t628 + t1254*t861 + 0.167004*(t1104*t1321 + t861*t989);
  p_output1(10)=t4080*t413 + t1254*t4215 + t1441*t4263 + t2033*t4514 + t2182*t4573 + t2387*t4692 + t2656*t4813 + t2869*t5005 + t3467*t5058 - 1.34008*(t2852*t5005 + t2686*t5058) - 0.021147*t5555 + t39*t486*t628 + 0.167004*(t1104*t4263 + t4215*t989);
  p_output1(11)=0;
  p_output1(12)=t211*t39*t413*t486 + t1254*t5691 + t2033*t5977 + t2182*t6039 + t2387*t6182 + t2656*t6199 + t2869*t6232 - 1.*t205*t39*t628 + t3467*t6288 - 1.34008*(t2852*t6232 + t2686*t6288) - 0.021147*(t2686*t6232 - 1.*t2852*t6288) + t1441*t39*t486*t76 + 0.167004*(t1104*t39*t486*t76 + t5691*t989);
  p_output1(13)=t178*t211*t413*t486 - 1.*t178*t205*t628 + t1254*t6655 + t2033*t6710 + t2182*t6726 + t2387*t6810 + t2656*t6865 + t2869*t6887 + t3467*t6922 - 1.34008*(t2852*t6887 + t2686*t6922) - 0.021147*(t2686*t6887 - 1.*t2852*t6922) + t1441*t178*t486*t76 + 0.167004*(t1104*t178*t486*t76 + t6655*t989);
  p_output1(14)=-1.*t205*t211*t413 - 1.*t486*t628 + t1254*t7118 + t2033*t7169 + t2182*t7183 + t2387*t7237 + t2656*t7262 + t2869*t7300 + t3467*t7348 - 1.34008*(t2852*t7300 + t2686*t7348) - 0.021147*(t2686*t7300 - 1.*t2852*t7348) - 1.*t1441*t205*t76 + 0.167004*(-1.*t1104*t205*t76 + t7118*t989);
  p_output1(15)=t1254*t298*t4263 + t2182*t395*t4263 + t413*t4263 + t1441*t7442 + t2033*t7479 + t2387*t7498 + t2656*t7511 + t2869*t7560 + t3467*t7579 - 1.34008*(t2852*t7560 + t2686*t7579) - 0.021147*(t2686*t7560 - 1.*t2852*t7579) + 0.167004*(t1104*t7442 + t298*t4263*t989);
  p_output1(16)=t1441*t251 + t1254*t298*t7651 + t2182*t395*t7651 + t413*t7651 + t2033*t7700 + t2387*t7714 + t2656*t7737 + t2869*t7766 + t3467*t7787 - 1.34008*(t2852*t7766 + t2686*t7787) - 0.021147*(t2686*t7766 - 1.*t2852*t7787) + 0.167004*(t1104*t251 + t298*t7651*t989);
  p_output1(17)=-1.*t1441*t211*t486 + t1254*t298*t486*t76 + t2182*t395*t486*t76 + t413*t486*t76 + t2033*t7907 + t2387*t7920 + t2656*t7928 + t2869*t7947 + t3467*t7980 - 1.34008*(t2852*t7947 + t2686*t7980) - 0.021147*(t2686*t7947 - 1.*t2852*t7980) + 0.167004*(-1.*t1104*t211*t486 + t298*t486*t76*t989);
  p_output1(18)=t2182*t4215 + t39*t486*t8050 + t4080*t8062 + t1254*t8076 - 1.*t1104*t2033*t8076 + t2387*t8093 + t2656*t8139 + t2869*t8158 + t3467*t8192 - 1.34008*(t2852*t8158 + t2686*t8192) - 0.021147*(t2686*t8158 - 1.*t2852*t8192) + 0.167004*t8076*t989;
  p_output1(19)=t178*t486*t8050 + t8062*t8264 + t1254*t8296 - 1.*t1104*t2033*t8296 + t2182*t8342 + t2387*t8356 + t2656*t8383 + t2869*t8427 + t3467*t8449 - 1.34008*(t2852*t8427 + t2686*t8449) - 0.021147*(t2686*t8427 - 1.*t2852*t8449) + 0.167004*t8296*t989;
  p_output1(20)=-1.*t205*t8050 + t211*t486*t8062 + t1254*t8537 - 1.*t1104*t2033*t8537 + t2182*t8562 + t2387*t8583 + t2656*t8663 + t2869*t8697 + t3467*t8707 - 1.34008*(t2852*t8697 + t2686*t8707) - 0.021147*(t2686*t8697 - 1.*t2852*t8707) + 0.167004*t8537*t989;
  p_output1(21)=0.167004*t4514 + t4263*t8814 + t4215*t8836 + t2033*t8863 + t1973*t2387*t8863 - 1.*t2006*t2656*t8863 + t2869*t8901 + t3467*t8932 - 1.34008*(t2852*t8901 + t2686*t8932) - 0.021147*(t2686*t8901 - 1.*t2852*t8932);
  p_output1(22)=t7651*t8814 + t8342*t8836 + t2033*t9026 + t1973*t2387*t9026 - 1.*t2006*t2656*t9026 + 0.167004*t9054 + t2869*t9071 + t3467*t9079 - 1.34008*(t2852*t9071 + t2686*t9079) - 0.021147*(t2686*t9071 - 1.*t2852*t9079);
  p_output1(23)=t486*t76*t8814 + t8562*t8836 + t2033*t9161 + t1973*t2387*t9161 - 1.*t2006*t2656*t9161 + 0.167004*t9184 + t2869*t9220 + t3467*t9261 - 1.34008*(t2852*t9220 + t2686*t9261) - 0.021147*(t2686*t9220 - 1.*t2852*t9261);
  p_output1(24)=t2387*t4813 + t4514*t9328 + t4573*t9347 + t2656*t9369 + t3467*t9407 + t2869*t9422 - 0.021147*(-1.*t2852*t9407 + t2686*t9422) - 1.34008*(t2686*t9407 + t2852*t9422);
  p_output1(25)=t9054*t9328 + t9347*t9494 + t2656*t9532 + t2387*t9579 + t3467*t9602 + t2869*t9617 - 0.021147*(-1.*t2852*t9602 + t2686*t9617) - 1.34008*(t2686*t9602 + t2852*t9617);
  p_output1(26)=t9184*t9328 + t9347*t9640 + t2656*t9653 + t2387*t9663 + t3467*t9677 + t2869*t9692 - 0.021147*(-1.*t2852*t9677 + t2686*t9692) - 1.34008*(t2686*t9677 + t2852*t9692);
  p_output1(27)=t3467*t5005 + t4692*t9720 + t4813*t9723 + t2869*t9732 - 1.34008*(t5356 + t2852*t9732) - 0.021147*(t2686*t9732 + t9734);
  p_output1(28)=t9579*t9723 + t9720*t9751 + t3467*t9755 + t2869*t9758 - 0.021147*(t2686*t9758 + t9760) - 1.34008*(t2852*t9758 + t9764);
  p_output1(29)=t9663*t9723 + t9720*t9773 + t3467*t9777 + t2869*t9783 - 0.021147*(t2686*t9783 + t9786) - 1.34008*(t2852*t9783 + t9792);
  p_output1(30)=-1.34008*t5555 - 0.021147*(-1.*t2686*t5058 + t9734) + t5005*t9799 + t5058*t9806;
  p_output1(31)=t9755*t9799 + t9806*t9818 - 0.021147*(t9760 - 1.*t2686*t9818) - 1.34008*(t9764 - 1.*t2852*t9818);
  p_output1(32)=t9777*t9799 + t9806*t9830 - 0.021147*(t9786 - 1.*t2686*t9830) - 1.34008*(t9792 - 1.*t2852*t9830);
  p_output1(33)=0;
  p_output1(34)=0;
  p_output1(35)=0;
  p_output1(36)=0;
  p_output1(37)=0;
  p_output1(38)=0;
  p_output1(39)=0;
  p_output1(40)=0;
  p_output1(41)=0;
  p_output1(42)=0;
  p_output1(43)=0;
  p_output1(44)=0;
  p_output1(45)=0;
  p_output1(46)=0;
  p_output1(47)=0;
}


       
void Jp_lAnkle(Eigen::Matrix<double,3,16> &p_output1, const Eigen::Matrix<double,16,1> &var1)
{
  // Call Subroutines
  output1(p_output1, var1);

}
