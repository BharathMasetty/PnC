/*
 * Automatically Generated from Mathematica.
 * Thu 16 Aug 2018 23:21:41 GMT-05:00
 */
#include <stdio.h>
#include <stdlib.h>
#include <math.h>

#include "Jp_lAnkle.h"

#ifdef _MSC_VER
  #define INLINE __forceinline /* use __forceinline (VC++ specific) */
#else
  #define INLINE inline        /* use standard inline */
#endif

/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
INLINE double Power(double x, double y) { return pow(x, y); }
INLINE double Sqrt(double x) { return sqrt(x); }

INLINE double Abs(double x) { return fabs(x); }

INLINE double Exp(double x) { return exp(x); }
INLINE double Log(double x) { return log(x); }

INLINE double Sin(double x) { return sin(x); }
INLINE double Cos(double x) { return cos(x); }
INLINE double Tan(double x) { return tan(x); }

INLINE double Csc(double x) { return 1.0/sin(x); }
INLINE double Sec(double x) { return 1.0/cos(x); }

INLINE double ArcSin(double x) { return asin(x); }
INLINE double ArcCos(double x) { return acos(x); }
//INLINE double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
INLINE double ArcTan(double x, double y) { return atan2(y,x); }

INLINE double Sinh(double x) { return sinh(x); }
INLINE double Cosh(double x) { return cosh(x); }
INLINE double Tanh(double x) { return tanh(x); }

#define E 2.71828182845904523536029
#define Pi 3.14159265358979323846264
#define Degree 0.01745329251994329576924

/*
 * Sub functions
 */
static void output1(Eigen::Matrix<double,3,16> &p_output1, const Eigen::Matrix<double,16,1> &var1)
{
  double t424;
  double t912;
  double t922;
  double t934;
  double t965;
  double t119;
  double t164;
  double t327;
  double t689;
  double t707;
  double t730;
  double t824;
  double t977;
  double t1035;
  double t1036;
  double t1043;
  double t1051;
  double t1029;
  double t1030;
  double t1031;
  double t1068;
  double t1071;
  double t1072;
  double t1119;
  double t1123;
  double t1124;
  double t1126;
  double t1114;
  double t1115;
  double t1118;
  double t1135;
  double t1140;
  double t1145;
  double t1156;
  double t1341;
  double t1348;
  double t1378;
  double t1514;
  double t1515;
  double t1594;
  double t1837;
  double t2005;
  double t2290;
  double t2327;
  double t2329;
  double t2334;
  double t2355;
  double t2582;
  double t2614;
  double t2667;
  double t3022;
  double t3038;
  double t3055;
  double t955;
  double t968;
  double t972;
  double t978;
  double t980;
  double t982;
  double t3254;
  double t3266;
  double t3270;
  double t1044;
  double t1052;
  double t1055;
  double t1073;
  double t1074;
  double t1096;
  double t3476;
  double t3520;
  double t3658;
  double t3661;
  double t3681;
  double t3720;
  double t1125;
  double t1127;
  double t1128;
  double t1146;
  double t1147;
  double t1149;
  double t1370;
  double t1399;
  double t1474;
  double t4087;
  double t4095;
  double t4166;
  double t4192;
  double t4238;
  double t4270;
  double t1697;
  double t1787;
  double t1817;
  double t2338;
  double t2360;
  double t2366;
  double t4452;
  double t4499;
  double t4506;
  double t4588;
  double t4723;
  double t4739;
  double t2911;
  double t2922;
  double t3008;
  double t4761;
  double t4798;
  double t4799;
  double t4819;
  double t4836;
  double t4843;
  double t5052;
  double t5054;
  double t5130;
  double t5346;
  double t5355;
  double t5357;
  double t5389;
  double t5391;
  double t5395;
  double t5428;
  double t5431;
  double t5439;
  double t5481;
  double t5484;
  double t5546;
  double t5598;
  double t5633;
  double t5640;
  double t5673;
  double t5709;
  double t5710;
  double t6086;
  double t6093;
  double t6097;
  double t6264;
  double t6267;
  double t6268;
  double t6271;
  double t6272;
  double t6278;
  double t6295;
  double t6302;
  double t6309;
  double t6331;
  double t6368;
  double t6448;
  double t6456;
  double t6495;
  double t6503;
  double t6516;
  double t6526;
  double t6528;
  double t6636;
  double t6643;
  double t6659;
  double t6758;
  double t6762;
  double t6763;
  double t6788;
  double t6792;
  double t6796;
  double t6802;
  double t6823;
  double t6832;
  double t6842;
  double t6844;
  double t6845;
  double t6852;
  double t6860;
  double t6890;
  double t6892;
  double t6899;
  double t6906;
  double t7066;
  double t7072;
  double t7075;
  double t7142;
  double t7148;
  double t7149;
  double t7185;
  double t7190;
  double t7196;
  double t7204;
  double t7209;
  double t7211;
  double t7272;
  double t7276;
  double t7281;
  double t7293;
  double t7299;
  double t7302;
  double t7461;
  double t7473;
  double t7483;
  double t7511;
  double t7530;
  double t7533;
  double t7546;
  double t7548;
  double t7551;
  double t7562;
  double t7568;
  double t7578;
  double t7594;
  double t7600;
  double t7601;
  double t7622;
  double t7641;
  double t7646;
  double t7763;
  double t7769;
  double t7796;
  double t7816;
  double t7821;
  double t7824;
  double t7830;
  double t7837;
  double t7846;
  double t7886;
  double t7893;
  double t7917;
  double t7945;
  double t7951;
  double t7952;
  double t8083;
  double t8085;
  double t8088;
  double t8114;
  double t8115;
  double t8118;
  double t8128;
  double t8131;
  double t8148;
  double t8177;
  double t8182;
  double t8189;
  double t8213;
  double t8219;
  double t8230;
  double t8002;
  double t8004;
  double t8013;
  double t8054;
  double t8059;
  double t8342;
  double t8346;
  double t8352;
  double t8361;
  double t8368;
  double t8390;
  double t8392;
  double t8406;
  double t8414;
  double t8416;
  double t8418;
  double t8423;
  double t8445;
  double t8449;
  double t8466;
  double t8488;
  double t8498;
  double t8505;
  double t8506;
  double t8509;
  double t8604;
  double t8630;
  double t8650;
  double t8682;
  double t8694;
  double t8696;
  double t8720;
  double t8721;
  double t8722;
  double t8732;
  double t8735;
  double t8747;
  double t8781;
  double t8790;
  double t8794;
  double t8808;
  double t8830;
  double t8834;
  double t9038;
  double t9063;
  double t9064;
  double t9148;
  double t9161;
  double t9174;
  double t9179;
  double t9186;
  double t9204;
  double t8957;
  double t8967;
  double t8977;
  double t8998;
  double t9002;
  double t9374;
  double t9377;
  double t9395;
  double t9465;
  double t9474;
  double t9478;
  double t9486;
  double t9506;
  double t9533;
  double t9636;
  double t9637;
  double t9641;
  double t9688;
  double t9693;
  double t9699;
  double t9705;
  double t9707;
  double t9708;
  double t9743;
  double t9744;
  double t9745;
  double t9750;
  double t9753;
  double t9755;
  double t9757;
  double t9758;
  double t9399;
  double t9404;
  double t9419;
  double t9731;
  double t9732;
  double t9735;
  double t9737;
  double t9739;
  double t9771;
  double t9772;
  double t9773;
  double t9778;
  double t9779;
  double t9780;
  double t9785;
  double t9786;
  double t9789;
  double t9791;
  double t9792;
  double t9793;
  double t9795;
  double t9796;
  double t9797;
  double t9661;
  double t9665;
  double t9666;
  double t9819;
  double t9820;
  double t9821;
  double t9823;
  double t9824;
  double t9825;
  double t9827;
  double t9828;
  double t9829;
  double t9834;
  double t9837;
  double t9838;
  double t9843;
  double t9844;
  double t9847;
  double t9868;
  double t9869;
  double t4881;
  double t9858;
  double t9859;
  double t9860;
  double t9862;
  double t9863;
  double t9882;
  double t9883;
  double t9884;
  double t9887;
  double t9889;
  double t9892;
  double t9893;
  double t9909;
  double t9910;
  double t9911;
  double t9914;
  double t9915;
  double t9919;
  double t9922;
  double t9872;
  double t4898;
  double t4901;
  double t9938;
  double t9939;
  double t9941;
  double t9942;
  double t9943;
  double t9897;
  double t9951;
  double t9952;
  double t9954;
  double t9902;
  double t9924;
  double t9965;
  double t9967;
  double t9968;
  double t9931;
  t424 = Sin(var1[3]);
  t912 = Cos(var1[6]);
  t922 = -1.*t912;
  t934 = 1. + t922;
  t965 = Sin(var1[6]);
  t119 = Cos(var1[3]);
  t164 = Cos(var1[5]);
  t327 = -1.*t119*t164;
  t689 = Sin(var1[4]);
  t707 = Sin(var1[5]);
  t730 = -1.*t424*t689*t707;
  t824 = t327 + t730;
  t977 = Cos(var1[4]);
  t1035 = Cos(var1[7]);
  t1036 = -1.*t1035;
  t1043 = 1. + t1036;
  t1051 = Sin(var1[7]);
  t1029 = t912*t824;
  t1030 = t977*t424*t965;
  t1031 = t1029 + t1030;
  t1068 = -1.*t164*t424*t689;
  t1071 = t119*t707;
  t1072 = t1068 + t1071;
  t1119 = Cos(var1[8]);
  t1123 = -1.*t1119;
  t1124 = 1. + t1123;
  t1126 = Sin(var1[8]);
  t1114 = t1035*t1072;
  t1115 = -1.*t1031*t1051;
  t1118 = t1114 + t1115;
  t1135 = -1.*t977*t912*t424;
  t1140 = t824*t965;
  t1145 = t1135 + t1140;
  t1156 = Cos(var1[9]);
  t1341 = -1.*t1156;
  t1348 = 1. + t1341;
  t1378 = Sin(var1[9]);
  t1514 = t1119*t1118;
  t1515 = t1145*t1126;
  t1594 = t1514 + t1515;
  t1837 = t1119*t1145;
  t2005 = -1.*t1118*t1126;
  t2290 = t1837 + t2005;
  t2327 = Cos(var1[10]);
  t2329 = -1.*t2327;
  t2334 = 1. + t2329;
  t2355 = Sin(var1[10]);
  t2582 = -1.*t1378*t1594;
  t2614 = t1156*t2290;
  t2667 = t2582 + t2614;
  t3022 = t1156*t1594;
  t3038 = t1378*t2290;
  t3055 = t3022 + t3038;
  t955 = 0.087004*t934;
  t968 = 0.022225*t965;
  t972 = 0. + t955 + t968;
  t978 = -0.022225*t934;
  t980 = 0.087004*t965;
  t982 = 0. + t978 + t980;
  t3254 = -1.*t164*t424;
  t3266 = t119*t689*t707;
  t3270 = t3254 + t3266;
  t1044 = 0.157004*t1043;
  t1052 = -0.31508*t1051;
  t1055 = 0. + t1044 + t1052;
  t1073 = -0.31508*t1043;
  t1074 = -0.157004*t1051;
  t1096 = 0. + t1073 + t1074;
  t3476 = t912*t3270;
  t3520 = -1.*t119*t977*t965;
  t3658 = t3476 + t3520;
  t3661 = t119*t164*t689;
  t3681 = t424*t707;
  t3720 = t3661 + t3681;
  t1125 = -0.38008*t1124;
  t1127 = -0.022225*t1126;
  t1128 = 0. + t1125 + t1127;
  t1146 = -0.022225*t1124;
  t1147 = 0.38008*t1126;
  t1149 = 0. + t1146 + t1147;
  t1370 = -0.86008*t1348;
  t1399 = -0.022225*t1378;
  t1474 = 0. + t1370 + t1399;
  t4087 = t1035*t3720;
  t4095 = -1.*t3658*t1051;
  t4166 = t4087 + t4095;
  t4192 = t119*t977*t912;
  t4238 = t3270*t965;
  t4270 = t4192 + t4238;
  t1697 = -0.022225*t1348;
  t1787 = 0.86008*t1378;
  t1817 = 0. + t1697 + t1787;
  t2338 = -0.021147*t2334;
  t2360 = 1.34008*t2355;
  t2366 = 0. + t2338 + t2360;
  t4452 = t1119*t4166;
  t4499 = t4270*t1126;
  t4506 = t4452 + t4499;
  t4588 = t1119*t4270;
  t4723 = -1.*t4166*t1126;
  t4739 = t4588 + t4723;
  t2911 = -1.34008*t2334;
  t2922 = -0.021147*t2355;
  t3008 = 0. + t2911 + t2922;
  t4761 = -1.*t1378*t4506;
  t4798 = t1156*t4739;
  t4799 = t4761 + t4798;
  t4819 = t1156*t4506;
  t4836 = t1378*t4739;
  t4843 = t4819 + t4836;
  t5052 = t119*t977*t912*t707;
  t5054 = t119*t689*t965;
  t5130 = t5052 + t5054;
  t5346 = t119*t977*t164*t1035;
  t5355 = -1.*t5130*t1051;
  t5357 = t5346 + t5355;
  t5389 = -1.*t119*t912*t689;
  t5391 = t119*t977*t707*t965;
  t5395 = t5389 + t5391;
  t5428 = t1119*t5357;
  t5431 = t5395*t1126;
  t5439 = t5428 + t5431;
  t5481 = t1119*t5395;
  t5484 = -1.*t5357*t1126;
  t5546 = t5481 + t5484;
  t5598 = -1.*t1378*t5439;
  t5633 = t1156*t5546;
  t5640 = t5598 + t5633;
  t5673 = t1156*t5439;
  t5709 = t1378*t5546;
  t5710 = t5673 + t5709;
  t6086 = t977*t912*t424*t707;
  t6093 = t424*t689*t965;
  t6097 = t6086 + t6093;
  t6264 = t977*t164*t1035*t424;
  t6267 = -1.*t6097*t1051;
  t6268 = t6264 + t6267;
  t6271 = -1.*t912*t424*t689;
  t6272 = t977*t424*t707*t965;
  t6278 = t6271 + t6272;
  t6295 = t1119*t6268;
  t6302 = t6278*t1126;
  t6309 = t6295 + t6302;
  t6331 = t1119*t6278;
  t6368 = -1.*t6268*t1126;
  t6448 = t6331 + t6368;
  t6456 = -1.*t1378*t6309;
  t6495 = t1156*t6448;
  t6503 = t6456 + t6495;
  t6516 = t1156*t6309;
  t6526 = t1378*t6448;
  t6528 = t6516 + t6526;
  t6636 = -1.*t912*t689*t707;
  t6643 = t977*t965;
  t6659 = t6636 + t6643;
  t6758 = -1.*t164*t1035*t689;
  t6762 = -1.*t6659*t1051;
  t6763 = t6758 + t6762;
  t6788 = -1.*t977*t912;
  t6792 = -1.*t689*t707*t965;
  t6796 = t6788 + t6792;
  t6802 = t1119*t6763;
  t6823 = t6796*t1126;
  t6832 = t6802 + t6823;
  t6842 = t1119*t6796;
  t6844 = -1.*t6763*t1126;
  t6845 = t6842 + t6844;
  t6852 = -1.*t1378*t6832;
  t6860 = t1156*t6845;
  t6890 = t6852 + t6860;
  t6892 = t1156*t6832;
  t6899 = t1378*t6845;
  t6906 = t6892 + t6899;
  t7066 = t164*t424;
  t7072 = -1.*t119*t689*t707;
  t7075 = t7066 + t7072;
  t7142 = t1035*t7075;
  t7148 = -1.*t912*t3720*t1051;
  t7149 = t7142 + t7148;
  t7185 = t1119*t7149;
  t7190 = t3720*t965*t1126;
  t7196 = t7185 + t7190;
  t7204 = t1119*t3720*t965;
  t7209 = -1.*t7149*t1126;
  t7211 = t7204 + t7209;
  t7272 = -1.*t1378*t7196;
  t7276 = t1156*t7211;
  t7281 = t7272 + t7276;
  t7293 = t1156*t7196;
  t7299 = t1378*t7211;
  t7302 = t7293 + t7299;
  t7461 = t164*t424*t689;
  t7473 = -1.*t119*t707;
  t7483 = t7461 + t7473;
  t7511 = t1035*t824;
  t7530 = -1.*t912*t7483*t1051;
  t7533 = t7511 + t7530;
  t7546 = t1119*t7533;
  t7548 = t7483*t965*t1126;
  t7551 = t7546 + t7548;
  t7562 = t1119*t7483*t965;
  t7568 = -1.*t7533*t1126;
  t7578 = t7562 + t7568;
  t7594 = -1.*t1378*t7551;
  t7600 = t1156*t7578;
  t7601 = t7594 + t7600;
  t7622 = t1156*t7551;
  t7641 = t1378*t7578;
  t7646 = t7622 + t7641;
  t7763 = -1.*t977*t1035*t707;
  t7769 = -1.*t977*t164*t912*t1051;
  t7796 = t7763 + t7769;
  t7816 = t1119*t7796;
  t7821 = t977*t164*t965*t1126;
  t7824 = t7816 + t7821;
  t7830 = t977*t164*t1119*t965;
  t7837 = -1.*t7796*t1126;
  t7846 = t7830 + t7837;
  t7886 = -1.*t1378*t7824;
  t7893 = t1156*t7846;
  t7917 = t7886 + t7893;
  t7945 = t1156*t7824;
  t7951 = t1378*t7846;
  t7952 = t7945 + t7951;
  t8083 = -1.*t119*t977*t912;
  t8085 = -1.*t3270*t965;
  t8088 = t8083 + t8085;
  t8114 = -1.*t1119*t8088*t1051;
  t8115 = t3658*t1126;
  t8118 = t8114 + t8115;
  t8128 = t1119*t3658;
  t8131 = t8088*t1051*t1126;
  t8148 = t8128 + t8131;
  t8177 = -1.*t1378*t8118;
  t8182 = t1156*t8148;
  t8189 = t8177 + t8182;
  t8213 = t1156*t8118;
  t8219 = t1378*t8148;
  t8230 = t8213 + t8219;
  t8002 = 0.087004*t912;
  t8004 = -0.022225*t965;
  t8013 = t8002 + t8004;
  t8054 = 0.022225*t912;
  t8059 = t8054 + t980;
  t8342 = t119*t164;
  t8346 = t424*t689*t707;
  t8352 = t8342 + t8346;
  t8361 = -1.*t8352*t965;
  t8368 = t1135 + t8361;
  t8390 = t912*t8352;
  t8392 = -1.*t977*t424*t965;
  t8406 = t8390 + t8392;
  t8414 = -1.*t1119*t8368*t1051;
  t8416 = t8406*t1126;
  t8418 = t8414 + t8416;
  t8423 = t1119*t8406;
  t8445 = t8368*t1051*t1126;
  t8449 = t8423 + t8445;
  t8466 = -1.*t1378*t8418;
  t8488 = t1156*t8449;
  t8498 = t8466 + t8488;
  t8505 = t1156*t8418;
  t8506 = t1378*t8449;
  t8509 = t8505 + t8506;
  t8604 = t912*t689;
  t8630 = -1.*t977*t707*t965;
  t8650 = t8604 + t8630;
  t8682 = t977*t912*t707;
  t8694 = t689*t965;
  t8696 = t8682 + t8694;
  t8720 = -1.*t1119*t8650*t1051;
  t8721 = t8696*t1126;
  t8722 = t8720 + t8721;
  t8732 = t1119*t8696;
  t8735 = t8650*t1051*t1126;
  t8747 = t8732 + t8735;
  t8781 = -1.*t1378*t8722;
  t8790 = t1156*t8747;
  t8794 = t8781 + t8790;
  t8808 = t1156*t8722;
  t8830 = t1378*t8747;
  t8834 = t8808 + t8830;
  t9038 = -1.*t1035*t3658;
  t9063 = -1.*t3720*t1051;
  t9064 = t9038 + t9063;
  t9148 = -1.*t1119*t1378*t9064;
  t9161 = -1.*t1156*t9064*t1126;
  t9174 = t9148 + t9161;
  t9179 = t1156*t1119*t9064;
  t9186 = -1.*t1378*t9064*t1126;
  t9204 = t9179 + t9186;
  t8957 = -0.157004*t1035;
  t8967 = t8957 + t1052;
  t8977 = -0.31508*t1035;
  t8998 = 0.157004*t1051;
  t9002 = t8977 + t8998;
  t9374 = -1.*t1035*t8406;
  t9377 = -1.*t7483*t1051;
  t9395 = t9374 + t9377;
  t9465 = -1.*t1119*t1378*t9395;
  t9474 = -1.*t1156*t9395*t1126;
  t9478 = t9465 + t9474;
  t9486 = t1156*t1119*t9395;
  t9506 = -1.*t1378*t9395*t1126;
  t9533 = t9486 + t9506;
  t9636 = -1.*t1035*t8696;
  t9637 = -1.*t977*t164*t1051;
  t9641 = t9636 + t9637;
  t9688 = -1.*t1119*t1378*t9641;
  t9693 = -1.*t1156*t9641*t1126;
  t9699 = t9688 + t9693;
  t9705 = t1156*t1119*t9641;
  t9707 = -1.*t1378*t9641*t1126;
  t9708 = t9705 + t9707;
  t9743 = -1.*t1119*t4166;
  t9744 = -1.*t4270*t1126;
  t9745 = t9743 + t9744;
  t9750 = t1378*t9745;
  t9753 = t9750 + t4798;
  t9755 = t1156*t9745;
  t9757 = -1.*t1378*t4739;
  t9758 = t9755 + t9757;
  t9399 = t1035*t7483;
  t9404 = -1.*t8406*t1051;
  t9419 = t9399 + t9404;
  t9731 = -0.022225*t1119;
  t9732 = -0.38008*t1126;
  t9735 = t9731 + t9732;
  t9737 = 0.38008*t1119;
  t9739 = t9737 + t1127;
  t9771 = t977*t912*t424;
  t9772 = t8352*t965;
  t9773 = t9771 + t9772;
  t9778 = -1.*t1119*t9419;
  t9779 = -1.*t9773*t1126;
  t9780 = t9778 + t9779;
  t9785 = t1119*t9773;
  t9786 = -1.*t9419*t1126;
  t9789 = t9785 + t9786;
  t9791 = t1378*t9780;
  t9792 = t1156*t9789;
  t9793 = t9791 + t9792;
  t9795 = t1156*t9780;
  t9796 = -1.*t1378*t9789;
  t9797 = t9795 + t9796;
  t9661 = t977*t164*t1035;
  t9665 = -1.*t8696*t1051;
  t9666 = t9661 + t9665;
  t9819 = -1.*t912*t689;
  t9820 = t977*t707*t965;
  t9821 = t9819 + t9820;
  t9823 = -1.*t1119*t9666;
  t9824 = -1.*t9821*t1126;
  t9825 = t9823 + t9824;
  t9827 = t1119*t9821;
  t9828 = -1.*t9666*t1126;
  t9829 = t9827 + t9828;
  t9834 = t1378*t9825;
  t9837 = t1156*t9829;
  t9838 = t9834 + t9837;
  t9843 = t1156*t9825;
  t9844 = -1.*t1378*t9829;
  t9847 = t9843 + t9844;
  t9868 = -1.*t1156*t4506;
  t9869 = t9868 + t9757;
  t4881 = t2327*t4799;
  t9858 = -0.022225*t1156;
  t9859 = -0.86008*t1378;
  t9860 = t9858 + t9859;
  t9862 = 0.86008*t1156;
  t9863 = t9862 + t1399;
  t9882 = t1119*t9419;
  t9883 = t9773*t1126;
  t9884 = t9882 + t9883;
  t9887 = -1.*t1378*t9884;
  t9889 = t9887 + t9792;
  t9892 = -1.*t1156*t9884;
  t9893 = t9892 + t9796;
  t9909 = t1119*t9666;
  t9910 = t9821*t1126;
  t9911 = t9909 + t9910;
  t9914 = -1.*t1378*t9911;
  t9915 = t9914 + t9837;
  t9919 = -1.*t1156*t9911;
  t9922 = t9919 + t9844;
  t9872 = -1.*t2355*t4799;
  t4898 = -1.*t2355*t4843;
  t4901 = t4881 + t4898;
  t9938 = 1.34008*t2327;
  t9939 = t9938 + t2922;
  t9941 = -0.021147*t2327;
  t9942 = -1.34008*t2355;
  t9943 = t9941 + t9942;
  t9897 = -1.*t2355*t9889;
  t9951 = t1156*t9884;
  t9952 = t1378*t9789;
  t9954 = t9951 + t9952;
  t9902 = t2327*t9889;
  t9924 = -1.*t2355*t9915;
  t9965 = t1156*t9911;
  t9967 = t1378*t9829;
  t9968 = t9965 + t9967;
  t9931 = t2327*t9915;

  p_output1(0)=1.;
  p_output1(1)=0;
  p_output1(2)=0;
  p_output1(3)=0;
  p_output1(4)=1.;
  p_output1(5)=0;
  p_output1(6)=0;
  p_output1(7)=0;
  p_output1(8)=1.;
  p_output1(9)=t1031*t1055 + 0.167004*(t1031*t1035 + t1051*t1072) + t1072*t1096 + t1118*t1128 + t1145*t1149 + t1474*t1594 + t1817*t2290 + t2366*t2667 + t3008*t3055 - 1.34008*(t2355*t2667 + t2327*t3055) - 0.021147*(t2327*t2667 - 1.*t2355*t3055) + t824*t972 - 1.*t424*t977*t982;
  p_output1(10)=t1055*t3658 + t1096*t3720 + 0.167004*(t1035*t3658 + t1051*t3720) + t1128*t4166 + t1149*t4270 + t1474*t4506 + t1817*t4739 + t2366*t4799 + t3008*t4843 - 1.34008*(t2355*t4799 + t2327*t4843) - 0.021147*t4901 + t3270*t972 + t119*t977*t982;
  p_output1(11)=0;
  p_output1(12)=t1055*t5130 + t1128*t5357 + t1149*t5395 + t1474*t5439 + t1817*t5546 + t2366*t5640 + t3008*t5710 - 1.34008*(t2355*t5640 + t2327*t5710) - 0.021147*(t2327*t5640 - 1.*t2355*t5710) + t1096*t119*t164*t977 + t119*t707*t972*t977 + 0.167004*(t1035*t5130 + t1051*t119*t164*t977) - 1.*t119*t689*t982;
  p_output1(13)=t1055*t6097 + t1128*t6268 + t1149*t6278 + t1474*t6309 + t1817*t6448 + t2366*t6503 + t3008*t6528 - 1.34008*(t2355*t6503 + t2327*t6528) - 0.021147*(t2327*t6503 - 1.*t2355*t6528) + t1096*t164*t424*t977 + t424*t707*t972*t977 + 0.167004*(t1035*t6097 + t1051*t164*t424*t977) - 1.*t424*t689*t982;
  p_output1(14)=t1055*t6659 + t1128*t6763 + t1149*t6796 + t1474*t6832 + t1817*t6845 - 1.*t1096*t164*t689 + 0.167004*(t1035*t6659 - 1.*t1051*t164*t689) + t2366*t6890 + t3008*t6906 - 1.34008*(t2355*t6890 + t2327*t6906) - 0.021147*(t2327*t6890 - 1.*t2355*t6906) - 1.*t689*t707*t972 - 1.*t977*t982;
  p_output1(15)=t1096*t7075 + t1128*t7149 + t1474*t7196 + t1817*t7211 + t2366*t7281 + t3008*t7302 - 1.34008*(t2355*t7281 + t2327*t7302) - 0.021147*(t2327*t7281 - 1.*t2355*t7302) + t1055*t3720*t912 + 0.167004*(t1051*t7075 + t1035*t3720*t912) + t1149*t3720*t965 + t3720*t972;
  p_output1(16)=t1128*t7533 + t1474*t7551 + t1817*t7578 + t2366*t7601 + t3008*t7646 - 1.34008*(t2355*t7601 + t2327*t7646) - 0.021147*(t2327*t7601 - 1.*t2355*t7646) + t1096*t824 + t1055*t7483*t912 + 0.167004*(t1051*t824 + t1035*t7483*t912) + t1149*t7483*t965 + t7483*t972;
  p_output1(17)=t1128*t7796 + t1474*t7824 + t1817*t7846 + t2366*t7917 + t3008*t7952 - 1.34008*(t2355*t7917 + t2327*t7952) - 0.021147*(t2327*t7917 - 1.*t2355*t7952) - 1.*t1096*t707*t977 + t1055*t164*t912*t977 + t1149*t164*t965*t977 + t164*t972*t977 + 0.167004*(-1.*t1051*t707*t977 + t1035*t164*t912*t977);
  p_output1(18)=t1149*t3658 + t3270*t8059 + 0.167004*t1035*t8088 + t1055*t8088 - 1.*t1051*t1128*t8088 + t1474*t8118 + t1817*t8148 + t2366*t8189 + t3008*t8230 - 1.34008*(t2355*t8189 + t2327*t8230) - 0.021147*(t2327*t8189 - 1.*t2355*t8230) + t119*t8013*t977;
  p_output1(19)=t8059*t8352 + 0.167004*t1035*t8368 + t1055*t8368 - 1.*t1051*t1128*t8368 + t1149*t8406 + t1474*t8418 + t1817*t8449 + t2366*t8498 + t3008*t8509 - 1.34008*(t2355*t8498 + t2327*t8509) - 0.021147*(t2327*t8498 - 1.*t2355*t8509) + t424*t8013*t977;
  p_output1(20)=-1.*t689*t8013 + 0.167004*t1035*t8650 + t1055*t8650 - 1.*t1051*t1128*t8650 + t1149*t8696 + t1474*t8722 + t1817*t8747 + t2366*t8794 + t3008*t8834 - 1.34008*(t2355*t8794 + t2327*t8834) - 0.021147*(t2327*t8794 - 1.*t2355*t8834) + t707*t8059*t977;
  p_output1(21)=0.167004*t4166 + t3720*t8967 + t3658*t9002 + t1128*t9064 + t1119*t1474*t9064 - 1.*t1126*t1817*t9064 + t2366*t9174 + t3008*t9204 - 1.34008*(t2355*t9174 + t2327*t9204) - 0.021147*(t2327*t9174 - 1.*t2355*t9204);
  p_output1(22)=t7483*t8967 + t8406*t9002 + t1128*t9395 + t1119*t1474*t9395 - 1.*t1126*t1817*t9395 + 0.167004*t9419 + t2366*t9478 + t3008*t9533 - 1.34008*(t2355*t9478 + t2327*t9533) - 0.021147*(t2327*t9478 - 1.*t2355*t9533);
  p_output1(23)=t8696*t9002 + t1128*t9641 + t1119*t1474*t9641 - 1.*t1126*t1817*t9641 + 0.167004*t9666 + t2366*t9699 + t3008*t9708 - 1.34008*(t2355*t9699 + t2327*t9708) - 0.021147*(t2327*t9699 - 1.*t2355*t9708) + t164*t8967*t977;
  p_output1(24)=t1474*t4739 + t4166*t9735 + t4270*t9739 + t1817*t9745 + t3008*t9753 + t2366*t9758 - 0.021147*(-1.*t2355*t9753 + t2327*t9758) - 1.34008*(t2327*t9753 + t2355*t9758);
  p_output1(25)=t9419*t9735 + t9739*t9773 + t1817*t9780 + t1474*t9789 + t3008*t9793 + t2366*t9797 - 0.021147*(-1.*t2355*t9793 + t2327*t9797) - 1.34008*(t2327*t9793 + t2355*t9797);
  p_output1(26)=t9666*t9735 + t9739*t9821 + t1817*t9825 + t1474*t9829 + t3008*t9838 + t2366*t9847 - 0.021147*(-1.*t2355*t9838 + t2327*t9847) - 1.34008*(t2327*t9838 + t2355*t9847);
  p_output1(27)=t3008*t4799 + t4506*t9860 + t4739*t9863 + t2366*t9869 - 1.34008*(t4881 + t2355*t9869) - 0.021147*(t2327*t9869 + t9872);
  p_output1(28)=t9789*t9863 + t9860*t9884 + t3008*t9889 + t2366*t9893 - 0.021147*(t2327*t9893 + t9897) - 1.34008*(t2355*t9893 + t9902);
  p_output1(29)=t9829*t9863 + t9860*t9911 + t3008*t9915 + t2366*t9922 - 0.021147*(t2327*t9922 + t9924) - 1.34008*(t2355*t9922 + t9931);
  p_output1(30)=-1.34008*t4901 - 0.021147*(-1.*t2327*t4843 + t9872) + t4799*t9939 + t4843*t9943;
  p_output1(31)=t9889*t9939 + t9943*t9954 - 0.021147*(t9897 - 1.*t2327*t9954) - 1.34008*(t9902 - 1.*t2355*t9954);
  p_output1(32)=t9915*t9939 + t9943*t9968 - 0.021147*(t9924 - 1.*t2327*t9968) - 1.34008*(t9931 - 1.*t2355*t9968);
  p_output1(33)=0;
  p_output1(34)=0;
  p_output1(35)=0;
  p_output1(36)=0;
  p_output1(37)=0;
  p_output1(38)=0;
  p_output1(39)=0;
  p_output1(40)=0;
  p_output1(41)=0;
  p_output1(42)=0;
  p_output1(43)=0;
  p_output1(44)=0;
  p_output1(45)=0;
  p_output1(46)=0;
  p_output1(47)=0;
}


       
void Jp_lAnkle(Eigen::Matrix<double,3,16> &p_output1, const Eigen::Matrix<double,16,1> &var1)
{
  // Call Subroutines
  output1(p_output1, var1);

}
