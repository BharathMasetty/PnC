/*
 * Automatically Generated from Mathematica.
 * Thu 16 Aug 2018 23:21:58 GMT-05:00
 */
#include <stdio.h>
#include <stdlib.h>
#include <math.h>

#include "Jp_LeftFootBack.h"

#ifdef _MSC_VER
  #define INLINE __forceinline /* use __forceinline (VC++ specific) */
#else
  #define INLINE inline        /* use standard inline */
#endif

/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
INLINE double Power(double x, double y) { return pow(x, y); }
INLINE double Sqrt(double x) { return sqrt(x); }

INLINE double Abs(double x) { return fabs(x); }

INLINE double Exp(double x) { return exp(x); }
INLINE double Log(double x) { return log(x); }

INLINE double Sin(double x) { return sin(x); }
INLINE double Cos(double x) { return cos(x); }
INLINE double Tan(double x) { return tan(x); }

INLINE double Csc(double x) { return 1.0/sin(x); }
INLINE double Sec(double x) { return 1.0/cos(x); }

INLINE double ArcSin(double x) { return asin(x); }
INLINE double ArcCos(double x) { return acos(x); }
//INLINE double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
INLINE double ArcTan(double x, double y) { return atan2(y,x); }

INLINE double Sinh(double x) { return sinh(x); }
INLINE double Cosh(double x) { return cosh(x); }
INLINE double Tanh(double x) { return tanh(x); }

#define E 2.71828182845904523536029
#define Pi 3.14159265358979323846264
#define Degree 0.01745329251994329576924

/*
 * Sub functions
 */
static void output1(Eigen::Matrix<double,3,16> &p_output1, const Eigen::Matrix<double,16,1> &var1)
{
  double t309;
  double t404;
  double t513;
  double t576;
  double t599;
  double t183;
  double t301;
  double t302;
  double t315;
  double t325;
  double t341;
  double t342;
  double t603;
  double t645;
  double t646;
  double t647;
  double t650;
  double t633;
  double t634;
  double t644;
  double t658;
  double t659;
  double t661;
  double t959;
  double t1017;
  double t1022;
  double t1092;
  double t901;
  double t904;
  double t958;
  double t1286;
  double t1289;
  double t1296;
  double t1714;
  double t1751;
  double t1762;
  double t1970;
  double t2140;
  double t2155;
  double t2165;
  double t2310;
  double t2319;
  double t2420;
  double t2465;
  double t2494;
  double t2521;
  double t2528;
  double t2671;
  double t2686;
  double t2705;
  double t2859;
  double t2908;
  double t3015;
  double t582;
  double t600;
  double t601;
  double t610;
  double t615;
  double t616;
  double t3284;
  double t3392;
  double t3429;
  double t649;
  double t651;
  double t652;
  double t662;
  double t663;
  double t666;
  double t3479;
  double t3511;
  double t3550;
  double t3573;
  double t3591;
  double t3637;
  double t1047;
  double t1143;
  double t1261;
  double t1322;
  double t1415;
  double t1504;
  double t1857;
  double t2132;
  double t2136;
  double t3711;
  double t3730;
  double t3744;
  double t3794;
  double t3852;
  double t3865;
  double t2245;
  double t2287;
  double t2288;
  double t2526;
  double t2540;
  double t2638;
  double t3871;
  double t3878;
  double t3923;
  double t3961;
  double t4011;
  double t4029;
  double t2751;
  double t2755;
  double t2843;
  double t4067;
  double t4075;
  double t4137;
  double t4158;
  double t4186;
  double t4188;
  double t4666;
  double t4726;
  double t4765;
  double t4878;
  double t4879;
  double t4902;
  double t4966;
  double t5002;
  double t5015;
  double t5119;
  double t5120;
  double t5149;
  double t5188;
  double t5189;
  double t5195;
  double t5202;
  double t5253;
  double t5326;
  double t5356;
  double t5361;
  double t5370;
  double t5480;
  double t5500;
  double t5504;
  double t5577;
  double t5600;
  double t5605;
  double t5648;
  double t5655;
  double t5663;
  double t5707;
  double t5724;
  double t5743;
  double t5760;
  double t5772;
  double t5788;
  double t5802;
  double t5820;
  double t5821;
  double t5828;
  double t5835;
  double t5906;
  double t6080;
  double t6085;
  double t6103;
  double t6263;
  double t6269;
  double t6293;
  double t6367;
  double t6381;
  double t6382;
  double t6403;
  double t6417;
  double t6425;
  double t6463;
  double t6468;
  double t6478;
  double t6494;
  double t6507;
  double t6515;
  double t6544;
  double t6545;
  double t6564;
  double t6649;
  double t6653;
  double t6663;
  double t6724;
  double t6728;
  double t6749;
  double t6760;
  double t6776;
  double t6778;
  double t6801;
  double t6819;
  double t6825;
  double t6830;
  double t6831;
  double t6851;
  double t6858;
  double t6867;
  double t6871;
  double t6954;
  double t6956;
  double t6960;
  double t7019;
  double t7029;
  double t7052;
  double t7091;
  double t7097;
  double t7105;
  double t7135;
  double t7151;
  double t7159;
  double t7173;
  double t7177;
  double t7186;
  double t7221;
  double t7229;
  double t7240;
  double t7332;
  double t7350;
  double t7353;
  double t7399;
  double t7405;
  double t7406;
  double t7419;
  double t7431;
  double t7457;
  double t7475;
  double t7491;
  double t7495;
  double t7503;
  double t7512;
  double t7513;
  double t7609;
  double t7612;
  double t7626;
  double t7695;
  double t7705;
  double t7706;
  double t7722;
  double t7731;
  double t7738;
  double t7767;
  double t7768;
  double t7770;
  double t7778;
  double t7780;
  double t7787;
  double t7574;
  double t7577;
  double t7585;
  double t7591;
  double t7607;
  double t7868;
  double t7869;
  double t7875;
  double t7879;
  double t7893;
  double t7920;
  double t7921;
  double t7923;
  double t7955;
  double t7962;
  double t7978;
  double t8002;
  double t8004;
  double t8010;
  double t8017;
  double t8021;
  double t8026;
  double t8061;
  double t8064;
  double t8078;
  double t8136;
  double t8139;
  double t8142;
  double t8161;
  double t8166;
  double t8167;
  double t8194;
  double t8196;
  double t8199;
  double t8205;
  double t8210;
  double t8215;
  double t8229;
  double t8234;
  double t8236;
  double t8251;
  double t8256;
  double t8271;
  double t8370;
  double t8373;
  double t8381;
  double t8422;
  double t8424;
  double t8451;
  double t8464;
  double t8468;
  double t8478;
  double t8336;
  double t8338;
  double t8354;
  double t8356;
  double t8357;
  double t8524;
  double t8526;
  double t8527;
  double t8564;
  double t8565;
  double t8568;
  double t8585;
  double t8590;
  double t8605;
  double t8676;
  double t8677;
  double t8678;
  double t8717;
  double t8721;
  double t8723;
  double t8744;
  double t8745;
  double t8750;
  double t8824;
  double t8826;
  double t8827;
  double t8870;
  double t8873;
  double t8882;
  double t8885;
  double t8888;
  double t8530;
  double t8534;
  double t8538;
  double t8805;
  double t8809;
  double t8813;
  double t8819;
  double t8820;
  double t8985;
  double t9004;
  double t9014;
  double t9042;
  double t9046;
  double t9051;
  double t9058;
  double t9059;
  double t9061;
  double t9074;
  double t9078;
  double t9082;
  double t9096;
  double t9103;
  double t9106;
  double t8680;
  double t8684;
  double t8691;
  double t9226;
  double t9228;
  double t9229;
  double t9238;
  double t9241;
  double t9245;
  double t9250;
  double t9252;
  double t9256;
  double t9266;
  double t9273;
  double t9277;
  double t9284;
  double t9288;
  double t9290;
  double t9379;
  double t9382;
  double t4375;
  double t9343;
  double t9344;
  double t9346;
  double t9352;
  double t9361;
  double t9453;
  double t9454;
  double t9457;
  double t9471;
  double t9475;
  double t9489;
  double t9494;
  double t9598;
  double t9599;
  double t9600;
  double t9656;
  double t9662;
  double t9686;
  double t9693;
  double t9396;
  double t4383;
  double t4424;
  double t9794;
  double t9800;
  double t9822;
  double t9828;
  double t9837;
  double t9530;
  double t9886;
  double t9893;
  double t9905;
  double t9564;
  double t9720;
  double t9980;
  double t9981;
  double t9987;
  double t9759;
  t309 = Sin(var1[3]);
  t404 = Cos(var1[6]);
  t513 = -1.*t404;
  t576 = 1. + t513;
  t599 = Sin(var1[6]);
  t183 = Cos(var1[3]);
  t301 = Cos(var1[5]);
  t302 = -1.*t183*t301;
  t315 = Sin(var1[4]);
  t325 = Sin(var1[5]);
  t341 = -1.*t309*t315*t325;
  t342 = t302 + t341;
  t603 = Cos(var1[4]);
  t645 = Cos(var1[7]);
  t646 = -1.*t645;
  t647 = 1. + t646;
  t650 = Sin(var1[7]);
  t633 = t404*t342;
  t634 = t603*t309*t599;
  t644 = t633 + t634;
  t658 = -1.*t301*t309*t315;
  t659 = t183*t325;
  t661 = t658 + t659;
  t959 = Cos(var1[8]);
  t1017 = -1.*t959;
  t1022 = 1. + t1017;
  t1092 = Sin(var1[8]);
  t901 = t645*t661;
  t904 = -1.*t644*t650;
  t958 = t901 + t904;
  t1286 = -1.*t603*t404*t309;
  t1289 = t342*t599;
  t1296 = t1286 + t1289;
  t1714 = Cos(var1[9]);
  t1751 = -1.*t1714;
  t1762 = 1. + t1751;
  t1970 = Sin(var1[9]);
  t2140 = t959*t958;
  t2155 = t1296*t1092;
  t2165 = t2140 + t2155;
  t2310 = t959*t1296;
  t2319 = -1.*t958*t1092;
  t2420 = t2310 + t2319;
  t2465 = Cos(var1[10]);
  t2494 = -1.*t2465;
  t2521 = 1. + t2494;
  t2528 = Sin(var1[10]);
  t2671 = -1.*t1970*t2165;
  t2686 = t1714*t2420;
  t2705 = t2671 + t2686;
  t2859 = t1714*t2165;
  t2908 = t1970*t2420;
  t3015 = t2859 + t2908;
  t582 = 0.087004*t576;
  t600 = 0.022225*t599;
  t601 = 0. + t582 + t600;
  t610 = -0.022225*t576;
  t615 = 0.087004*t599;
  t616 = 0. + t610 + t615;
  t3284 = -1.*t301*t309;
  t3392 = t183*t315*t325;
  t3429 = t3284 + t3392;
  t649 = 0.157004*t647;
  t651 = -0.31508*t650;
  t652 = 0. + t649 + t651;
  t662 = -0.31508*t647;
  t663 = -0.157004*t650;
  t666 = 0. + t662 + t663;
  t3479 = t404*t3429;
  t3511 = -1.*t183*t603*t599;
  t3550 = t3479 + t3511;
  t3573 = t183*t301*t315;
  t3591 = t309*t325;
  t3637 = t3573 + t3591;
  t1047 = -0.38008*t1022;
  t1143 = -0.022225*t1092;
  t1261 = 0. + t1047 + t1143;
  t1322 = -0.022225*t1022;
  t1415 = 0.38008*t1092;
  t1504 = 0. + t1322 + t1415;
  t1857 = -0.86008*t1762;
  t2132 = -0.022225*t1970;
  t2136 = 0. + t1857 + t2132;
  t3711 = t645*t3637;
  t3730 = -1.*t3550*t650;
  t3744 = t3711 + t3730;
  t3794 = t183*t603*t404;
  t3852 = t3429*t599;
  t3865 = t3794 + t3852;
  t2245 = -0.022225*t1762;
  t2287 = 0.86008*t1970;
  t2288 = 0. + t2245 + t2287;
  t2526 = -0.021147*t2521;
  t2540 = 1.34008*t2528;
  t2638 = 0. + t2526 + t2540;
  t3871 = t959*t3744;
  t3878 = t3865*t1092;
  t3923 = t3871 + t3878;
  t3961 = t959*t3865;
  t4011 = -1.*t3744*t1092;
  t4029 = t3961 + t4011;
  t2751 = -1.34008*t2521;
  t2755 = -0.021147*t2528;
  t2843 = 0. + t2751 + t2755;
  t4067 = -1.*t1970*t3923;
  t4075 = t1714*t4029;
  t4137 = t4067 + t4075;
  t4158 = t1714*t3923;
  t4186 = t1970*t4029;
  t4188 = t4158 + t4186;
  t4666 = t183*t603*t404*t325;
  t4726 = t183*t315*t599;
  t4765 = t4666 + t4726;
  t4878 = t183*t603*t301*t645;
  t4879 = -1.*t4765*t650;
  t4902 = t4878 + t4879;
  t4966 = -1.*t183*t404*t315;
  t5002 = t183*t603*t325*t599;
  t5015 = t4966 + t5002;
  t5119 = t959*t4902;
  t5120 = t5015*t1092;
  t5149 = t5119 + t5120;
  t5188 = t959*t5015;
  t5189 = -1.*t4902*t1092;
  t5195 = t5188 + t5189;
  t5202 = -1.*t1970*t5149;
  t5253 = t1714*t5195;
  t5326 = t5202 + t5253;
  t5356 = t1714*t5149;
  t5361 = t1970*t5195;
  t5370 = t5356 + t5361;
  t5480 = t603*t404*t309*t325;
  t5500 = t309*t315*t599;
  t5504 = t5480 + t5500;
  t5577 = t603*t301*t645*t309;
  t5600 = -1.*t5504*t650;
  t5605 = t5577 + t5600;
  t5648 = -1.*t404*t309*t315;
  t5655 = t603*t309*t325*t599;
  t5663 = t5648 + t5655;
  t5707 = t959*t5605;
  t5724 = t5663*t1092;
  t5743 = t5707 + t5724;
  t5760 = t959*t5663;
  t5772 = -1.*t5605*t1092;
  t5788 = t5760 + t5772;
  t5802 = -1.*t1970*t5743;
  t5820 = t1714*t5788;
  t5821 = t5802 + t5820;
  t5828 = t1714*t5743;
  t5835 = t1970*t5788;
  t5906 = t5828 + t5835;
  t6080 = -1.*t404*t315*t325;
  t6085 = t603*t599;
  t6103 = t6080 + t6085;
  t6263 = -1.*t301*t645*t315;
  t6269 = -1.*t6103*t650;
  t6293 = t6263 + t6269;
  t6367 = -1.*t603*t404;
  t6381 = -1.*t315*t325*t599;
  t6382 = t6367 + t6381;
  t6403 = t959*t6293;
  t6417 = t6382*t1092;
  t6425 = t6403 + t6417;
  t6463 = t959*t6382;
  t6468 = -1.*t6293*t1092;
  t6478 = t6463 + t6468;
  t6494 = -1.*t1970*t6425;
  t6507 = t1714*t6478;
  t6515 = t6494 + t6507;
  t6544 = t1714*t6425;
  t6545 = t1970*t6478;
  t6564 = t6544 + t6545;
  t6649 = t301*t309;
  t6653 = -1.*t183*t315*t325;
  t6663 = t6649 + t6653;
  t6724 = t645*t6663;
  t6728 = -1.*t404*t3637*t650;
  t6749 = t6724 + t6728;
  t6760 = t959*t6749;
  t6776 = t3637*t599*t1092;
  t6778 = t6760 + t6776;
  t6801 = t959*t3637*t599;
  t6819 = -1.*t6749*t1092;
  t6825 = t6801 + t6819;
  t6830 = -1.*t1970*t6778;
  t6831 = t1714*t6825;
  t6851 = t6830 + t6831;
  t6858 = t1714*t6778;
  t6867 = t1970*t6825;
  t6871 = t6858 + t6867;
  t6954 = t301*t309*t315;
  t6956 = -1.*t183*t325;
  t6960 = t6954 + t6956;
  t7019 = t645*t342;
  t7029 = -1.*t404*t6960*t650;
  t7052 = t7019 + t7029;
  t7091 = t959*t7052;
  t7097 = t6960*t599*t1092;
  t7105 = t7091 + t7097;
  t7135 = t959*t6960*t599;
  t7151 = -1.*t7052*t1092;
  t7159 = t7135 + t7151;
  t7173 = -1.*t1970*t7105;
  t7177 = t1714*t7159;
  t7186 = t7173 + t7177;
  t7221 = t1714*t7105;
  t7229 = t1970*t7159;
  t7240 = t7221 + t7229;
  t7332 = -1.*t603*t645*t325;
  t7350 = -1.*t603*t301*t404*t650;
  t7353 = t7332 + t7350;
  t7399 = t959*t7353;
  t7405 = t603*t301*t599*t1092;
  t7406 = t7399 + t7405;
  t7419 = t603*t301*t959*t599;
  t7431 = -1.*t7353*t1092;
  t7457 = t7419 + t7431;
  t7475 = -1.*t1970*t7406;
  t7491 = t1714*t7457;
  t7495 = t7475 + t7491;
  t7503 = t1714*t7406;
  t7512 = t1970*t7457;
  t7513 = t7503 + t7512;
  t7609 = -1.*t183*t603*t404;
  t7612 = -1.*t3429*t599;
  t7626 = t7609 + t7612;
  t7695 = -1.*t959*t7626*t650;
  t7705 = t3550*t1092;
  t7706 = t7695 + t7705;
  t7722 = t959*t3550;
  t7731 = t7626*t650*t1092;
  t7738 = t7722 + t7731;
  t7767 = -1.*t1970*t7706;
  t7768 = t1714*t7738;
  t7770 = t7767 + t7768;
  t7778 = t1714*t7706;
  t7780 = t1970*t7738;
  t7787 = t7778 + t7780;
  t7574 = 0.087004*t404;
  t7577 = -0.022225*t599;
  t7585 = t7574 + t7577;
  t7591 = 0.022225*t404;
  t7607 = t7591 + t615;
  t7868 = t183*t301;
  t7869 = t309*t315*t325;
  t7875 = t7868 + t7869;
  t7879 = -1.*t7875*t599;
  t7893 = t1286 + t7879;
  t7920 = t404*t7875;
  t7921 = -1.*t603*t309*t599;
  t7923 = t7920 + t7921;
  t7955 = -1.*t959*t7893*t650;
  t7962 = t7923*t1092;
  t7978 = t7955 + t7962;
  t8002 = t959*t7923;
  t8004 = t7893*t650*t1092;
  t8010 = t8002 + t8004;
  t8017 = -1.*t1970*t7978;
  t8021 = t1714*t8010;
  t8026 = t8017 + t8021;
  t8061 = t1714*t7978;
  t8064 = t1970*t8010;
  t8078 = t8061 + t8064;
  t8136 = t404*t315;
  t8139 = -1.*t603*t325*t599;
  t8142 = t8136 + t8139;
  t8161 = t603*t404*t325;
  t8166 = t315*t599;
  t8167 = t8161 + t8166;
  t8194 = -1.*t959*t8142*t650;
  t8196 = t8167*t1092;
  t8199 = t8194 + t8196;
  t8205 = t959*t8167;
  t8210 = t8142*t650*t1092;
  t8215 = t8205 + t8210;
  t8229 = -1.*t1970*t8199;
  t8234 = t1714*t8215;
  t8236 = t8229 + t8234;
  t8251 = t1714*t8199;
  t8256 = t1970*t8215;
  t8271 = t8251 + t8256;
  t8370 = -1.*t645*t3550;
  t8373 = -1.*t3637*t650;
  t8381 = t8370 + t8373;
  t8422 = -1.*t959*t1970*t8381;
  t8424 = -1.*t1714*t8381*t1092;
  t8451 = t8422 + t8424;
  t8464 = t1714*t959*t8381;
  t8468 = -1.*t1970*t8381*t1092;
  t8478 = t8464 + t8468;
  t8336 = -0.157004*t645;
  t8338 = t8336 + t651;
  t8354 = -0.31508*t645;
  t8356 = 0.157004*t650;
  t8357 = t8354 + t8356;
  t8524 = -1.*t645*t7923;
  t8526 = -1.*t6960*t650;
  t8527 = t8524 + t8526;
  t8564 = -1.*t959*t1970*t8527;
  t8565 = -1.*t1714*t8527*t1092;
  t8568 = t8564 + t8565;
  t8585 = t1714*t959*t8527;
  t8590 = -1.*t1970*t8527*t1092;
  t8605 = t8585 + t8590;
  t8676 = -1.*t645*t8167;
  t8677 = -1.*t603*t301*t650;
  t8678 = t8676 + t8677;
  t8717 = -1.*t959*t1970*t8678;
  t8721 = -1.*t1714*t8678*t1092;
  t8723 = t8717 + t8721;
  t8744 = t1714*t959*t8678;
  t8745 = -1.*t1970*t8678*t1092;
  t8750 = t8744 + t8745;
  t8824 = -1.*t959*t3744;
  t8826 = -1.*t3865*t1092;
  t8827 = t8824 + t8826;
  t8870 = t1970*t8827;
  t8873 = t8870 + t4075;
  t8882 = t1714*t8827;
  t8885 = -1.*t1970*t4029;
  t8888 = t8882 + t8885;
  t8530 = t645*t6960;
  t8534 = -1.*t7923*t650;
  t8538 = t8530 + t8534;
  t8805 = -0.022225*t959;
  t8809 = -0.38008*t1092;
  t8813 = t8805 + t8809;
  t8819 = 0.38008*t959;
  t8820 = t8819 + t1143;
  t8985 = t603*t404*t309;
  t9004 = t7875*t599;
  t9014 = t8985 + t9004;
  t9042 = -1.*t959*t8538;
  t9046 = -1.*t9014*t1092;
  t9051 = t9042 + t9046;
  t9058 = t959*t9014;
  t9059 = -1.*t8538*t1092;
  t9061 = t9058 + t9059;
  t9074 = t1970*t9051;
  t9078 = t1714*t9061;
  t9082 = t9074 + t9078;
  t9096 = t1714*t9051;
  t9103 = -1.*t1970*t9061;
  t9106 = t9096 + t9103;
  t8680 = t603*t301*t645;
  t8684 = -1.*t8167*t650;
  t8691 = t8680 + t8684;
  t9226 = -1.*t404*t315;
  t9228 = t603*t325*t599;
  t9229 = t9226 + t9228;
  t9238 = -1.*t959*t8691;
  t9241 = -1.*t9229*t1092;
  t9245 = t9238 + t9241;
  t9250 = t959*t9229;
  t9252 = -1.*t8691*t1092;
  t9256 = t9250 + t9252;
  t9266 = t1970*t9245;
  t9273 = t1714*t9256;
  t9277 = t9266 + t9273;
  t9284 = t1714*t9245;
  t9288 = -1.*t1970*t9256;
  t9290 = t9284 + t9288;
  t9379 = -1.*t1714*t3923;
  t9382 = t9379 + t8885;
  t4375 = t2465*t4137;
  t9343 = -0.022225*t1714;
  t9344 = -0.86008*t1970;
  t9346 = t9343 + t9344;
  t9352 = 0.86008*t1714;
  t9361 = t9352 + t2132;
  t9453 = t959*t8538;
  t9454 = t9014*t1092;
  t9457 = t9453 + t9454;
  t9471 = -1.*t1970*t9457;
  t9475 = t9471 + t9078;
  t9489 = -1.*t1714*t9457;
  t9494 = t9489 + t9103;
  t9598 = t959*t8691;
  t9599 = t9229*t1092;
  t9600 = t9598 + t9599;
  t9656 = -1.*t1970*t9600;
  t9662 = t9656 + t9273;
  t9686 = -1.*t1714*t9600;
  t9693 = t9686 + t9288;
  t9396 = -1.*t2528*t4137;
  t4383 = -1.*t2528*t4188;
  t4424 = t4375 + t4383;
  t9794 = 1.34008*t2465;
  t9800 = t9794 + t2755;
  t9822 = -0.021147*t2465;
  t9828 = -1.34008*t2528;
  t9837 = t9822 + t9828;
  t9530 = -1.*t2528*t9475;
  t9886 = t1714*t9457;
  t9893 = t1970*t9061;
  t9905 = t9886 + t9893;
  t9564 = t2465*t9475;
  t9720 = -1.*t2528*t9662;
  t9980 = t1714*t9600;
  t9981 = t1970*t9256;
  t9987 = t9980 + t9981;
  t9759 = t2465*t9662;

  p_output1(0)=1.;
  p_output1(1)=0;
  p_output1(2)=0;
  p_output1(3)=0;
  p_output1(4)=1.;
  p_output1(5)=0;
  p_output1(6)=0;
  p_output1(7)=0;
  p_output1(8)=1.;
  p_output1(9)=t1296*t1504 + t2136*t2165 + t2288*t2420 + t2638*t2705 + t2843*t3015 - 1.400132*(t2528*t2705 + t2465*t3015) + 0.043805*(t2465*t2705 - 1.*t2528*t3015) + t342*t601 - 1.*t309*t603*t616 + t644*t652 + 0.167004*(t644*t645 + t650*t661) + t661*t666 + t1261*t958;
  p_output1(10)=t1261*t3744 + t1504*t3865 + t2136*t3923 + t2288*t4029 + t2638*t4137 + t2843*t4188 - 1.400132*(t2528*t4137 + t2465*t4188) + 0.043805*t4424 + t3429*t601 + t183*t603*t616 + 0.167004*(t3550*t645 + t3637*t650) + t3550*t652 + t3637*t666;
  p_output1(11)=0;
  p_output1(12)=t1261*t4902 + t1504*t5015 + t2136*t5149 + t2288*t5195 + t2638*t5326 + t2843*t5370 - 1.400132*(t2528*t5326 + t2465*t5370) + 0.043805*(t2465*t5326 - 1.*t2528*t5370) + t183*t325*t601*t603 - 1.*t183*t315*t616 + 0.167004*(t4765*t645 + t183*t301*t603*t650) + t4765*t652 + t183*t301*t603*t666;
  p_output1(13)=t1261*t5605 + t1504*t5663 + t2136*t5743 + t2288*t5788 + t2638*t5821 + t2843*t5906 - 1.400132*(t2528*t5821 + t2465*t5906) + 0.043805*(t2465*t5821 - 1.*t2528*t5906) + t309*t325*t601*t603 - 1.*t309*t315*t616 + 0.167004*(t5504*t645 + t301*t309*t603*t650) + t5504*t652 + t301*t309*t603*t666;
  p_output1(14)=-1.*t315*t325*t601 - 1.*t603*t616 + t1261*t6293 + t1504*t6382 + t2136*t6425 + t2288*t6478 + 0.167004*(t6103*t645 - 1.*t301*t315*t650) + t2638*t6515 + t6103*t652 + t2843*t6564 - 1.400132*(t2528*t6515 + t2465*t6564) + 0.043805*(t2465*t6515 - 1.*t2528*t6564) - 1.*t301*t315*t666;
  p_output1(15)=t1504*t3637*t599 + t3637*t601 + t3637*t404*t652 + t666*t6663 + 0.167004*(t3637*t404*t645 + t650*t6663) + t1261*t6749 + t2136*t6778 + t2288*t6825 + t2638*t6851 + t2843*t6871 - 1.400132*(t2528*t6851 + t2465*t6871) + 0.043805*(t2465*t6851 - 1.*t2528*t6871);
  p_output1(16)=t342*t666 + t1504*t599*t6960 + t601*t6960 + t404*t652*t6960 + 0.167004*(t342*t650 + t404*t645*t6960) + t1261*t7052 + t2136*t7105 + t2288*t7159 + t2638*t7186 + t2843*t7240 - 1.400132*(t2528*t7186 + t2465*t7240) + 0.043805*(t2465*t7186 - 1.*t2528*t7240);
  p_output1(17)=t1504*t301*t599*t603 + t301*t601*t603 + 0.167004*(t301*t404*t603*t645 - 1.*t325*t603*t650) + t301*t404*t603*t652 - 1.*t325*t603*t666 + t1261*t7353 + t2136*t7406 + t2288*t7457 + t2638*t7495 + t2843*t7513 - 1.400132*(t2528*t7495 + t2465*t7513) + 0.043805*(t2465*t7495 - 1.*t2528*t7513);
  p_output1(18)=t1504*t3550 + t183*t603*t7585 + t3429*t7607 + 0.167004*t645*t7626 - 1.*t1261*t650*t7626 + t652*t7626 + t2136*t7706 + t2288*t7738 + t2638*t7770 + t2843*t7787 - 1.400132*(t2528*t7770 + t2465*t7787) + 0.043805*(t2465*t7770 - 1.*t2528*t7787);
  p_output1(19)=t309*t603*t7585 + t7607*t7875 + 0.167004*t645*t7893 - 1.*t1261*t650*t7893 + t652*t7893 + t1504*t7923 + t2136*t7978 + t2288*t8010 + t2638*t8026 + t2843*t8078 - 1.400132*(t2528*t8026 + t2465*t8078) + 0.043805*(t2465*t8026 - 1.*t2528*t8078);
  p_output1(20)=-1.*t315*t7585 + t325*t603*t7607 + 0.167004*t645*t8142 - 1.*t1261*t650*t8142 + t652*t8142 + t1504*t8167 + t2136*t8199 + t2288*t8215 + t2638*t8236 + t2843*t8271 - 1.400132*(t2528*t8236 + t2465*t8271) + 0.043805*(t2465*t8236 - 1.*t2528*t8271);
  p_output1(21)=0.167004*t3744 + t3637*t8338 + t3550*t8357 + t1261*t8381 - 1.*t1092*t2288*t8381 + t2638*t8451 + t2843*t8478 - 1.400132*(t2528*t8451 + t2465*t8478) + 0.043805*(t2465*t8451 - 1.*t2528*t8478) + t2136*t8381*t959;
  p_output1(22)=t6960*t8338 + t7923*t8357 + t1261*t8527 - 1.*t1092*t2288*t8527 + 0.167004*t8538 + t2638*t8568 + t2843*t8605 - 1.400132*(t2528*t8568 + t2465*t8605) + 0.043805*(t2465*t8568 - 1.*t2528*t8605) + t2136*t8527*t959;
  p_output1(23)=t301*t603*t8338 + t8167*t8357 + t1261*t8678 - 1.*t1092*t2288*t8678 + 0.167004*t8691 + t2638*t8723 + t2843*t8750 - 1.400132*(t2528*t8723 + t2465*t8750) + 0.043805*(t2465*t8723 - 1.*t2528*t8750) + t2136*t8678*t959;
  p_output1(24)=t2136*t4029 + t3744*t8813 + t3865*t8820 + t2288*t8827 + t2843*t8873 + t2638*t8888 + 0.043805*(-1.*t2528*t8873 + t2465*t8888) - 1.400132*(t2465*t8873 + t2528*t8888);
  p_output1(25)=t8538*t8813 + t8820*t9014 + t2288*t9051 + t2136*t9061 + t2843*t9082 + t2638*t9106 + 0.043805*(-1.*t2528*t9082 + t2465*t9106) - 1.400132*(t2465*t9082 + t2528*t9106);
  p_output1(26)=t8691*t8813 + t8820*t9229 + t2288*t9245 + t2136*t9256 + t2843*t9277 + t2638*t9290 + 0.043805*(-1.*t2528*t9277 + t2465*t9290) - 1.400132*(t2465*t9277 + t2528*t9290);
  p_output1(27)=t2843*t4137 + t3923*t9346 + t4029*t9361 + t2638*t9382 - 1.400132*(t4375 + t2528*t9382) + 0.043805*(t2465*t9382 + t9396);
  p_output1(28)=t9061*t9361 + t9346*t9457 + t2843*t9475 + t2638*t9494 + 0.043805*(t2465*t9494 + t9530) - 1.400132*(t2528*t9494 + t9564);
  p_output1(29)=t9256*t9361 + t9346*t9600 + t2843*t9662 + t2638*t9693 + 0.043805*(t2465*t9693 + t9720) - 1.400132*(t2528*t9693 + t9759);
  p_output1(30)=-1.400132*t4424 + 0.043805*(-1.*t2465*t4188 + t9396) + t4137*t9800 + t4188*t9837;
  p_output1(31)=t9475*t9800 + t9837*t9905 + 0.043805*(t9530 - 1.*t2465*t9905) - 1.400132*(t9564 - 1.*t2528*t9905);
  p_output1(32)=t9662*t9800 + t9837*t9987 + 0.043805*(t9720 - 1.*t2465*t9987) - 1.400132*(t9759 - 1.*t2528*t9987);
  p_output1(33)=0;
  p_output1(34)=0;
  p_output1(35)=0;
  p_output1(36)=0;
  p_output1(37)=0;
  p_output1(38)=0;
  p_output1(39)=0;
  p_output1(40)=0;
  p_output1(41)=0;
  p_output1(42)=0;
  p_output1(43)=0;
  p_output1(44)=0;
  p_output1(45)=0;
  p_output1(46)=0;
  p_output1(47)=0;
}


       
void Jp_LeftFootBack(Eigen::Matrix<double,3,16> &p_output1, const Eigen::Matrix<double,16,1> &var1)
{
  // Call Subroutines
  output1(p_output1, var1);

}
