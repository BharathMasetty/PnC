/*
 * Automatically Generated from Mathematica.
 * Thu 23 Aug 2018 15:50:37 GMT-05:00
 */
#include <stdio.h>
#include <stdlib.h>
#include <math.h>

#include "Jp_RightFootBack.h"

#ifdef _MSC_VER
  #define INLINE __forceinline /* use __forceinline (VC++ specific) */
#else
  #define INLINE inline        /* use standard inline */
#endif

/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
INLINE double Power(double x, double y) { return pow(x, y); }
INLINE double Sqrt(double x) { return sqrt(x); }

INLINE double Abs(double x) { return fabs(x); }

INLINE double Exp(double x) { return exp(x); }
INLINE double Log(double x) { return log(x); }

INLINE double Sin(double x) { return sin(x); }
INLINE double Cos(double x) { return cos(x); }
INLINE double Tan(double x) { return tan(x); }

INLINE double Csc(double x) { return 1.0/sin(x); }
INLINE double Sec(double x) { return 1.0/cos(x); }

INLINE double ArcSin(double x) { return asin(x); }
INLINE double ArcCos(double x) { return acos(x); }
//INLINE double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
INLINE double ArcTan(double x, double y) { return atan2(y,x); }

INLINE double Sinh(double x) { return sinh(x); }
INLINE double Cosh(double x) { return cosh(x); }
INLINE double Tanh(double x) { return tanh(x); }

#define E 2.71828182845904523536029
#define Pi 3.14159265358979323846264
#define Degree 0.01745329251994329576924

/*
 * Sub functions
 */
static void output1(Eigen::Matrix<double,3,16> &p_output1, const Eigen::Matrix<double,16,1> &var1)
{
  double t377;
  double t67;
  double t69;
  double t146;
  double t174;
  double t915;
  double t794;
  double t842;
  double t925;
  double t426;
  double t554;
  double t557;
  double t642;
  double t50;
  double t1266;
  double t1327;
  double t1331;
  double t846;
  double t972;
  double t1068;
  double t1495;
  double t1509;
  double t1527;
  double t1550;
  double t1598;
  double t1622;
  double t1667;
  double t1933;
  double t1942;
  double t1986;
  double t2481;
  double t2579;
  double t2593;
  double t2619;
  double t2674;
  double t2700;
  double t2811;
  double t2869;
  double t2902;
  double t2926;
  double t3027;
  double t3046;
  double t3106;
  double t3248;
  double t3281;
  double t3299;
  double t3376;
  double t3581;
  double t3701;
  double t3711;
  double t3791;
  double t3812;
  double t3904;
  double t150;
  double t230;
  double t282;
  double t605;
  double t745;
  double t752;
  double t1095;
  double t1098;
  double t1201;
  double t1418;
  double t1450;
  double t1492;
  double t4496;
  double t4497;
  double t4553;
  double t1630;
  double t1669;
  double t1764;
  double t4416;
  double t4441;
  double t4463;
  double t4572;
  double t4574;
  double t4653;
  double t2412;
  double t2439;
  double t2473;
  double t2722;
  double t2814;
  double t2859;
  double t4675;
  double t4699;
  double t4724;
  double t4909;
  double t4921;
  double t4967;
  double t2944;
  double t2956;
  double t3025;
  double t3339;
  double t3405;
  double t3527;
  double t5081;
  double t5113;
  double t5148;
  double t5175;
  double t5179;
  double t5196;
  double t3741;
  double t3773;
  double t3789;
  double t5214;
  double t5219;
  double t5221;
  double t5225;
  double t5230;
  double t5232;
  double t5398;
  double t5407;
  double t5414;
  double t5434;
  double t5445;
  double t5467;
  double t5525;
  double t5547;
  double t5564;
  double t5575;
  double t5576;
  double t5630;
  double t5635;
  double t5642;
  double t5682;
  double t5706;
  double t5718;
  double t5742;
  double t5754;
  double t5756;
  double t5796;
  double t5981;
  double t5985;
  double t6029;
  double t6054;
  double t6057;
  double t6065;
  double t6150;
  double t6181;
  double t6191;
  double t6214;
  double t6222;
  double t6229;
  double t6251;
  double t6254;
  double t6261;
  double t6268;
  double t6294;
  double t6297;
  double t6308;
  double t6312;
  double t6325;
  double t6422;
  double t6423;
  double t6432;
  double t6443;
  double t6446;
  double t6448;
  double t6474;
  double t6475;
  double t6480;
  double t6492;
  double t6499;
  double t6513;
  double t6517;
  double t6519;
  double t6520;
  double t6542;
  double t6553;
  double t6560;
  double t6566;
  double t6570;
  double t6583;
  double t6652;
  double t6672;
  double t6678;
  double t6693;
  double t6703;
  double t6706;
  double t6761;
  double t6771;
  double t6787;
  double t6800;
  double t6810;
  double t6816;
  double t6823;
  double t6831;
  double t6836;
  double t6862;
  double t6869;
  double t6879;
  double t6930;
  double t6933;
  double t6939;
  double t6977;
  double t6986;
  double t6996;
  double t7017;
  double t7024;
  double t7026;
  double t7035;
  double t7036;
  double t7042;
  double t7053;
  double t7058;
  double t7059;
  double t7075;
  double t7076;
  double t7078;
  double t7175;
  double t7177;
  double t7181;
  double t7209;
  double t7220;
  double t7221;
  double t7230;
  double t7236;
  double t7246;
  double t7251;
  double t7252;
  double t7255;
  double t7281;
  double t7286;
  double t7288;
  double t7409;
  double t7411;
  double t7413;
  double t7438;
  double t7440;
  double t7449;
  double t7457;
  double t7465;
  double t7481;
  double t7494;
  double t7499;
  double t7504;
  double t7511;
  double t7515;
  double t7516;
  double t7357;
  double t7366;
  double t7369;
  double t7399;
  double t7400;
  double t7607;
  double t7620;
  double t7626;
  double t7658;
  double t7661;
  double t7639;
  double t7649;
  double t7650;
  double t7696;
  double t7718;
  double t7738;
  double t7752;
  double t7753;
  double t7779;
  double t7795;
  double t7805;
  double t7806;
  double t7817;
  double t7823;
  double t7831;
  double t7924;
  double t7942;
  double t7943;
  double t7907;
  double t7915;
  double t7916;
  double t7970;
  double t7973;
  double t7974;
  double t7982;
  double t7984;
  double t7988;
  double t7997;
  double t8005;
  double t8010;
  double t8014;
  double t8022;
  double t8024;
  double t8119;
  double t8124;
  double t8126;
  double t8149;
  double t8152;
  double t8164;
  double t8166;
  double t8169;
  double t8178;
  double t8071;
  double t8085;
  double t8092;
  double t8094;
  double t8097;
  double t8285;
  double t8302;
  double t8307;
  double t8339;
  double t8342;
  double t8348;
  double t8357;
  double t8358;
  double t8360;
  double t8512;
  double t8514;
  double t8517;
  double t8554;
  double t8555;
  double t8557;
  double t8579;
  double t8588;
  double t8598;
  double t8777;
  double t8783;
  double t8786;
  double t8793;
  double t8795;
  double t8813;
  double t8816;
  double t8825;
  double t8746;
  double t8747;
  double t8751;
  double t8761;
  double t8763;
  double t8329;
  double t8333;
  double t8334;
  double t8959;
  double t8961;
  double t8965;
  double t9004;
  double t9007;
  double t9012;
  double t9021;
  double t9027;
  double t9034;
  double t9048;
  double t9059;
  double t9062;
  double t9073;
  double t9100;
  double t9101;
  double t8541;
  double t8542;
  double t8544;
  double t9165;
  double t9174;
  double t9189;
  double t9209;
  double t9211;
  double t9226;
  double t9236;
  double t9253;
  double t9260;
  double t9311;
  double t9315;
  double t9316;
  double t9325;
  double t9326;
  double t9330;
  double t9455;
  double t9457;
  double t5341;
  double t9427;
  double t9430;
  double t9432;
  double t9444;
  double t9448;
  double t9514;
  double t9517;
  double t9518;
  double t9530;
  double t9534;
  double t9543;
  double t9544;
  double t9611;
  double t9615;
  double t9617;
  double t9645;
  double t9648;
  double t9655;
  double t9657;
  double t9459;
  double t5344;
  double t5365;
  double t9730;
  double t9736;
  double t9754;
  double t9757;
  double t9768;
  double t9563;
  double t9829;
  double t9831;
  double t9832;
  double t9572;
  double t9665;
  double t9849;
  double t9850;
  double t9851;
  double t9683;
  t377 = Sin(var1[3]);
  t67 = Cos(var1[11]);
  t69 = -1.*t67;
  t146 = 1. + t69;
  t174 = Sin(var1[11]);
  t915 = Cos(var1[3]);
  t794 = Cos(var1[5]);
  t842 = Sin(var1[4]);
  t925 = Sin(var1[5]);
  t426 = Cos(var1[12]);
  t554 = -1.*t426;
  t557 = 1. + t554;
  t642 = Sin(var1[12]);
  t50 = Cos(var1[4]);
  t1266 = -1.*t915*t794;
  t1327 = -1.*t377*t842*t925;
  t1331 = t1266 + t1327;
  t846 = -1.*t794*t377*t842;
  t972 = t915*t925;
  t1068 = t846 + t972;
  t1495 = t50*t174*t377;
  t1509 = t67*t1331;
  t1527 = t1495 + t1509;
  t1550 = Cos(var1[13]);
  t1598 = -1.*t1550;
  t1622 = 1. + t1598;
  t1667 = Sin(var1[13]);
  t1933 = -1.*t67*t50*t377;
  t1942 = t174*t1331;
  t1986 = t1933 + t1942;
  t2481 = t426*t1068;
  t2579 = -1.*t642*t1527;
  t2593 = t2481 + t2579;
  t2619 = Cos(var1[14]);
  t2674 = -1.*t2619;
  t2700 = 1. + t2674;
  t2811 = Sin(var1[14]);
  t2869 = t1667*t1986;
  t2902 = t1550*t2593;
  t2926 = t2869 + t2902;
  t3027 = t1550*t1986;
  t3046 = -1.*t1667*t2593;
  t3106 = t3027 + t3046;
  t3248 = Cos(var1[15]);
  t3281 = -1.*t3248;
  t3299 = 1. + t3281;
  t3376 = Sin(var1[15]);
  t3581 = -1.*t2811*t2926;
  t3701 = t2619*t3106;
  t3711 = t3581 + t3701;
  t3791 = t2619*t2926;
  t3812 = t2811*t3106;
  t3904 = t3791 + t3812;
  t150 = -0.0222*t146;
  t230 = -0.087*t174;
  t282 = 0. + t150 + t230;
  t605 = -0.3151*t557;
  t745 = 0.157*t642;
  t752 = 0. + t605 + t745;
  t1095 = -0.087*t146;
  t1098 = 0.0222*t174;
  t1201 = 0. + t1095 + t1098;
  t1418 = -0.157*t557;
  t1450 = -0.3151*t642;
  t1492 = 0. + t1418 + t1450;
  t4496 = -1.*t794*t377;
  t4497 = t915*t842*t925;
  t4553 = t4496 + t4497;
  t1630 = -0.0222*t1622;
  t1669 = 0.3801*t1667;
  t1764 = 0. + t1630 + t1669;
  t4416 = t915*t794*t842;
  t4441 = t377*t925;
  t4463 = t4416 + t4441;
  t4572 = -1.*t915*t50*t174;
  t4574 = t67*t4553;
  t4653 = t4572 + t4574;
  t2412 = -0.3801*t1622;
  t2439 = -0.0222*t1667;
  t2473 = 0. + t2412 + t2439;
  t2722 = -0.8601*t2700;
  t2814 = -0.0222*t2811;
  t2859 = 0. + t2722 + t2814;
  t4675 = t67*t915*t50;
  t4699 = t174*t4553;
  t4724 = t4675 + t4699;
  t4909 = t426*t4463;
  t4921 = -1.*t642*t4653;
  t4967 = t4909 + t4921;
  t2944 = -0.0222*t2700;
  t2956 = 0.8601*t2811;
  t3025 = 0. + t2944 + t2956;
  t3339 = -0.0211*t3299;
  t3405 = 1.3401*t3376;
  t3527 = 0. + t3339 + t3405;
  t5081 = t1667*t4724;
  t5113 = t1550*t4967;
  t5148 = t5081 + t5113;
  t5175 = t1550*t4724;
  t5179 = -1.*t1667*t4967;
  t5196 = t5175 + t5179;
  t3741 = -1.3401*t3299;
  t3773 = -0.0211*t3376;
  t3789 = 0. + t3741 + t3773;
  t5214 = -1.*t2811*t5148;
  t5219 = t2619*t5196;
  t5221 = t5214 + t5219;
  t5225 = t2619*t5148;
  t5230 = t2811*t5196;
  t5232 = t5225 + t5230;
  t5398 = t915*t174*t842;
  t5407 = t67*t915*t50*t925;
  t5414 = t5398 + t5407;
  t5434 = -1.*t67*t915*t842;
  t5445 = t915*t50*t174*t925;
  t5467 = t5434 + t5445;
  t5525 = t426*t915*t50*t794;
  t5547 = -1.*t642*t5414;
  t5564 = t5525 + t5547;
  t5575 = t1667*t5467;
  t5576 = t1550*t5564;
  t5630 = t5575 + t5576;
  t5635 = t1550*t5467;
  t5642 = -1.*t1667*t5564;
  t5682 = t5635 + t5642;
  t5706 = -1.*t2811*t5630;
  t5718 = t2619*t5682;
  t5742 = t5706 + t5718;
  t5754 = t2619*t5630;
  t5756 = t2811*t5682;
  t5796 = t5754 + t5756;
  t5981 = t174*t377*t842;
  t5985 = t67*t50*t377*t925;
  t6029 = t5981 + t5985;
  t6054 = -1.*t67*t377*t842;
  t6057 = t50*t174*t377*t925;
  t6065 = t6054 + t6057;
  t6150 = t426*t50*t794*t377;
  t6181 = -1.*t642*t6029;
  t6191 = t6150 + t6181;
  t6214 = t1667*t6065;
  t6222 = t1550*t6191;
  t6229 = t6214 + t6222;
  t6251 = t1550*t6065;
  t6254 = -1.*t1667*t6191;
  t6261 = t6251 + t6254;
  t6268 = -1.*t2811*t6229;
  t6294 = t2619*t6261;
  t6297 = t6268 + t6294;
  t6308 = t2619*t6229;
  t6312 = t2811*t6261;
  t6325 = t6308 + t6312;
  t6422 = t50*t174;
  t6423 = -1.*t67*t842*t925;
  t6432 = t6422 + t6423;
  t6443 = -1.*t67*t50;
  t6446 = -1.*t174*t842*t925;
  t6448 = t6443 + t6446;
  t6474 = -1.*t426*t794*t842;
  t6475 = -1.*t642*t6432;
  t6480 = t6474 + t6475;
  t6492 = t1667*t6448;
  t6499 = t1550*t6480;
  t6513 = t6492 + t6499;
  t6517 = t1550*t6448;
  t6519 = -1.*t1667*t6480;
  t6520 = t6517 + t6519;
  t6542 = -1.*t2811*t6513;
  t6553 = t2619*t6520;
  t6560 = t6542 + t6553;
  t6566 = t2619*t6513;
  t6570 = t2811*t6520;
  t6583 = t6566 + t6570;
  t6652 = t794*t377;
  t6672 = -1.*t915*t842*t925;
  t6678 = t6652 + t6672;
  t6693 = -1.*t67*t642*t4463;
  t6703 = t426*t6678;
  t6706 = t6693 + t6703;
  t6761 = t174*t1667*t4463;
  t6771 = t1550*t6706;
  t6787 = t6761 + t6771;
  t6800 = t1550*t174*t4463;
  t6810 = -1.*t1667*t6706;
  t6816 = t6800 + t6810;
  t6823 = -1.*t2811*t6787;
  t6831 = t2619*t6816;
  t6836 = t6823 + t6831;
  t6862 = t2619*t6787;
  t6869 = t2811*t6816;
  t6879 = t6862 + t6869;
  t6930 = t794*t377*t842;
  t6933 = -1.*t915*t925;
  t6939 = t6930 + t6933;
  t6977 = -1.*t67*t642*t6939;
  t6986 = t426*t1331;
  t6996 = t6977 + t6986;
  t7017 = t174*t1667*t6939;
  t7024 = t1550*t6996;
  t7026 = t7017 + t7024;
  t7035 = t1550*t174*t6939;
  t7036 = -1.*t1667*t6996;
  t7042 = t7035 + t7036;
  t7053 = -1.*t2811*t7026;
  t7058 = t2619*t7042;
  t7059 = t7053 + t7058;
  t7075 = t2619*t7026;
  t7076 = t2811*t7042;
  t7078 = t7075 + t7076;
  t7175 = -1.*t67*t50*t794*t642;
  t7177 = -1.*t426*t50*t925;
  t7181 = t7175 + t7177;
  t7209 = t50*t794*t174*t1667;
  t7220 = t1550*t7181;
  t7221 = t7209 + t7220;
  t7230 = t1550*t50*t794*t174;
  t7236 = -1.*t1667*t7181;
  t7246 = t7230 + t7236;
  t7251 = -1.*t2811*t7221;
  t7252 = t2619*t7246;
  t7255 = t7251 + t7252;
  t7281 = t2619*t7221;
  t7286 = t2811*t7246;
  t7288 = t7281 + t7286;
  t7409 = -1.*t67*t915*t50;
  t7411 = -1.*t174*t4553;
  t7413 = t7409 + t7411;
  t7438 = t1667*t4653;
  t7440 = -1.*t1550*t642*t7413;
  t7449 = t7438 + t7440;
  t7457 = t1550*t4653;
  t7465 = t642*t1667*t7413;
  t7481 = t7457 + t7465;
  t7494 = -1.*t2811*t7449;
  t7499 = t2619*t7481;
  t7504 = t7494 + t7499;
  t7511 = t2619*t7449;
  t7515 = t2811*t7481;
  t7516 = t7511 + t7515;
  t7357 = -0.087*t67;
  t7366 = -0.0222*t174;
  t7369 = t7357 + t7366;
  t7399 = 0.0222*t67;
  t7400 = t7399 + t230;
  t7607 = t915*t794;
  t7620 = t377*t842*t925;
  t7626 = t7607 + t7620;
  t7658 = -1.*t174*t7626;
  t7661 = t1933 + t7658;
  t7639 = -1.*t50*t174*t377;
  t7649 = t67*t7626;
  t7650 = t7639 + t7649;
  t7696 = t1667*t7650;
  t7718 = -1.*t1550*t642*t7661;
  t7738 = t7696 + t7718;
  t7752 = t1550*t7650;
  t7753 = t642*t1667*t7661;
  t7779 = t7752 + t7753;
  t7795 = -1.*t2811*t7738;
  t7805 = t2619*t7779;
  t7806 = t7795 + t7805;
  t7817 = t2619*t7738;
  t7823 = t2811*t7779;
  t7831 = t7817 + t7823;
  t7924 = t67*t842;
  t7942 = -1.*t50*t174*t925;
  t7943 = t7924 + t7942;
  t7907 = t174*t842;
  t7915 = t67*t50*t925;
  t7916 = t7907 + t7915;
  t7970 = t1667*t7916;
  t7973 = -1.*t1550*t642*t7943;
  t7974 = t7970 + t7973;
  t7982 = t1550*t7916;
  t7984 = t642*t1667*t7943;
  t7988 = t7982 + t7984;
  t7997 = -1.*t2811*t7974;
  t8005 = t2619*t7988;
  t8010 = t7997 + t8005;
  t8014 = t2619*t7974;
  t8022 = t2811*t7988;
  t8024 = t8014 + t8022;
  t8119 = -1.*t642*t4463;
  t8124 = -1.*t426*t4653;
  t8126 = t8119 + t8124;
  t8149 = -1.*t2619*t1667*t8126;
  t8152 = -1.*t1550*t2811*t8126;
  t8164 = t8149 + t8152;
  t8166 = t1550*t2619*t8126;
  t8169 = -1.*t1667*t2811*t8126;
  t8178 = t8166 + t8169;
  t8071 = 0.157*t426;
  t8085 = t8071 + t1450;
  t8092 = -0.3151*t426;
  t8094 = -0.157*t642;
  t8097 = t8092 + t8094;
  t8285 = -1.*t642*t6939;
  t8302 = -1.*t426*t7650;
  t8307 = t8285 + t8302;
  t8339 = -1.*t2619*t1667*t8307;
  t8342 = -1.*t1550*t2811*t8307;
  t8348 = t8339 + t8342;
  t8357 = t1550*t2619*t8307;
  t8358 = -1.*t1667*t2811*t8307;
  t8360 = t8357 + t8358;
  t8512 = -1.*t50*t794*t642;
  t8514 = -1.*t426*t7916;
  t8517 = t8512 + t8514;
  t8554 = -1.*t2619*t1667*t8517;
  t8555 = -1.*t1550*t2811*t8517;
  t8557 = t8554 + t8555;
  t8579 = t1550*t2619*t8517;
  t8588 = -1.*t1667*t2811*t8517;
  t8598 = t8579 + t8588;
  t8777 = -1.*t1667*t4724;
  t8783 = -1.*t1550*t4967;
  t8786 = t8777 + t8783;
  t8793 = t2811*t8786;
  t8795 = t8793 + t5219;
  t8813 = t2619*t8786;
  t8816 = -1.*t2811*t5196;
  t8825 = t8813 + t8816;
  t8746 = 0.3801*t1550;
  t8747 = t8746 + t2439;
  t8751 = -0.0222*t1550;
  t8761 = -0.3801*t1667;
  t8763 = t8751 + t8761;
  t8329 = t426*t6939;
  t8333 = -1.*t642*t7650;
  t8334 = t8329 + t8333;
  t8959 = t67*t50*t377;
  t8961 = t174*t7626;
  t8965 = t8959 + t8961;
  t9004 = -1.*t1667*t8965;
  t9007 = -1.*t1550*t8334;
  t9012 = t9004 + t9007;
  t9021 = t1550*t8965;
  t9027 = -1.*t1667*t8334;
  t9034 = t9021 + t9027;
  t9048 = t2811*t9012;
  t9059 = t2619*t9034;
  t9062 = t9048 + t9059;
  t9073 = t2619*t9012;
  t9100 = -1.*t2811*t9034;
  t9101 = t9073 + t9100;
  t8541 = t426*t50*t794;
  t8542 = -1.*t642*t7916;
  t8544 = t8541 + t8542;
  t9165 = -1.*t67*t842;
  t9174 = t50*t174*t925;
  t9189 = t9165 + t9174;
  t9209 = -1.*t1667*t9189;
  t9211 = -1.*t1550*t8544;
  t9226 = t9209 + t9211;
  t9236 = t1550*t9189;
  t9253 = -1.*t1667*t8544;
  t9260 = t9236 + t9253;
  t9311 = t2811*t9226;
  t9315 = t2619*t9260;
  t9316 = t9311 + t9315;
  t9325 = t2619*t9226;
  t9326 = -1.*t2811*t9260;
  t9330 = t9325 + t9326;
  t9455 = -1.*t2619*t5148;
  t9457 = t9455 + t8816;
  t5341 = t3248*t5221;
  t9427 = -0.0222*t2619;
  t9430 = -0.8601*t2811;
  t9432 = t9427 + t9430;
  t9444 = 0.8601*t2619;
  t9448 = t9444 + t2814;
  t9514 = t1667*t8965;
  t9517 = t1550*t8334;
  t9518 = t9514 + t9517;
  t9530 = -1.*t2811*t9518;
  t9534 = t9530 + t9059;
  t9543 = -1.*t2619*t9518;
  t9544 = t9543 + t9100;
  t9611 = t1667*t9189;
  t9615 = t1550*t8544;
  t9617 = t9611 + t9615;
  t9645 = -1.*t2811*t9617;
  t9648 = t9645 + t9315;
  t9655 = -1.*t2619*t9617;
  t9657 = t9655 + t9326;
  t9459 = -1.*t3376*t5221;
  t5344 = -1.*t3376*t5232;
  t5365 = t5341 + t5344;
  t9730 = 1.3401*t3248;
  t9736 = t9730 + t3773;
  t9754 = -0.0211*t3248;
  t9757 = -1.3401*t3376;
  t9768 = t9754 + t9757;
  t9563 = -1.*t3376*t9534;
  t9829 = t2619*t9518;
  t9831 = t2811*t9034;
  t9832 = t9829 + t9831;
  t9572 = t3248*t9534;
  t9665 = -1.*t3376*t9648;
  t9849 = t2619*t9617;
  t9850 = t2811*t9260;
  t9851 = t9849 + t9850;
  t9683 = t3248*t9648;

  p_output1(0)=1.;
  p_output1(1)=0;
  p_output1(2)=0;
  p_output1(3)=0;
  p_output1(4)=1.;
  p_output1(5)=0;
  p_output1(6)=0;
  p_output1(7)=0;
  p_output1(8)=1.;
  p_output1(9)=t1201*t1331 + t1492*t1527 + t1764*t1986 + t2473*t2593 + t2859*t2926 + t3025*t3106 + t3527*t3711 + t3789*t3904 - 1.325152*(t3376*t3711 + t3248*t3904) + 0.043912*(t3248*t3711 - 1.*t3376*t3904) - 1.*t282*t377*t50 - 0.24205*(t1527*t426 + t1068*t642) + t1068*t752;
  p_output1(10)=t1201*t4553 + t1492*t4653 + t1764*t4724 + t2473*t4967 + t2859*t5148 + t3025*t5196 + t3527*t5221 + t3789*t5232 - 1.325152*(t3376*t5221 + t3248*t5232) + 0.043912*t5365 - 0.24205*(t426*t4653 + t4463*t642) + t4463*t752 + t282*t50*t915;
  p_output1(11)=0;
  p_output1(12)=t1492*t5414 + t1764*t5467 + t2473*t5564 + t2859*t5630 + t3025*t5682 + t3527*t5742 + t3789*t5796 - 1.325152*(t3376*t5742 + t3248*t5796) + 0.043912*(t3248*t5742 - 1.*t3376*t5796) + t50*t752*t794*t915 - 1.*t282*t842*t915 - 0.24205*(t426*t5414 + t50*t642*t794*t915) + t1201*t50*t915*t925;
  p_output1(13)=t1492*t6029 + t1764*t6065 + t2473*t6191 + t2859*t6229 + t3025*t6261 + t3527*t6297 + t3789*t6325 - 1.325152*(t3376*t6297 + t3248*t6325) + 0.043912*(t3248*t6297 - 1.*t3376*t6325) + t377*t50*t752*t794 - 0.24205*(t426*t6029 + t377*t50*t642*t794) - 1.*t282*t377*t842 + t1201*t377*t50*t925;
  p_output1(14)=-1.*t282*t50 + t1492*t6432 + t1764*t6448 + t2473*t6480 + t2859*t6513 + t3025*t6520 + t3527*t6560 + t3789*t6583 - 1.325152*(t3376*t6560 + t3248*t6583) + 0.043912*(t3248*t6560 - 1.*t3376*t6583) - 1.*t752*t794*t842 - 0.24205*(t426*t6432 - 1.*t642*t794*t842) - 1.*t1201*t842*t925;
  p_output1(15)=t1201*t4463 + t174*t1764*t4463 + t1492*t4463*t67 - 0.24205*(t642*t6678 + t426*t4463*t67) + t2473*t6706 + t2859*t6787 + t3025*t6816 + t3527*t6836 + t3789*t6879 - 1.325152*(t3376*t6836 + t3248*t6879) + 0.043912*(t3248*t6836 - 1.*t3376*t6879) + t6678*t752;
  p_output1(16)=t1201*t6939 + t174*t1764*t6939 + t1492*t67*t6939 - 0.24205*(t1331*t642 + t426*t67*t6939) + t2473*t6996 + t2859*t7026 + t3025*t7042 + t3527*t7059 + t3789*t7078 - 1.325152*(t3376*t7059 + t3248*t7078) + 0.043912*(t3248*t7059 - 1.*t3376*t7078) + t1331*t752;
  p_output1(17)=t2473*t7181 + t2859*t7221 + t3025*t7246 + t3527*t7255 + t3789*t7288 - 1.325152*(t3376*t7255 + t3248*t7288) + 0.043912*(t3248*t7255 - 1.*t3376*t7288) + t1201*t50*t794 + t174*t1764*t50*t794 + t1492*t50*t67*t794 - 1.*t50*t752*t925 - 0.24205*(t426*t50*t67*t794 - 1.*t50*t642*t925);
  p_output1(18)=0;
  p_output1(19)=0;
  p_output1(20)=0;
  p_output1(21)=0;
  p_output1(22)=0;
  p_output1(23)=0;
  p_output1(24)=0;
  p_output1(25)=0;
  p_output1(26)=0;
  p_output1(27)=0;
  p_output1(28)=0;
  p_output1(29)=0;
  p_output1(30)=0;
  p_output1(31)=0;
  p_output1(32)=0;
  p_output1(33)=t1764*t4653 + t4553*t7400 + t1492*t7413 - 0.24205*t426*t7413 - 1.*t2473*t642*t7413 + t2859*t7449 + t3025*t7481 + t3527*t7504 + t3789*t7516 - 1.325152*(t3376*t7504 + t3248*t7516) + 0.043912*(t3248*t7504 - 1.*t3376*t7516) + t50*t7369*t915;
  p_output1(34)=t377*t50*t7369 + t7400*t7626 + t1764*t7650 + t1492*t7661 - 0.24205*t426*t7661 - 1.*t2473*t642*t7661 + t2859*t7738 + t3025*t7779 + t3527*t7806 + t3789*t7831 - 1.325152*(t3376*t7806 + t3248*t7831) + 0.043912*(t3248*t7806 - 1.*t3376*t7831);
  p_output1(35)=t1764*t7916 + t1492*t7943 - 0.24205*t426*t7943 - 1.*t2473*t642*t7943 + t2859*t7974 + t3025*t7988 + t3527*t8010 + t3789*t8024 - 1.325152*(t3376*t8010 + t3248*t8024) + 0.043912*(t3248*t8010 - 1.*t3376*t8024) - 1.*t7369*t842 + t50*t7400*t925;
  p_output1(36)=-0.24205*t4967 + t4463*t8085 + t4653*t8097 + t2473*t8126 + t1550*t2859*t8126 - 1.*t1667*t3025*t8126 + t3527*t8164 + t3789*t8178 - 1.325152*(t3376*t8164 + t3248*t8178) + 0.043912*(t3248*t8164 - 1.*t3376*t8178);
  p_output1(37)=t6939*t8085 + t7650*t8097 + t2473*t8307 + t1550*t2859*t8307 - 1.*t1667*t3025*t8307 - 0.24205*t8334 + t3527*t8348 + t3789*t8360 - 1.325152*(t3376*t8348 + t3248*t8360) + 0.043912*(t3248*t8348 - 1.*t3376*t8360);
  p_output1(38)=t50*t794*t8085 + t7916*t8097 + t2473*t8517 + t1550*t2859*t8517 - 1.*t1667*t3025*t8517 - 0.24205*t8544 + t3527*t8557 + t3789*t8598 - 1.325152*(t3376*t8557 + t3248*t8598) + 0.043912*(t3248*t8557 - 1.*t3376*t8598);
  p_output1(39)=t2859*t5196 + t4724*t8747 + t4967*t8763 + t3025*t8786 + t3789*t8795 + t3527*t8825 + 0.043912*(-1.*t3376*t8795 + t3248*t8825) - 1.325152*(t3248*t8795 + t3376*t8825);
  p_output1(40)=t8334*t8763 + t8747*t8965 + t3025*t9012 + t2859*t9034 + t3789*t9062 + t3527*t9101 + 0.043912*(-1.*t3376*t9062 + t3248*t9101) - 1.325152*(t3248*t9062 + t3376*t9101);
  p_output1(41)=t8544*t8763 + t8747*t9189 + t3025*t9226 + t2859*t9260 + t3789*t9316 + t3527*t9330 + 0.043912*(-1.*t3376*t9316 + t3248*t9330) - 1.325152*(t3248*t9316 + t3376*t9330);
  p_output1(42)=t3789*t5221 + t5148*t9432 + t5196*t9448 + t3527*t9457 - 1.325152*(t5341 + t3376*t9457) + 0.043912*(t3248*t9457 + t9459);
  p_output1(43)=t9034*t9448 + t9432*t9518 + t3789*t9534 + t3527*t9544 + 0.043912*(t3248*t9544 + t9563) - 1.325152*(t3376*t9544 + t9572);
  p_output1(44)=t9260*t9448 + t9432*t9617 + t3789*t9648 + t3527*t9657 + 0.043912*(t3248*t9657 + t9665) - 1.325152*(t3376*t9657 + t9683);
  p_output1(45)=-1.325152*t5365 + 0.043912*(-1.*t3248*t5232 + t9459) + t5221*t9736 + t5232*t9768;
  p_output1(46)=t9534*t9736 + t9768*t9832 + 0.043912*(t9563 - 1.*t3248*t9832) - 1.325152*(t9572 - 1.*t3376*t9832);
  p_output1(47)=t9648*t9736 + t9768*t9851 + 0.043912*(t9665 - 1.*t3248*t9851) - 1.325152*(t9683 - 1.*t3376*t9851);
}


       
void Jp_RightFootBack(Eigen::Matrix<double,3,16> &p_output1, const Eigen::Matrix<double,16,1> &var1)
{
  // Call Subroutines
  output1(p_output1, var1);

}
