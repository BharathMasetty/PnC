/*
 * Automatically Generated from Mathematica.
 * Thu 16 Aug 2018 23:22:04 GMT-05:00
 */
#include <stdio.h>
#include <stdlib.h>
#include <math.h>

#include "Jp_RightFootBack.h"

#ifdef _MSC_VER
  #define INLINE __forceinline /* use __forceinline (VC++ specific) */
#else
  #define INLINE inline        /* use standard inline */
#endif

/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
INLINE double Power(double x, double y) { return pow(x, y); }
INLINE double Sqrt(double x) { return sqrt(x); }

INLINE double Abs(double x) { return fabs(x); }

INLINE double Exp(double x) { return exp(x); }
INLINE double Log(double x) { return log(x); }

INLINE double Sin(double x) { return sin(x); }
INLINE double Cos(double x) { return cos(x); }
INLINE double Tan(double x) { return tan(x); }

INLINE double Csc(double x) { return 1.0/sin(x); }
INLINE double Sec(double x) { return 1.0/cos(x); }

INLINE double ArcSin(double x) { return asin(x); }
INLINE double ArcCos(double x) { return acos(x); }
//INLINE double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
INLINE double ArcTan(double x, double y) { return atan2(y,x); }

INLINE double Sinh(double x) { return sinh(x); }
INLINE double Cosh(double x) { return cosh(x); }
INLINE double Tanh(double x) { return tanh(x); }

#define E 2.71828182845904523536029
#define Pi 3.14159265358979323846264
#define Degree 0.01745329251994329576924

/*
 * Sub functions
 */
static void output1(Eigen::Matrix<double,3,16> &p_output1, const Eigen::Matrix<double,16,1> &var1)
{
  double t533;
  double t35;
  double t43;
  double t66;
  double t205;
  double t930;
  double t852;
  double t859;
  double t939;
  double t629;
  double t720;
  double t737;
  double t787;
  double t18;
  double t1155;
  double t1169;
  double t1193;
  double t863;
  double t998;
  double t1000;
  double t1288;
  double t1338;
  double t1435;
  double t1625;
  double t1644;
  double t1646;
  double t1654;
  double t1879;
  double t1923;
  double t1924;
  double t2357;
  double t2379;
  double t2447;
  double t2497;
  double t2498;
  double t2516;
  double t2600;
  double t2748;
  double t2810;
  double t2834;
  double t2988;
  double t3006;
  double t3034;
  double t3070;
  double t3131;
  double t3169;
  double t3224;
  double t3335;
  double t3349;
  double t3356;
  double t3377;
  double t3390;
  double t3397;
  double t109;
  double t231;
  double t339;
  double t743;
  double t836;
  double t837;
  double t1039;
  double t1053;
  double t1122;
  double t1272;
  double t1280;
  double t1285;
  double t3949;
  double t3964;
  double t3979;
  double t1653;
  double t1728;
  double t1742;
  double t3816;
  double t3819;
  double t3848;
  double t4023;
  double t4027;
  double t4032;
  double t2224;
  double t2235;
  double t2272;
  double t2588;
  double t2610;
  double t2667;
  double t4172;
  double t4235;
  double t4247;
  double t4524;
  double t4542;
  double t4556;
  double t2937;
  double t2965;
  double t2980;
  double t3190;
  double t3252;
  double t3256;
  double t4569;
  double t4586;
  double t4619;
  double t4636;
  double t4638;
  double t4661;
  double t3362;
  double t3368;
  double t3373;
  double t4758;
  double t4761;
  double t4767;
  double t4811;
  double t4812;
  double t4827;
  double t5320;
  double t5330;
  double t5338;
  double t5357;
  double t5383;
  double t5389;
  double t5506;
  double t5535;
  double t5536;
  double t5563;
  double t5574;
  double t5604;
  double t5620;
  double t5627;
  double t5629;
  double t5681;
  double t5723;
  double t5729;
  double t5761;
  double t5768;
  double t5769;
  double t5901;
  double t5902;
  double t5909;
  double t5940;
  double t5946;
  double t5955;
  double t6051;
  double t6061;
  double t6064;
  double t6078;
  double t6092;
  double t6100;
  double t6117;
  double t6126;
  double t6132;
  double t6142;
  double t6168;
  double t6171;
  double t6225;
  double t6236;
  double t6257;
  double t6396;
  double t6408;
  double t6417;
  double t6439;
  double t6442;
  double t6446;
  double t6490;
  double t6496;
  double t6504;
  double t6559;
  double t6588;
  double t6593;
  double t6624;
  double t6638;
  double t6664;
  double t6675;
  double t6677;
  double t6686;
  double t6696;
  double t6700;
  double t6709;
  double t6797;
  double t6807;
  double t6814;
  double t6821;
  double t6844;
  double t6849;
  double t6882;
  double t6888;
  double t6893;
  double t6905;
  double t6906;
  double t6914;
  double t6932;
  double t6947;
  double t6949;
  double t6962;
  double t6966;
  double t6968;
  double t7049;
  double t7059;
  double t7060;
  double t7089;
  double t7095;
  double t7117;
  double t7149;
  double t7152;
  double t7159;
  double t7174;
  double t7175;
  double t7177;
  double t7196;
  double t7200;
  double t7209;
  double t7245;
  double t7254;
  double t7255;
  double t7370;
  double t7373;
  double t7384;
  double t7418;
  double t7419;
  double t7425;
  double t7435;
  double t7442;
  double t7447;
  double t7459;
  double t7483;
  double t7503;
  double t7508;
  double t7512;
  double t7518;
  double t7643;
  double t7651;
  double t7652;
  double t7674;
  double t7677;
  double t7681;
  double t7683;
  double t7689;
  double t7703;
  double t7722;
  double t7732;
  double t7735;
  double t7738;
  double t7746;
  double t7750;
  double t7592;
  double t7599;
  double t7610;
  double t7627;
  double t7630;
  double t7833;
  double t7839;
  double t7848;
  double t7861;
  double t7862;
  double t7854;
  double t7858;
  double t7859;
  double t7870;
  double t7872;
  double t7878;
  double t7884;
  double t7889;
  double t7912;
  double t7915;
  double t7919;
  double t7926;
  double t7939;
  double t7941;
  double t7943;
  double t8060;
  double t8064;
  double t8065;
  double t8034;
  double t8039;
  double t8051;
  double t8085;
  double t8089;
  double t8093;
  double t8106;
  double t8117;
  double t8125;
  double t8131;
  double t8140;
  double t8154;
  double t8156;
  double t8158;
  double t8159;
  double t8317;
  double t8329;
  double t8331;
  double t8354;
  double t8355;
  double t8388;
  double t8399;
  double t8402;
  double t8411;
  double t8257;
  double t8274;
  double t8296;
  double t8311;
  double t8313;
  double t8519;
  double t8542;
  double t8554;
  double t8604;
  double t8610;
  double t8611;
  double t8620;
  double t8636;
  double t8644;
  double t8709;
  double t8715;
  double t8719;
  double t8757;
  double t8768;
  double t8770;
  double t8773;
  double t8776;
  double t8778;
  double t8935;
  double t8948;
  double t8954;
  double t8961;
  double t8963;
  double t8972;
  double t8979;
  double t8982;
  double t8861;
  double t8864;
  double t8874;
  double t8901;
  double t8903;
  double t8578;
  double t8581;
  double t8584;
  double t9079;
  double t9104;
  double t9112;
  double t9135;
  double t9138;
  double t9151;
  double t9162;
  double t9167;
  double t9169;
  double t9191;
  double t9195;
  double t9196;
  double t9199;
  double t9223;
  double t9224;
  double t8738;
  double t8740;
  double t8748;
  double t9318;
  double t9335;
  double t9341;
  double t9361;
  double t9368;
  double t9376;
  double t9381;
  double t9384;
  double t9386;
  double t9390;
  double t9393;
  double t9394;
  double t9403;
  double t9405;
  double t9407;
  double t9499;
  double t9518;
  double t4896;
  double t9456;
  double t9461;
  double t9469;
  double t9485;
  double t9488;
  double t9619;
  double t9640;
  double t9644;
  double t9657;
  double t9668;
  double t9684;
  double t9689;
  double t9746;
  double t9769;
  double t9776;
  double t9835;
  double t9841;
  double t9856;
  double t9891;
  double t9522;
  double t4972;
  double t5080;
  double t10021;
  double t10025;
  double t10027;
  double t10029;
  double t10030;
  double t9695;
  double t10061;
  double t10069;
  double t10070;
  double t9713;
  double t9920;
  double t10114;
  double t10117;
  double t10119;
  double t9980;
  t533 = Sin(var1[3]);
  t35 = Cos(var1[11]);
  t43 = -1.*t35;
  t66 = 1. + t43;
  t205 = Sin(var1[11]);
  t930 = Cos(var1[3]);
  t852 = Cos(var1[5]);
  t859 = Sin(var1[4]);
  t939 = Sin(var1[5]);
  t629 = Cos(var1[12]);
  t720 = -1.*t629;
  t737 = 1. + t720;
  t787 = Sin(var1[12]);
  t18 = Cos(var1[4]);
  t1155 = -1.*t930*t852;
  t1169 = -1.*t533*t859*t939;
  t1193 = t1155 + t1169;
  t863 = -1.*t852*t533*t859;
  t998 = t930*t939;
  t1000 = t863 + t998;
  t1288 = t18*t205*t533;
  t1338 = t35*t1193;
  t1435 = t1288 + t1338;
  t1625 = Cos(var1[13]);
  t1644 = -1.*t1625;
  t1646 = 1. + t1644;
  t1654 = Sin(var1[13]);
  t1879 = -1.*t35*t18*t533;
  t1923 = t205*t1193;
  t1924 = t1879 + t1923;
  t2357 = t629*t1000;
  t2379 = -1.*t787*t1435;
  t2447 = t2357 + t2379;
  t2497 = Cos(var1[14]);
  t2498 = -1.*t2497;
  t2516 = 1. + t2498;
  t2600 = Sin(var1[14]);
  t2748 = t1654*t1924;
  t2810 = t1625*t2447;
  t2834 = t2748 + t2810;
  t2988 = t1625*t1924;
  t3006 = -1.*t1654*t2447;
  t3034 = t2988 + t3006;
  t3070 = Cos(var1[15]);
  t3131 = -1.*t3070;
  t3169 = 1. + t3131;
  t3224 = Sin(var1[15]);
  t3335 = -1.*t2600*t2834;
  t3349 = t2497*t3034;
  t3356 = t3335 + t3349;
  t3377 = t2497*t2834;
  t3390 = t2600*t3034;
  t3397 = t3377 + t3390;
  t109 = -0.022225*t66;
  t231 = -0.086996*t205;
  t339 = 0. + t109 + t231;
  t743 = -0.31508*t737;
  t836 = 0.156996*t787;
  t837 = 0. + t743 + t836;
  t1039 = -0.086996*t66;
  t1053 = 0.022225*t205;
  t1122 = 0. + t1039 + t1053;
  t1272 = -0.156996*t737;
  t1280 = -0.31508*t787;
  t1285 = 0. + t1272 + t1280;
  t3949 = -1.*t852*t533;
  t3964 = t930*t859*t939;
  t3979 = t3949 + t3964;
  t1653 = -0.022225*t1646;
  t1728 = 0.38008*t1654;
  t1742 = 0. + t1653 + t1728;
  t3816 = t930*t852*t859;
  t3819 = t533*t939;
  t3848 = t3816 + t3819;
  t4023 = -1.*t930*t18*t205;
  t4027 = t35*t3979;
  t4032 = t4023 + t4027;
  t2224 = -0.38008*t1646;
  t2235 = -0.022225*t1654;
  t2272 = 0. + t2224 + t2235;
  t2588 = -0.86008*t2516;
  t2610 = -0.022225*t2600;
  t2667 = 0. + t2588 + t2610;
  t4172 = t35*t930*t18;
  t4235 = t205*t3979;
  t4247 = t4172 + t4235;
  t4524 = t629*t3848;
  t4542 = -1.*t787*t4032;
  t4556 = t4524 + t4542;
  t2937 = -0.022225*t2516;
  t2965 = 0.86008*t2600;
  t2980 = 0. + t2937 + t2965;
  t3190 = -0.021147*t3169;
  t3252 = 1.34008*t3224;
  t3256 = 0. + t3190 + t3252;
  t4569 = t1654*t4247;
  t4586 = t1625*t4556;
  t4619 = t4569 + t4586;
  t4636 = t1625*t4247;
  t4638 = -1.*t1654*t4556;
  t4661 = t4636 + t4638;
  t3362 = -1.34008*t3169;
  t3368 = -0.021147*t3224;
  t3373 = 0. + t3362 + t3368;
  t4758 = -1.*t2600*t4619;
  t4761 = t2497*t4661;
  t4767 = t4758 + t4761;
  t4811 = t2497*t4619;
  t4812 = t2600*t4661;
  t4827 = t4811 + t4812;
  t5320 = t930*t205*t859;
  t5330 = t35*t930*t18*t939;
  t5338 = t5320 + t5330;
  t5357 = -1.*t35*t930*t859;
  t5383 = t930*t18*t205*t939;
  t5389 = t5357 + t5383;
  t5506 = t629*t930*t18*t852;
  t5535 = -1.*t787*t5338;
  t5536 = t5506 + t5535;
  t5563 = t1654*t5389;
  t5574 = t1625*t5536;
  t5604 = t5563 + t5574;
  t5620 = t1625*t5389;
  t5627 = -1.*t1654*t5536;
  t5629 = t5620 + t5627;
  t5681 = -1.*t2600*t5604;
  t5723 = t2497*t5629;
  t5729 = t5681 + t5723;
  t5761 = t2497*t5604;
  t5768 = t2600*t5629;
  t5769 = t5761 + t5768;
  t5901 = t205*t533*t859;
  t5902 = t35*t18*t533*t939;
  t5909 = t5901 + t5902;
  t5940 = -1.*t35*t533*t859;
  t5946 = t18*t205*t533*t939;
  t5955 = t5940 + t5946;
  t6051 = t629*t18*t852*t533;
  t6061 = -1.*t787*t5909;
  t6064 = t6051 + t6061;
  t6078 = t1654*t5955;
  t6092 = t1625*t6064;
  t6100 = t6078 + t6092;
  t6117 = t1625*t5955;
  t6126 = -1.*t1654*t6064;
  t6132 = t6117 + t6126;
  t6142 = -1.*t2600*t6100;
  t6168 = t2497*t6132;
  t6171 = t6142 + t6168;
  t6225 = t2497*t6100;
  t6236 = t2600*t6132;
  t6257 = t6225 + t6236;
  t6396 = t18*t205;
  t6408 = -1.*t35*t859*t939;
  t6417 = t6396 + t6408;
  t6439 = -1.*t35*t18;
  t6442 = -1.*t205*t859*t939;
  t6446 = t6439 + t6442;
  t6490 = -1.*t629*t852*t859;
  t6496 = -1.*t787*t6417;
  t6504 = t6490 + t6496;
  t6559 = t1654*t6446;
  t6588 = t1625*t6504;
  t6593 = t6559 + t6588;
  t6624 = t1625*t6446;
  t6638 = -1.*t1654*t6504;
  t6664 = t6624 + t6638;
  t6675 = -1.*t2600*t6593;
  t6677 = t2497*t6664;
  t6686 = t6675 + t6677;
  t6696 = t2497*t6593;
  t6700 = t2600*t6664;
  t6709 = t6696 + t6700;
  t6797 = t852*t533;
  t6807 = -1.*t930*t859*t939;
  t6814 = t6797 + t6807;
  t6821 = -1.*t35*t787*t3848;
  t6844 = t629*t6814;
  t6849 = t6821 + t6844;
  t6882 = t205*t1654*t3848;
  t6888 = t1625*t6849;
  t6893 = t6882 + t6888;
  t6905 = t1625*t205*t3848;
  t6906 = -1.*t1654*t6849;
  t6914 = t6905 + t6906;
  t6932 = -1.*t2600*t6893;
  t6947 = t2497*t6914;
  t6949 = t6932 + t6947;
  t6962 = t2497*t6893;
  t6966 = t2600*t6914;
  t6968 = t6962 + t6966;
  t7049 = t852*t533*t859;
  t7059 = -1.*t930*t939;
  t7060 = t7049 + t7059;
  t7089 = -1.*t35*t787*t7060;
  t7095 = t629*t1193;
  t7117 = t7089 + t7095;
  t7149 = t205*t1654*t7060;
  t7152 = t1625*t7117;
  t7159 = t7149 + t7152;
  t7174 = t1625*t205*t7060;
  t7175 = -1.*t1654*t7117;
  t7177 = t7174 + t7175;
  t7196 = -1.*t2600*t7159;
  t7200 = t2497*t7177;
  t7209 = t7196 + t7200;
  t7245 = t2497*t7159;
  t7254 = t2600*t7177;
  t7255 = t7245 + t7254;
  t7370 = -1.*t35*t18*t852*t787;
  t7373 = -1.*t629*t18*t939;
  t7384 = t7370 + t7373;
  t7418 = t18*t852*t205*t1654;
  t7419 = t1625*t7384;
  t7425 = t7418 + t7419;
  t7435 = t1625*t18*t852*t205;
  t7442 = -1.*t1654*t7384;
  t7447 = t7435 + t7442;
  t7459 = -1.*t2600*t7425;
  t7483 = t2497*t7447;
  t7503 = t7459 + t7483;
  t7508 = t2497*t7425;
  t7512 = t2600*t7447;
  t7518 = t7508 + t7512;
  t7643 = -1.*t35*t930*t18;
  t7651 = -1.*t205*t3979;
  t7652 = t7643 + t7651;
  t7674 = t1654*t4032;
  t7677 = -1.*t1625*t787*t7652;
  t7681 = t7674 + t7677;
  t7683 = t1625*t4032;
  t7689 = t787*t1654*t7652;
  t7703 = t7683 + t7689;
  t7722 = -1.*t2600*t7681;
  t7732 = t2497*t7703;
  t7735 = t7722 + t7732;
  t7738 = t2497*t7681;
  t7746 = t2600*t7703;
  t7750 = t7738 + t7746;
  t7592 = -0.086996*t35;
  t7599 = -0.022225*t205;
  t7610 = t7592 + t7599;
  t7627 = 0.022225*t35;
  t7630 = t7627 + t231;
  t7833 = t930*t852;
  t7839 = t533*t859*t939;
  t7848 = t7833 + t7839;
  t7861 = -1.*t205*t7848;
  t7862 = t1879 + t7861;
  t7854 = -1.*t18*t205*t533;
  t7858 = t35*t7848;
  t7859 = t7854 + t7858;
  t7870 = t1654*t7859;
  t7872 = -1.*t1625*t787*t7862;
  t7878 = t7870 + t7872;
  t7884 = t1625*t7859;
  t7889 = t787*t1654*t7862;
  t7912 = t7884 + t7889;
  t7915 = -1.*t2600*t7878;
  t7919 = t2497*t7912;
  t7926 = t7915 + t7919;
  t7939 = t2497*t7878;
  t7941 = t2600*t7912;
  t7943 = t7939 + t7941;
  t8060 = t35*t859;
  t8064 = -1.*t18*t205*t939;
  t8065 = t8060 + t8064;
  t8034 = t205*t859;
  t8039 = t35*t18*t939;
  t8051 = t8034 + t8039;
  t8085 = t1654*t8051;
  t8089 = -1.*t1625*t787*t8065;
  t8093 = t8085 + t8089;
  t8106 = t1625*t8051;
  t8117 = t787*t1654*t8065;
  t8125 = t8106 + t8117;
  t8131 = -1.*t2600*t8093;
  t8140 = t2497*t8125;
  t8154 = t8131 + t8140;
  t8156 = t2497*t8093;
  t8158 = t2600*t8125;
  t8159 = t8156 + t8158;
  t8317 = -1.*t787*t3848;
  t8329 = -1.*t629*t4032;
  t8331 = t8317 + t8329;
  t8354 = -1.*t2497*t1654*t8331;
  t8355 = -1.*t1625*t2600*t8331;
  t8388 = t8354 + t8355;
  t8399 = t1625*t2497*t8331;
  t8402 = -1.*t1654*t2600*t8331;
  t8411 = t8399 + t8402;
  t8257 = 0.156996*t629;
  t8274 = t8257 + t1280;
  t8296 = -0.31508*t629;
  t8311 = -0.156996*t787;
  t8313 = t8296 + t8311;
  t8519 = -1.*t787*t7060;
  t8542 = -1.*t629*t7859;
  t8554 = t8519 + t8542;
  t8604 = -1.*t2497*t1654*t8554;
  t8610 = -1.*t1625*t2600*t8554;
  t8611 = t8604 + t8610;
  t8620 = t1625*t2497*t8554;
  t8636 = -1.*t1654*t2600*t8554;
  t8644 = t8620 + t8636;
  t8709 = -1.*t18*t852*t787;
  t8715 = -1.*t629*t8051;
  t8719 = t8709 + t8715;
  t8757 = -1.*t2497*t1654*t8719;
  t8768 = -1.*t1625*t2600*t8719;
  t8770 = t8757 + t8768;
  t8773 = t1625*t2497*t8719;
  t8776 = -1.*t1654*t2600*t8719;
  t8778 = t8773 + t8776;
  t8935 = -1.*t1654*t4247;
  t8948 = -1.*t1625*t4556;
  t8954 = t8935 + t8948;
  t8961 = t2600*t8954;
  t8963 = t8961 + t4761;
  t8972 = t2497*t8954;
  t8979 = -1.*t2600*t4661;
  t8982 = t8972 + t8979;
  t8861 = 0.38008*t1625;
  t8864 = t8861 + t2235;
  t8874 = -0.022225*t1625;
  t8901 = -0.38008*t1654;
  t8903 = t8874 + t8901;
  t8578 = t629*t7060;
  t8581 = -1.*t787*t7859;
  t8584 = t8578 + t8581;
  t9079 = t35*t18*t533;
  t9104 = t205*t7848;
  t9112 = t9079 + t9104;
  t9135 = -1.*t1654*t9112;
  t9138 = -1.*t1625*t8584;
  t9151 = t9135 + t9138;
  t9162 = t1625*t9112;
  t9167 = -1.*t1654*t8584;
  t9169 = t9162 + t9167;
  t9191 = t2600*t9151;
  t9195 = t2497*t9169;
  t9196 = t9191 + t9195;
  t9199 = t2497*t9151;
  t9223 = -1.*t2600*t9169;
  t9224 = t9199 + t9223;
  t8738 = t629*t18*t852;
  t8740 = -1.*t787*t8051;
  t8748 = t8738 + t8740;
  t9318 = -1.*t35*t859;
  t9335 = t18*t205*t939;
  t9341 = t9318 + t9335;
  t9361 = -1.*t1654*t9341;
  t9368 = -1.*t1625*t8748;
  t9376 = t9361 + t9368;
  t9381 = t1625*t9341;
  t9384 = -1.*t1654*t8748;
  t9386 = t9381 + t9384;
  t9390 = t2600*t9376;
  t9393 = t2497*t9386;
  t9394 = t9390 + t9393;
  t9403 = t2497*t9376;
  t9405 = -1.*t2600*t9386;
  t9407 = t9403 + t9405;
  t9499 = -1.*t2497*t4619;
  t9518 = t9499 + t8979;
  t4896 = t3070*t4767;
  t9456 = -0.022225*t2497;
  t9461 = -0.86008*t2600;
  t9469 = t9456 + t9461;
  t9485 = 0.86008*t2497;
  t9488 = t9485 + t2610;
  t9619 = t1654*t9112;
  t9640 = t1625*t8584;
  t9644 = t9619 + t9640;
  t9657 = -1.*t2600*t9644;
  t9668 = t9657 + t9195;
  t9684 = -1.*t2497*t9644;
  t9689 = t9684 + t9223;
  t9746 = t1654*t9341;
  t9769 = t1625*t8748;
  t9776 = t9746 + t9769;
  t9835 = -1.*t2600*t9776;
  t9841 = t9835 + t9393;
  t9856 = -1.*t2497*t9776;
  t9891 = t9856 + t9405;
  t9522 = -1.*t3224*t4767;
  t4972 = -1.*t3224*t4827;
  t5080 = t4896 + t4972;
  t10021 = 1.34008*t3070;
  t10025 = t10021 + t3368;
  t10027 = -0.021147*t3070;
  t10029 = -1.34008*t3224;
  t10030 = t10027 + t10029;
  t9695 = -1.*t3224*t9668;
  t10061 = t2497*t9644;
  t10069 = t2600*t9169;
  t10070 = t10061 + t10069;
  t9713 = t3070*t9668;
  t9920 = -1.*t3224*t9841;
  t10114 = t2497*t9776;
  t10117 = t2600*t9386;
  t10119 = t10114 + t10117;
  t9980 = t3070*t9841;

  p_output1(0)=1.;
  p_output1(1)=0;
  p_output1(2)=0;
  p_output1(3)=0;
  p_output1(4)=1.;
  p_output1(5)=0;
  p_output1(6)=0;
  p_output1(7)=0;
  p_output1(8)=1.;
  p_output1(9)=t1122*t1193 + t1285*t1435 + t1742*t1924 + t2272*t2447 + t2667*t2834 + t2980*t3034 + t3256*t3356 + t3373*t3397 - 1.400132*(t3224*t3356 + t3070*t3397) + 0.043805*(t3070*t3356 - 1.*t3224*t3397) - 1.*t18*t339*t533 - 0.166996*(t1435*t629 + t1000*t787) + t1000*t837;
  p_output1(10)=t1122*t3979 + t1285*t4032 + t1742*t4247 + t2272*t4556 + t2667*t4619 + t2980*t4661 + t3256*t4767 + t3373*t4827 - 1.400132*(t3224*t4767 + t3070*t4827) + 0.043805*t5080 - 0.166996*(t4032*t629 + t3848*t787) + t3848*t837 + t18*t339*t930;
  p_output1(11)=0;
  p_output1(12)=t1285*t5338 + t1742*t5389 + t2272*t5536 + t2667*t5604 + t2980*t5629 + t3256*t5729 + t3373*t5769 - 1.400132*(t3224*t5729 + t3070*t5769) + 0.043805*(t3070*t5729 - 1.*t3224*t5769) + t18*t837*t852*t930 - 1.*t339*t859*t930 - 0.166996*(t5338*t629 + t18*t787*t852*t930) + t1122*t18*t930*t939;
  p_output1(13)=t1285*t5909 + t1742*t5955 + t2272*t6064 + t2667*t6100 + t2980*t6132 + t3256*t6171 + t3373*t6257 - 1.400132*(t3224*t6171 + t3070*t6257) + 0.043805*(t3070*t6171 - 1.*t3224*t6257) + t18*t533*t837*t852 - 0.166996*(t5909*t629 + t18*t533*t787*t852) - 1.*t339*t533*t859 + t1122*t18*t533*t939;
  p_output1(14)=-1.*t18*t339 + t1285*t6417 + t1742*t6446 + t2272*t6504 + t2667*t6593 + t2980*t6664 + t3256*t6686 + t3373*t6709 - 1.400132*(t3224*t6686 + t3070*t6709) + 0.043805*(t3070*t6686 - 1.*t3224*t6709) - 1.*t837*t852*t859 - 0.166996*(t629*t6417 - 1.*t787*t852*t859) - 1.*t1122*t859*t939;
  p_output1(15)=t1122*t3848 + t1742*t205*t3848 + t1285*t35*t3848 + t2272*t6849 + t2667*t6893 + t2980*t6914 + t3256*t6949 + t3373*t6968 - 1.400132*(t3224*t6949 + t3070*t6968) + 0.043805*(t3070*t6949 - 1.*t3224*t6968) - 0.166996*(t35*t3848*t629 + t6814*t787) + t6814*t837;
  p_output1(16)=t1122*t7060 + t1742*t205*t7060 + t1285*t35*t7060 + t2272*t7117 + t2667*t7159 + t2980*t7177 + t3256*t7209 + t3373*t7255 - 1.400132*(t3224*t7209 + t3070*t7255) + 0.043805*(t3070*t7209 - 1.*t3224*t7255) - 0.166996*(t35*t629*t7060 + t1193*t787) + t1193*t837;
  p_output1(17)=t2272*t7384 + t2667*t7425 + t2980*t7447 + t3256*t7503 + t3373*t7518 - 1.400132*(t3224*t7503 + t3070*t7518) + 0.043805*(t3070*t7503 - 1.*t3224*t7518) + t1122*t18*t852 + t1742*t18*t205*t852 + t1285*t18*t35*t852 - 1.*t18*t837*t939 - 0.166996*(t18*t35*t629*t852 - 1.*t18*t787*t939);
  p_output1(18)=0;
  p_output1(19)=0;
  p_output1(20)=0;
  p_output1(21)=0;
  p_output1(22)=0;
  p_output1(23)=0;
  p_output1(24)=0;
  p_output1(25)=0;
  p_output1(26)=0;
  p_output1(27)=0;
  p_output1(28)=0;
  p_output1(29)=0;
  p_output1(30)=0;
  p_output1(31)=0;
  p_output1(32)=0;
  p_output1(33)=t1742*t4032 + t3979*t7630 + t1285*t7652 - 0.166996*t629*t7652 + t2667*t7681 + t2980*t7703 + t3256*t7735 + t3373*t7750 - 1.400132*(t3224*t7735 + t3070*t7750) + 0.043805*(t3070*t7735 - 1.*t3224*t7750) - 1.*t2272*t7652*t787 + t18*t7610*t930;
  p_output1(34)=t18*t533*t7610 + t7630*t7848 + t1742*t7859 + t1285*t7862 - 0.166996*t629*t7862 - 1.*t2272*t7862*t787 + t2667*t7878 + t2980*t7912 + t3256*t7926 + t3373*t7943 - 1.400132*(t3224*t7926 + t3070*t7943) + 0.043805*(t3070*t7926 - 1.*t3224*t7943);
  p_output1(35)=t1742*t8051 + t1285*t8065 - 0.166996*t629*t8065 - 1.*t2272*t787*t8065 + t2667*t8093 + t2980*t8125 + t3256*t8154 + t3373*t8159 - 1.400132*(t3224*t8154 + t3070*t8159) + 0.043805*(t3070*t8154 - 1.*t3224*t8159) - 1.*t7610*t859 + t18*t7630*t939;
  p_output1(36)=-0.166996*t4556 + t3848*t8274 + t4032*t8313 + t2272*t8331 + t1625*t2667*t8331 - 1.*t1654*t2980*t8331 + t3256*t8388 + t3373*t8411 - 1.400132*(t3224*t8388 + t3070*t8411) + 0.043805*(t3070*t8388 - 1.*t3224*t8411);
  p_output1(37)=t7060*t8274 + t7859*t8313 + t2272*t8554 + t1625*t2667*t8554 - 1.*t1654*t2980*t8554 - 0.166996*t8584 + t3256*t8611 + t3373*t8644 - 1.400132*(t3224*t8611 + t3070*t8644) + 0.043805*(t3070*t8611 - 1.*t3224*t8644);
  p_output1(38)=t8051*t8313 + t18*t8274*t852 + t2272*t8719 + t1625*t2667*t8719 - 1.*t1654*t2980*t8719 - 0.166996*t8748 + t3256*t8770 + t3373*t8778 - 1.400132*(t3224*t8770 + t3070*t8778) + 0.043805*(t3070*t8770 - 1.*t3224*t8778);
  p_output1(39)=t2667*t4661 + t4247*t8864 + t4556*t8903 + t2980*t8954 + t3373*t8963 + t3256*t8982 + 0.043805*(-1.*t3224*t8963 + t3070*t8982) - 1.400132*(t3070*t8963 + t3224*t8982);
  p_output1(40)=t8584*t8903 + t8864*t9112 + t2980*t9151 + t2667*t9169 + t3373*t9196 + t3256*t9224 + 0.043805*(-1.*t3224*t9196 + t3070*t9224) - 1.400132*(t3070*t9196 + t3224*t9224);
  p_output1(41)=t8748*t8903 + t8864*t9341 + t2980*t9376 + t2667*t9386 + t3373*t9394 + t3256*t9407 + 0.043805*(-1.*t3224*t9394 + t3070*t9407) - 1.400132*(t3070*t9394 + t3224*t9407);
  p_output1(42)=t3373*t4767 + t4619*t9469 + t4661*t9488 + t3256*t9518 - 1.400132*(t4896 + t3224*t9518) + 0.043805*(t3070*t9518 + t9522);
  p_output1(43)=t9169*t9488 + t9469*t9644 + t3373*t9668 + t3256*t9689 + 0.043805*(t3070*t9689 + t9695) - 1.400132*(t3224*t9689 + t9713);
  p_output1(44)=t9386*t9488 + t9469*t9776 + t3373*t9841 + t3256*t9891 + 0.043805*(t3070*t9891 + t9920) - 1.400132*(t3224*t9891 + t9980);
  p_output1(45)=t10025*t4767 + t10030*t4827 - 1.400132*t5080 + 0.043805*(-1.*t3070*t4827 + t9522);
  p_output1(46)=t10030*t10070 + t10025*t9668 + 0.043805*(-1.*t10070*t3070 + t9695) - 1.400132*(-1.*t10070*t3224 + t9713);
  p_output1(47)=t10030*t10119 + t10025*t9841 + 0.043805*(-1.*t10119*t3070 + t9920) - 1.400132*(-1.*t10119*t3224 + t9980);
}


       
void Jp_RightFootBack(Eigen::Matrix<double,3,16> &p_output1, const Eigen::Matrix<double,16,1> &var1)
{
  // Call Subroutines
  output1(p_output1, var1);

}
