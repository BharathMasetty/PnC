/*
 * Automatically Generated from Mathematica.
 * Thu 23 Aug 2018 15:50:29 GMT-05:00
 */
#include <stdio.h>
#include <stdlib.h>
#include <math.h>

#include "RobotSystem/RobotModel/Robot/Draco/DracoGen/kin_eigen/include/Jp_LeftFootBottom.h"

#ifdef _MSC_VER
  #define INLINE __forceinline /* use __forceinline (VC++ specific) */
#else
  #define INLINE inline        /* use standard inline */
#endif

/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
INLINE double Power(double x, double y) { return pow(x, y); }
INLINE double Sqrt(double x) { return sqrt(x); }

INLINE double Abs(double x) { return fabs(x); }

INLINE double Exp(double x) { return exp(x); }
INLINE double Log(double x) { return log(x); }

INLINE double Sin(double x) { return sin(x); }
INLINE double Cos(double x) { return cos(x); }
INLINE double Tan(double x) { return tan(x); }

INLINE double Csc(double x) { return 1.0/sin(x); }
INLINE double Sec(double x) { return 1.0/cos(x); }

INLINE double ArcSin(double x) { return asin(x); }
INLINE double ArcCos(double x) { return acos(x); }
//INLINE double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
INLINE double ArcTan(double x, double y) { return atan2(y,x); }

INLINE double Sinh(double x) { return sinh(x); }
INLINE double Cosh(double x) { return cosh(x); }
INLINE double Tanh(double x) { return tanh(x); }

#define E 2.71828182845904523536029
#define Pi 3.14159265358979323846264
#define Degree 0.01745329251994329576924

/*
 * Sub functions
 */
static void output1(Eigen::Matrix<double,3,16> &p_output1, const Eigen::Matrix<double,16,1> &var1)
{
  double t126;
  double t490;
  double t512;
  double t542;
  double t695;
  double t95;
  double t112;
  double t115;
  double t163;
  double t223;
  double t422;
  double t439;
  double t790;
  double t1137;
  double t1249;
  double t1454;
  double t1518;
  double t988;
  double t1026;
  double t1030;
  double t1625;
  double t1626;
  double t1676;
  double t2358;
  double t2463;
  double t2535;
  double t2640;
  double t2253;
  double t2263;
  double t2303;
  double t2717;
  double t2728;
  double t2739;
  double t2844;
  double t2855;
  double t2876;
  double t2896;
  double t3132;
  double t3181;
  double t3183;
  double t3319;
  double t3335;
  double t3424;
  double t3619;
  double t3639;
  double t3647;
  double t3729;
  double t3791;
  double t3792;
  double t3865;
  double t4044;
  double t4052;
  double t4090;
  double t588;
  double t698;
  double t745;
  double t854;
  double t863;
  double t865;
  double t4482;
  double t4519;
  double t4521;
  double t1487;
  double t1532;
  double t1584;
  double t1768;
  double t1870;
  double t1900;
  double t4580;
  double t4581;
  double t4590;
  double t4623;
  double t4643;
  double t4664;
  double t2561;
  double t2655;
  double t2662;
  double t2749;
  double t2797;
  double t2805;
  double t2878;
  double t3075;
  double t3116;
  double t5013;
  double t5026;
  double t5045;
  double t5191;
  double t5243;
  double t5272;
  double t3265;
  double t3274;
  double t3290;
  double t3682;
  double t3743;
  double t3753;
  double t5285;
  double t5305;
  double t5317;
  double t5323;
  double t5332;
  double t5346;
  double t3965;
  double t4031;
  double t4041;
  double t5373;
  double t5380;
  double t5420;
  double t5428;
  double t5481;
  double t5495;
  double t6070;
  double t6090;
  double t6098;
  double t6371;
  double t6387;
  double t6391;
  double t6408;
  double t6417;
  double t6427;
  double t6489;
  double t6494;
  double t6498;
  double t6511;
  double t6521;
  double t6556;
  double t6579;
  double t6589;
  double t6591;
  double t6602;
  double t6603;
  double t6611;
  double t6782;
  double t6813;
  double t6824;
  double t6901;
  double t6912;
  double t6927;
  double t6947;
  double t6953;
  double t6960;
  double t6974;
  double t6987;
  double t7005;
  double t7013;
  double t7031;
  double t7081;
  double t7107;
  double t7110;
  double t7127;
  double t7143;
  double t7149;
  double t7150;
  double t7256;
  double t7265;
  double t7279;
  double t7326;
  double t7343;
  double t7344;
  double t7368;
  double t7373;
  double t7382;
  double t7393;
  double t7404;
  double t7407;
  double t7417;
  double t7420;
  double t7422;
  double t7429;
  double t7431;
  double t7433;
  double t7437;
  double t7439;
  double t7441;
  double t7499;
  double t7505;
  double t7506;
  double t7560;
  double t7563;
  double t7566;
  double t7574;
  double t7581;
  double t7584;
  double t7591;
  double t7595;
  double t7598;
  double t7613;
  double t7616;
  double t7619;
  double t7648;
  double t7653;
  double t7655;
  double t7703;
  double t7706;
  double t7708;
  double t7765;
  double t7770;
  double t7773;
  double t7780;
  double t7786;
  double t7791;
  double t7800;
  double t7801;
  double t7803;
  double t7807;
  double t7809;
  double t7812;
  double t7819;
  double t7848;
  double t7851;
  double t7932;
  double t7935;
  double t7936;
  double t7959;
  double t7963;
  double t7967;
  double t7985;
  double t7986;
  double t7990;
  double t8000;
  double t8001;
  double t8002;
  double t8016;
  double t8023;
  double t8027;
  double t8099;
  double t8103;
  double t8105;
  double t8122;
  double t8130;
  double t8133;
  double t8138;
  double t8141;
  double t8144;
  double t8151;
  double t8155;
  double t8156;
  double t8165;
  double t8167;
  double t8168;
  double t8072;
  double t8082;
  double t8084;
  double t8086;
  double t8087;
  double t8224;
  double t8228;
  double t8232;
  double t8235;
  double t8237;
  double t8263;
  double t8265;
  double t8267;
  double t8286;
  double t8287;
  double t8289;
  double t8295;
  double t8298;
  double t8313;
  double t8318;
  double t8328;
  double t8330;
  double t8341;
  double t8352;
  double t8359;
  double t8431;
  double t8435;
  double t8437;
  double t8455;
  double t8462;
  double t8463;
  double t8482;
  double t8488;
  double t8490;
  double t8502;
  double t8507;
  double t8509;
  double t8520;
  double t8527;
  double t8532;
  double t8546;
  double t8547;
  double t8569;
  double t8614;
  double t8625;
  double t8627;
  double t8661;
  double t8667;
  double t8670;
  double t8683;
  double t8694;
  double t8696;
  double t8593;
  double t8597;
  double t8603;
  double t8608;
  double t8610;
  double t8732;
  double t8734;
  double t8742;
  double t8805;
  double t8808;
  double t8812;
  double t8819;
  double t8820;
  double t8821;
  double t8846;
  double t8855;
  double t8857;
  double t8911;
  double t8939;
  double t8940;
  double t8949;
  double t8953;
  double t8954;
  double t9086;
  double t9089;
  double t9092;
  double t9096;
  double t9098;
  double t9110;
  double t9115;
  double t9116;
  double t8748;
  double t8750;
  double t8756;
  double t9031;
  double t9038;
  double t9046;
  double t9053;
  double t9071;
  double t9186;
  double t9187;
  double t9193;
  double t9196;
  double t9208;
  double t9212;
  double t9217;
  double t9218;
  double t9221;
  double t9231;
  double t9235;
  double t9238;
  double t9251;
  double t9252;
  double t9264;
  double t8865;
  double t8897;
  double t8899;
  double t9335;
  double t9345;
  double t9354;
  double t9369;
  double t9373;
  double t9374;
  double t9386;
  double t9388;
  double t9389;
  double t9401;
  double t9408;
  double t9414;
  double t9424;
  double t9431;
  double t9453;
  double t9540;
  double t9543;
  double t5774;
  double t9516;
  double t9519;
  double t9521;
  double t9532;
  double t9533;
  double t9575;
  double t9579;
  double t9588;
  double t9604;
  double t9612;
  double t9625;
  double t9631;
  double t9682;
  double t9685;
  double t9691;
  double t9698;
  double t9706;
  double t9709;
  double t9711;
  double t9547;
  double t5783;
  double t5799;
  double t9730;
  double t9731;
  double t9736;
  double t9738;
  double t9739;
  double t9650;
  double t9750;
  double t9751;
  double t9752;
  double t9669;
  double t9713;
  double t9764;
  double t9765;
  double t9766;
  double t9718;
  t126 = Sin(var1[3]);
  t490 = Cos(var1[6]);
  t512 = -1.*t490;
  t542 = 1. + t512;
  t695 = Sin(var1[6]);
  t95 = Cos(var1[3]);
  t112 = Cos(var1[5]);
  t115 = -1.*t95*t112;
  t163 = Sin(var1[4]);
  t223 = Sin(var1[5]);
  t422 = -1.*t126*t163*t223;
  t439 = t115 + t422;
  t790 = Cos(var1[4]);
  t1137 = Cos(var1[7]);
  t1249 = -1.*t1137;
  t1454 = 1. + t1249;
  t1518 = Sin(var1[7]);
  t988 = t490*t439;
  t1026 = t790*t126*t695;
  t1030 = t988 + t1026;
  t1625 = -1.*t112*t126*t163;
  t1626 = t95*t223;
  t1676 = t1625 + t1626;
  t2358 = Cos(var1[8]);
  t2463 = -1.*t2358;
  t2535 = 1. + t2463;
  t2640 = Sin(var1[8]);
  t2253 = t1137*t1676;
  t2263 = -1.*t1030*t1518;
  t2303 = t2253 + t2263;
  t2717 = -1.*t790*t490*t126;
  t2728 = t439*t695;
  t2739 = t2717 + t2728;
  t2844 = Cos(var1[9]);
  t2855 = -1.*t2844;
  t2876 = 1. + t2855;
  t2896 = Sin(var1[9]);
  t3132 = t2358*t2303;
  t3181 = t2739*t2640;
  t3183 = t3132 + t3181;
  t3319 = t2358*t2739;
  t3335 = -1.*t2303*t2640;
  t3424 = t3319 + t3335;
  t3619 = Cos(var1[10]);
  t3639 = -1.*t3619;
  t3647 = 1. + t3639;
  t3729 = Sin(var1[10]);
  t3791 = -1.*t2896*t3183;
  t3792 = t2844*t3424;
  t3865 = t3791 + t3792;
  t4044 = t2844*t3183;
  t4052 = t2896*t3424;
  t4090 = t4044 + t4052;
  t588 = 0.087*t542;
  t698 = 0.0222*t695;
  t745 = 0. + t588 + t698;
  t854 = -0.0222*t542;
  t863 = 0.087*t695;
  t865 = 0. + t854 + t863;
  t4482 = -1.*t112*t126;
  t4519 = t95*t163*t223;
  t4521 = t4482 + t4519;
  t1487 = 0.157*t1454;
  t1532 = -0.3151*t1518;
  t1584 = 0. + t1487 + t1532;
  t1768 = -0.3151*t1454;
  t1870 = -0.157*t1518;
  t1900 = 0. + t1768 + t1870;
  t4580 = t490*t4521;
  t4581 = -1.*t95*t790*t695;
  t4590 = t4580 + t4581;
  t4623 = t95*t112*t163;
  t4643 = t126*t223;
  t4664 = t4623 + t4643;
  t2561 = -0.3801*t2535;
  t2655 = -0.0222*t2640;
  t2662 = 0. + t2561 + t2655;
  t2749 = -0.0222*t2535;
  t2797 = 0.3801*t2640;
  t2805 = 0. + t2749 + t2797;
  t2878 = -0.8601*t2876;
  t3075 = -0.0222*t2896;
  t3116 = 0. + t2878 + t3075;
  t5013 = t1137*t4664;
  t5026 = -1.*t4590*t1518;
  t5045 = t5013 + t5026;
  t5191 = t95*t790*t490;
  t5243 = t4521*t695;
  t5272 = t5191 + t5243;
  t3265 = -0.0222*t2876;
  t3274 = 0.8601*t2896;
  t3290 = 0. + t3265 + t3274;
  t3682 = -0.0211*t3647;
  t3743 = 1.3401*t3729;
  t3753 = 0. + t3682 + t3743;
  t5285 = t2358*t5045;
  t5305 = t5272*t2640;
  t5317 = t5285 + t5305;
  t5323 = t2358*t5272;
  t5332 = -1.*t5045*t2640;
  t5346 = t5323 + t5332;
  t3965 = -1.3401*t3647;
  t4031 = -0.0211*t3729;
  t4041 = 0. + t3965 + t4031;
  t5373 = -1.*t2896*t5317;
  t5380 = t2844*t5346;
  t5420 = t5373 + t5380;
  t5428 = t2844*t5317;
  t5481 = t2896*t5346;
  t5495 = t5428 + t5481;
  t6070 = t95*t790*t490*t223;
  t6090 = t95*t163*t695;
  t6098 = t6070 + t6090;
  t6371 = t95*t790*t112*t1137;
  t6387 = -1.*t6098*t1518;
  t6391 = t6371 + t6387;
  t6408 = -1.*t95*t490*t163;
  t6417 = t95*t790*t223*t695;
  t6427 = t6408 + t6417;
  t6489 = t2358*t6391;
  t6494 = t6427*t2640;
  t6498 = t6489 + t6494;
  t6511 = t2358*t6427;
  t6521 = -1.*t6391*t2640;
  t6556 = t6511 + t6521;
  t6579 = -1.*t2896*t6498;
  t6589 = t2844*t6556;
  t6591 = t6579 + t6589;
  t6602 = t2844*t6498;
  t6603 = t2896*t6556;
  t6611 = t6602 + t6603;
  t6782 = t790*t490*t126*t223;
  t6813 = t126*t163*t695;
  t6824 = t6782 + t6813;
  t6901 = t790*t112*t1137*t126;
  t6912 = -1.*t6824*t1518;
  t6927 = t6901 + t6912;
  t6947 = -1.*t490*t126*t163;
  t6953 = t790*t126*t223*t695;
  t6960 = t6947 + t6953;
  t6974 = t2358*t6927;
  t6987 = t6960*t2640;
  t7005 = t6974 + t6987;
  t7013 = t2358*t6960;
  t7031 = -1.*t6927*t2640;
  t7081 = t7013 + t7031;
  t7107 = -1.*t2896*t7005;
  t7110 = t2844*t7081;
  t7127 = t7107 + t7110;
  t7143 = t2844*t7005;
  t7149 = t2896*t7081;
  t7150 = t7143 + t7149;
  t7256 = -1.*t490*t163*t223;
  t7265 = t790*t695;
  t7279 = t7256 + t7265;
  t7326 = -1.*t112*t1137*t163;
  t7343 = -1.*t7279*t1518;
  t7344 = t7326 + t7343;
  t7368 = -1.*t790*t490;
  t7373 = -1.*t163*t223*t695;
  t7382 = t7368 + t7373;
  t7393 = t2358*t7344;
  t7404 = t7382*t2640;
  t7407 = t7393 + t7404;
  t7417 = t2358*t7382;
  t7420 = -1.*t7344*t2640;
  t7422 = t7417 + t7420;
  t7429 = -1.*t2896*t7407;
  t7431 = t2844*t7422;
  t7433 = t7429 + t7431;
  t7437 = t2844*t7407;
  t7439 = t2896*t7422;
  t7441 = t7437 + t7439;
  t7499 = t112*t126;
  t7505 = -1.*t95*t163*t223;
  t7506 = t7499 + t7505;
  t7560 = t1137*t7506;
  t7563 = -1.*t490*t4664*t1518;
  t7566 = t7560 + t7563;
  t7574 = t2358*t7566;
  t7581 = t4664*t695*t2640;
  t7584 = t7574 + t7581;
  t7591 = t2358*t4664*t695;
  t7595 = -1.*t7566*t2640;
  t7598 = t7591 + t7595;
  t7613 = -1.*t2896*t7584;
  t7616 = t2844*t7598;
  t7619 = t7613 + t7616;
  t7648 = t2844*t7584;
  t7653 = t2896*t7598;
  t7655 = t7648 + t7653;
  t7703 = t112*t126*t163;
  t7706 = -1.*t95*t223;
  t7708 = t7703 + t7706;
  t7765 = t1137*t439;
  t7770 = -1.*t490*t7708*t1518;
  t7773 = t7765 + t7770;
  t7780 = t2358*t7773;
  t7786 = t7708*t695*t2640;
  t7791 = t7780 + t7786;
  t7800 = t2358*t7708*t695;
  t7801 = -1.*t7773*t2640;
  t7803 = t7800 + t7801;
  t7807 = -1.*t2896*t7791;
  t7809 = t2844*t7803;
  t7812 = t7807 + t7809;
  t7819 = t2844*t7791;
  t7848 = t2896*t7803;
  t7851 = t7819 + t7848;
  t7932 = -1.*t790*t1137*t223;
  t7935 = -1.*t790*t112*t490*t1518;
  t7936 = t7932 + t7935;
  t7959 = t2358*t7936;
  t7963 = t790*t112*t695*t2640;
  t7967 = t7959 + t7963;
  t7985 = t790*t112*t2358*t695;
  t7986 = -1.*t7936*t2640;
  t7990 = t7985 + t7986;
  t8000 = -1.*t2896*t7967;
  t8001 = t2844*t7990;
  t8002 = t8000 + t8001;
  t8016 = t2844*t7967;
  t8023 = t2896*t7990;
  t8027 = t8016 + t8023;
  t8099 = -1.*t95*t790*t490;
  t8103 = -1.*t4521*t695;
  t8105 = t8099 + t8103;
  t8122 = -1.*t2358*t8105*t1518;
  t8130 = t4590*t2640;
  t8133 = t8122 + t8130;
  t8138 = t2358*t4590;
  t8141 = t8105*t1518*t2640;
  t8144 = t8138 + t8141;
  t8151 = -1.*t2896*t8133;
  t8155 = t2844*t8144;
  t8156 = t8151 + t8155;
  t8165 = t2844*t8133;
  t8167 = t2896*t8144;
  t8168 = t8165 + t8167;
  t8072 = 0.087*t490;
  t8082 = -0.0222*t695;
  t8084 = t8072 + t8082;
  t8086 = 0.0222*t490;
  t8087 = t8086 + t863;
  t8224 = t95*t112;
  t8228 = t126*t163*t223;
  t8232 = t8224 + t8228;
  t8235 = -1.*t8232*t695;
  t8237 = t2717 + t8235;
  t8263 = t490*t8232;
  t8265 = -1.*t790*t126*t695;
  t8267 = t8263 + t8265;
  t8286 = -1.*t2358*t8237*t1518;
  t8287 = t8267*t2640;
  t8289 = t8286 + t8287;
  t8295 = t2358*t8267;
  t8298 = t8237*t1518*t2640;
  t8313 = t8295 + t8298;
  t8318 = -1.*t2896*t8289;
  t8328 = t2844*t8313;
  t8330 = t8318 + t8328;
  t8341 = t2844*t8289;
  t8352 = t2896*t8313;
  t8359 = t8341 + t8352;
  t8431 = t490*t163;
  t8435 = -1.*t790*t223*t695;
  t8437 = t8431 + t8435;
  t8455 = t790*t490*t223;
  t8462 = t163*t695;
  t8463 = t8455 + t8462;
  t8482 = -1.*t2358*t8437*t1518;
  t8488 = t8463*t2640;
  t8490 = t8482 + t8488;
  t8502 = t2358*t8463;
  t8507 = t8437*t1518*t2640;
  t8509 = t8502 + t8507;
  t8520 = -1.*t2896*t8490;
  t8527 = t2844*t8509;
  t8532 = t8520 + t8527;
  t8546 = t2844*t8490;
  t8547 = t2896*t8509;
  t8569 = t8546 + t8547;
  t8614 = -1.*t1137*t4590;
  t8625 = -1.*t4664*t1518;
  t8627 = t8614 + t8625;
  t8661 = -1.*t2358*t2896*t8627;
  t8667 = -1.*t2844*t8627*t2640;
  t8670 = t8661 + t8667;
  t8683 = t2844*t2358*t8627;
  t8694 = -1.*t2896*t8627*t2640;
  t8696 = t8683 + t8694;
  t8593 = -0.157*t1137;
  t8597 = t8593 + t1532;
  t8603 = -0.3151*t1137;
  t8608 = 0.157*t1518;
  t8610 = t8603 + t8608;
  t8732 = -1.*t1137*t8267;
  t8734 = -1.*t7708*t1518;
  t8742 = t8732 + t8734;
  t8805 = -1.*t2358*t2896*t8742;
  t8808 = -1.*t2844*t8742*t2640;
  t8812 = t8805 + t8808;
  t8819 = t2844*t2358*t8742;
  t8820 = -1.*t2896*t8742*t2640;
  t8821 = t8819 + t8820;
  t8846 = -1.*t1137*t8463;
  t8855 = -1.*t790*t112*t1518;
  t8857 = t8846 + t8855;
  t8911 = -1.*t2358*t2896*t8857;
  t8939 = -1.*t2844*t8857*t2640;
  t8940 = t8911 + t8939;
  t8949 = t2844*t2358*t8857;
  t8953 = -1.*t2896*t8857*t2640;
  t8954 = t8949 + t8953;
  t9086 = -1.*t2358*t5045;
  t9089 = -1.*t5272*t2640;
  t9092 = t9086 + t9089;
  t9096 = t2896*t9092;
  t9098 = t9096 + t5380;
  t9110 = t2844*t9092;
  t9115 = -1.*t2896*t5346;
  t9116 = t9110 + t9115;
  t8748 = t1137*t7708;
  t8750 = -1.*t8267*t1518;
  t8756 = t8748 + t8750;
  t9031 = -0.0222*t2358;
  t9038 = -0.3801*t2640;
  t9046 = t9031 + t9038;
  t9053 = 0.3801*t2358;
  t9071 = t9053 + t2655;
  t9186 = t790*t490*t126;
  t9187 = t8232*t695;
  t9193 = t9186 + t9187;
  t9196 = -1.*t2358*t8756;
  t9208 = -1.*t9193*t2640;
  t9212 = t9196 + t9208;
  t9217 = t2358*t9193;
  t9218 = -1.*t8756*t2640;
  t9221 = t9217 + t9218;
  t9231 = t2896*t9212;
  t9235 = t2844*t9221;
  t9238 = t9231 + t9235;
  t9251 = t2844*t9212;
  t9252 = -1.*t2896*t9221;
  t9264 = t9251 + t9252;
  t8865 = t790*t112*t1137;
  t8897 = -1.*t8463*t1518;
  t8899 = t8865 + t8897;
  t9335 = -1.*t490*t163;
  t9345 = t790*t223*t695;
  t9354 = t9335 + t9345;
  t9369 = -1.*t2358*t8899;
  t9373 = -1.*t9354*t2640;
  t9374 = t9369 + t9373;
  t9386 = t2358*t9354;
  t9388 = -1.*t8899*t2640;
  t9389 = t9386 + t9388;
  t9401 = t2896*t9374;
  t9408 = t2844*t9389;
  t9414 = t9401 + t9408;
  t9424 = t2844*t9374;
  t9431 = -1.*t2896*t9389;
  t9453 = t9424 + t9431;
  t9540 = -1.*t2844*t5317;
  t9543 = t9540 + t9115;
  t5774 = t3619*t5420;
  t9516 = -0.0222*t2844;
  t9519 = -0.8601*t2896;
  t9521 = t9516 + t9519;
  t9532 = 0.8601*t2844;
  t9533 = t9532 + t3075;
  t9575 = t2358*t8756;
  t9579 = t9193*t2640;
  t9588 = t9575 + t9579;
  t9604 = -1.*t2896*t9588;
  t9612 = t9604 + t9235;
  t9625 = -1.*t2844*t9588;
  t9631 = t9625 + t9252;
  t9682 = t2358*t8899;
  t9685 = t9354*t2640;
  t9691 = t9682 + t9685;
  t9698 = -1.*t2896*t9691;
  t9706 = t9698 + t9408;
  t9709 = -1.*t2844*t9691;
  t9711 = t9709 + t9431;
  t9547 = -1.*t3729*t5420;
  t5783 = -1.*t3729*t5495;
  t5799 = t5774 + t5783;
  t9730 = 1.3401*t3619;
  t9731 = t9730 + t4031;
  t9736 = -0.0211*t3619;
  t9738 = -1.3401*t3729;
  t9739 = t9736 + t9738;
  t9650 = -1.*t3729*t9612;
  t9750 = t2844*t9588;
  t9751 = t2896*t9221;
  t9752 = t9750 + t9751;
  t9669 = t3619*t9612;
  t9713 = -1.*t3729*t9706;
  t9764 = t2844*t9691;
  t9765 = t2896*t9389;
  t9766 = t9764 + t9765;
  t9718 = t3619*t9706;

  p_output1(0)=1.;
  p_output1(1)=0;
  p_output1(2)=0;
  p_output1(3)=0;
  p_output1(4)=1.;
  p_output1(5)=0;
  p_output1(6)=0;
  p_output1(7)=0;
  p_output1(8)=1.;
  p_output1(9)=t1030*t1584 + 0.167*(t1030*t1137 + t1518*t1676) + t1676*t1900 + t2303*t2662 + t2739*t2805 + t3116*t3183 + t3290*t3424 + t3753*t3865 + t4041*t4090 - 1.325152*(t3729*t3865 + t3619*t4090) + 0.043912*(t3619*t3865 - 1.*t3729*t4090) + t439*t745 - 1.*t126*t790*t865;
  p_output1(10)=t1584*t4590 + t1900*t4664 + 0.167*(t1137*t4590 + t1518*t4664) + t2662*t5045 + t2805*t5272 + t3116*t5317 + t3290*t5346 + t3753*t5420 + t4041*t5495 - 1.325152*(t3729*t5420 + t3619*t5495) + 0.043912*t5799 + t4521*t745 + t790*t865*t95;
  p_output1(11)=0;
  p_output1(12)=t1584*t6098 + t2662*t6391 + t2805*t6427 + t3116*t6498 + t3290*t6556 + t3753*t6591 + t4041*t6611 - 1.325152*(t3729*t6591 + t3619*t6611) + 0.043912*(t3619*t6591 - 1.*t3729*t6611) + t112*t1900*t790*t95 + t223*t745*t790*t95 - 1.*t163*t865*t95 + 0.167*(t1137*t6098 + t112*t1518*t790*t95);
  p_output1(13)=t1584*t6824 + t2662*t6927 + t2805*t6960 + t3116*t7005 + t3290*t7081 + t3753*t7127 + t4041*t7150 - 1.325152*(t3729*t7127 + t3619*t7150) + 0.043912*(t3619*t7127 - 1.*t3729*t7150) + t112*t126*t1900*t790 + t126*t223*t745*t790 + 0.167*(t1137*t6824 + t112*t126*t1518*t790) - 1.*t126*t163*t865;
  p_output1(14)=-1.*t112*t163*t1900 + t1584*t7279 + 0.167*(-1.*t112*t1518*t163 + t1137*t7279) + t2662*t7344 + t2805*t7382 + t3116*t7407 + t3290*t7422 + t3753*t7433 + t4041*t7441 - 1.325152*(t3729*t7433 + t3619*t7441) + 0.043912*(t3619*t7433 - 1.*t3729*t7441) - 1.*t163*t223*t745 - 1.*t790*t865;
  p_output1(15)=t1584*t4664*t490 + t2805*t4664*t695 + t4664*t745 + t1900*t7506 + 0.167*(t1137*t4664*t490 + t1518*t7506) + t2662*t7566 + t3116*t7584 + t3290*t7598 + t3753*t7619 + t4041*t7655 - 1.325152*(t3729*t7619 + t3619*t7655) + 0.043912*(t3619*t7619 - 1.*t3729*t7655);
  p_output1(16)=t1900*t439 + t1584*t490*t7708 + t2805*t695*t7708 + t745*t7708 + 0.167*(t1518*t439 + t1137*t490*t7708) + t2662*t7773 + t3116*t7791 + t3290*t7803 + t3753*t7812 + t4041*t7851 - 1.325152*(t3729*t7812 + t3619*t7851) + 0.043912*(t3619*t7812 - 1.*t3729*t7851);
  p_output1(17)=-1.*t1900*t223*t790 + t112*t1584*t490*t790 + t112*t2805*t695*t790 + t112*t745*t790 + 0.167*(-1.*t1518*t223*t790 + t112*t1137*t490*t790) + t2662*t7936 + t3116*t7967 + t3290*t7990 + t3753*t8002 + t4041*t8027 - 1.325152*(t3729*t8002 + t3619*t8027) + 0.043912*(t3619*t8002 - 1.*t3729*t8027);
  p_output1(18)=t2805*t4590 + t4521*t8087 + 0.167*t1137*t8105 + t1584*t8105 - 1.*t1518*t2662*t8105 + t3116*t8133 + t3290*t8144 + t3753*t8156 + t4041*t8168 - 1.325152*(t3729*t8156 + t3619*t8168) + 0.043912*(t3619*t8156 - 1.*t3729*t8168) + t790*t8084*t95;
  p_output1(19)=t126*t790*t8084 + t8087*t8232 + 0.167*t1137*t8237 + t1584*t8237 - 1.*t1518*t2662*t8237 + t2805*t8267 + t3116*t8289 + t3290*t8313 + t3753*t8330 + t4041*t8359 - 1.325152*(t3729*t8330 + t3619*t8359) + 0.043912*(t3619*t8330 - 1.*t3729*t8359);
  p_output1(20)=-1.*t163*t8084 + t223*t790*t8087 + 0.167*t1137*t8437 + t1584*t8437 - 1.*t1518*t2662*t8437 + t2805*t8463 + t3116*t8490 + t3290*t8509 + t3753*t8532 + t4041*t8569 - 1.325152*(t3729*t8532 + t3619*t8569) + 0.043912*(t3619*t8532 - 1.*t3729*t8569);
  p_output1(21)=0.167*t5045 + t4664*t8597 + t4590*t8610 + t2662*t8627 + t2358*t3116*t8627 - 1.*t2640*t3290*t8627 + t3753*t8670 + t4041*t8696 - 1.325152*(t3729*t8670 + t3619*t8696) + 0.043912*(t3619*t8670 - 1.*t3729*t8696);
  p_output1(22)=t7708*t8597 + t8267*t8610 + t2662*t8742 + t2358*t3116*t8742 - 1.*t2640*t3290*t8742 + 0.167*t8756 + t3753*t8812 + t4041*t8821 - 1.325152*(t3729*t8812 + t3619*t8821) + 0.043912*(t3619*t8812 - 1.*t3729*t8821);
  p_output1(23)=t112*t790*t8597 + t8463*t8610 + t2662*t8857 + t2358*t3116*t8857 - 1.*t2640*t3290*t8857 + 0.167*t8899 + t3753*t8940 + t4041*t8954 - 1.325152*(t3729*t8940 + t3619*t8954) + 0.043912*(t3619*t8940 - 1.*t3729*t8954);
  p_output1(24)=t3116*t5346 + t5045*t9046 + t5272*t9071 + t3290*t9092 + t4041*t9098 + t3753*t9116 + 0.043912*(-1.*t3729*t9098 + t3619*t9116) - 1.325152*(t3619*t9098 + t3729*t9116);
  p_output1(25)=t8756*t9046 + t9071*t9193 + t3290*t9212 + t3116*t9221 + t4041*t9238 + t3753*t9264 + 0.043912*(-1.*t3729*t9238 + t3619*t9264) - 1.325152*(t3619*t9238 + t3729*t9264);
  p_output1(26)=t8899*t9046 + t9071*t9354 + t3290*t9374 + t3116*t9389 + t4041*t9414 + t3753*t9453 + 0.043912*(-1.*t3729*t9414 + t3619*t9453) - 1.325152*(t3619*t9414 + t3729*t9453);
  p_output1(27)=t4041*t5420 + t5317*t9521 + t5346*t9533 + t3753*t9543 - 1.325152*(t5774 + t3729*t9543) + 0.043912*(t3619*t9543 + t9547);
  p_output1(28)=t9221*t9533 + t9521*t9588 + t4041*t9612 + t3753*t9631 + 0.043912*(t3619*t9631 + t9650) - 1.325152*(t3729*t9631 + t9669);
  p_output1(29)=t9389*t9533 + t9521*t9691 + t4041*t9706 + t3753*t9711 + 0.043912*(t3619*t9711 + t9713) - 1.325152*(t3729*t9711 + t9718);
  p_output1(30)=-1.325152*t5799 + 0.043912*(-1.*t3619*t5495 + t9547) + t5420*t9731 + t5495*t9739;
  p_output1(31)=t9612*t9731 + t9739*t9752 + 0.043912*(t9650 - 1.*t3619*t9752) - 1.325152*(t9669 - 1.*t3729*t9752);
  p_output1(32)=t9706*t9731 + t9739*t9766 + 0.043912*(t9713 - 1.*t3619*t9766) - 1.325152*(t9718 - 1.*t3729*t9766);
  p_output1(33)=0;
  p_output1(34)=0;
  p_output1(35)=0;
  p_output1(36)=0;
  p_output1(37)=0;
  p_output1(38)=0;
  p_output1(39)=0;
  p_output1(40)=0;
  p_output1(41)=0;
  p_output1(42)=0;
  p_output1(43)=0;
  p_output1(44)=0;
  p_output1(45)=0;
  p_output1(46)=0;
  p_output1(47)=0;
}


       
void Jp_LeftFootBottom(Eigen::Matrix<double,3,16> &p_output1, const Eigen::Matrix<double,16,1> &var1)
{
  // Call Subroutines
  output1(p_output1, var1);

}
