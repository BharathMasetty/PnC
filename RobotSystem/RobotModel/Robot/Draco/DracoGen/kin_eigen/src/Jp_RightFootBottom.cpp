/*
 * Automatically Generated from Mathematica.
 * Thu 16 Aug 2018 23:22:00 GMT-05:00
 */
#include <stdio.h>
#include <stdlib.h>
#include <math.h>

#include "Jp_RightFootBottom.h"

#ifdef _MSC_VER
  #define INLINE __forceinline /* use __forceinline (VC++ specific) */
#else
  #define INLINE inline        /* use standard inline */
#endif

/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
INLINE double Power(double x, double y) { return pow(x, y); }
INLINE double Sqrt(double x) { return sqrt(x); }

INLINE double Abs(double x) { return fabs(x); }

INLINE double Exp(double x) { return exp(x); }
INLINE double Log(double x) { return log(x); }

INLINE double Sin(double x) { return sin(x); }
INLINE double Cos(double x) { return cos(x); }
INLINE double Tan(double x) { return tan(x); }

INLINE double Csc(double x) { return 1.0/sin(x); }
INLINE double Sec(double x) { return 1.0/cos(x); }

INLINE double ArcSin(double x) { return asin(x); }
INLINE double ArcCos(double x) { return acos(x); }
//INLINE double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
INLINE double ArcTan(double x, double y) { return atan2(y,x); }

INLINE double Sinh(double x) { return sinh(x); }
INLINE double Cosh(double x) { return cosh(x); }
INLINE double Tanh(double x) { return tanh(x); }

#define E 2.71828182845904523536029
#define Pi 3.14159265358979323846264
#define Degree 0.01745329251994329576924

/*
 * Sub functions
 */
static void output1(Eigen::Matrix<double,3,16> &p_output1, const Eigen::Matrix<double,16,1> &var1)
{
  double t296;
  double t39;
  double t91;
  double t212;
  double t268;
  double t757;
  double t671;
  double t725;
  double t805;
  double t347;
  double t375;
  double t382;
  double t476;
  double t8;
  double t1348;
  double t1360;
  double t1405;
  double t729;
  double t806;
  double t945;
  double t1697;
  double t1724;
  double t1734;
  double t1800;
  double t1801;
  double t1808;
  double t1898;
  double t2200;
  double t2226;
  double t2338;
  double t2659;
  double t2704;
  double t2716;
  double t2787;
  double t2836;
  double t2887;
  double t2912;
  double t2969;
  double t2981;
  double t3004;
  double t3163;
  double t3167;
  double t3179;
  double t3324;
  double t3325;
  double t3402;
  double t3442;
  double t3479;
  double t3528;
  double t3576;
  double t3651;
  double t3669;
  double t3687;
  double t263;
  double t281;
  double t286;
  double t411;
  double t506;
  double t508;
  double t1149;
  double t1168;
  double t1260;
  double t1547;
  double t1586;
  double t1608;
  double t4384;
  double t4387;
  double t4438;
  double t1835;
  double t2012;
  double t2074;
  double t4051;
  double t4244;
  double t4297;
  double t4493;
  double t4494;
  double t4564;
  double t2486;
  double t2547;
  double t2556;
  double t2895;
  double t2935;
  double t2966;
  double t4676;
  double t4683;
  double t4702;
  double t4823;
  double t4835;
  double t4842;
  double t3046;
  double t3101;
  double t3126;
  double t3436;
  double t3455;
  double t3478;
  double t4872;
  double t4891;
  double t4893;
  double t4926;
  double t5002;
  double t5050;
  double t3586;
  double t3632;
  double t3636;
  double t5062;
  double t5117;
  double t5119;
  double t5218;
  double t5266;
  double t5271;
  double t5464;
  double t5480;
  double t5483;
  double t5558;
  double t5563;
  double t5574;
  double t5684;
  double t5707;
  double t5711;
  double t5718;
  double t5721;
  double t5755;
  double t5788;
  double t5790;
  double t5828;
  double t5893;
  double t5907;
  double t5910;
  double t5965;
  double t5968;
  double t5971;
  double t6216;
  double t6221;
  double t6232;
  double t6298;
  double t6330;
  double t6332;
  double t6417;
  double t6451;
  double t6452;
  double t6504;
  double t6507;
  double t6516;
  double t6540;
  double t6575;
  double t6584;
  double t6622;
  double t6623;
  double t6633;
  double t6637;
  double t6640;
  double t6644;
  double t6815;
  double t6826;
  double t6831;
  double t6836;
  double t6842;
  double t6852;
  double t6885;
  double t6890;
  double t6916;
  double t6935;
  double t6941;
  double t6943;
  double t6954;
  double t6958;
  double t6962;
  double t6970;
  double t6971;
  double t6991;
  double t6999;
  double t7001;
  double t7002;
  double t7111;
  double t7135;
  double t7159;
  double t7177;
  double t7200;
  double t7229;
  double t7268;
  double t7269;
  double t7276;
  double t7291;
  double t7293;
  double t7301;
  double t7323;
  double t7325;
  double t7329;
  double t7355;
  double t7358;
  double t7381;
  double t7473;
  double t7486;
  double t7491;
  double t7529;
  double t7530;
  double t7538;
  double t7564;
  double t7570;
  double t7574;
  double t7577;
  double t7579;
  double t7587;
  double t7607;
  double t7608;
  double t7613;
  double t7627;
  double t7633;
  double t7638;
  double t7739;
  double t7741;
  double t7753;
  double t7803;
  double t7806;
  double t7807;
  double t7833;
  double t7835;
  double t7844;
  double t7850;
  double t7853;
  double t7855;
  double t7860;
  double t7862;
  double t7864;
  double t7986;
  double t7996;
  double t8002;
  double t8021;
  double t8023;
  double t8028;
  double t8035;
  double t8039;
  double t8064;
  double t8073;
  double t8093;
  double t8094;
  double t8103;
  double t8105;
  double t8108;
  double t7915;
  double t7920;
  double t7932;
  double t7961;
  double t7966;
  double t8170;
  double t8196;
  double t8198;
  double t8251;
  double t8258;
  double t8210;
  double t8215;
  double t8234;
  double t8293;
  double t8294;
  double t8301;
  double t8311;
  double t8313;
  double t8321;
  double t8330;
  double t8333;
  double t8336;
  double t8353;
  double t8354;
  double t8357;
  double t8520;
  double t8522;
  double t8528;
  double t8506;
  double t8509;
  double t8518;
  double t8542;
  double t8544;
  double t8556;
  double t8561;
  double t8571;
  double t8573;
  double t8585;
  double t8601;
  double t8602;
  double t8620;
  double t8636;
  double t8641;
  double t8741;
  double t8744;
  double t8753;
  double t8775;
  double t8777;
  double t8779;
  double t8787;
  double t8792;
  double t8809;
  double t8705;
  double t8706;
  double t8719;
  double t8724;
  double t8726;
  double t8882;
  double t8892;
  double t8894;
  double t8923;
  double t8925;
  double t8926;
  double t8933;
  double t8936;
  double t8942;
  double t9058;
  double t9074;
  double t9078;
  double t9136;
  double t9137;
  double t9139;
  double t9141;
  double t9142;
  double t9164;
  double t9292;
  double t9301;
  double t9308;
  double t9322;
  double t9323;
  double t9343;
  double t9344;
  double t9346;
  double t9262;
  double t9266;
  double t9275;
  double t9282;
  double t9284;
  double t8907;
  double t8912;
  double t8920;
  double t9441;
  double t9442;
  double t9448;
  double t9453;
  double t9454;
  double t9460;
  double t9464;
  double t9474;
  double t9480;
  double t9496;
  double t9510;
  double t9516;
  double t9539;
  double t9548;
  double t9575;
  double t9096;
  double t9110;
  double t9130;
  double t9693;
  double t9700;
  double t9703;
  double t9744;
  double t9748;
  double t9755;
  double t9780;
  double t9786;
  double t9813;
  double t9820;
  double t9837;
  double t9840;
  double t9845;
  double t9861;
  double t9862;
  double t10015;
  double t10020;
  double t5373;
  double t9967;
  double t9976;
  double t9980;
  double t9998;
  double t10000;
  double t10039;
  double t10041;
  double t10042;
  double t10046;
  double t10047;
  double t10051;
  double t10052;
  double t10071;
  double t10073;
  double t10074;
  double t10080;
  double t10082;
  double t10084;
  double t10087;
  double t10024;
  double t5381;
  double t5397;
  double t10104;
  double t10105;
  double t10108;
  double t10109;
  double t10110;
  double t10058;
  double t10118;
  double t10119;
  double t10120;
  double t10065;
  double t10089;
  double t10131;
  double t10132;
  double t10133;
  double t10094;
  t296 = Sin(var1[3]);
  t39 = Cos(var1[11]);
  t91 = -1.*t39;
  t212 = 1. + t91;
  t268 = Sin(var1[11]);
  t757 = Cos(var1[3]);
  t671 = Cos(var1[5]);
  t725 = Sin(var1[4]);
  t805 = Sin(var1[5]);
  t347 = Cos(var1[12]);
  t375 = -1.*t347;
  t382 = 1. + t375;
  t476 = Sin(var1[12]);
  t8 = Cos(var1[4]);
  t1348 = -1.*t757*t671;
  t1360 = -1.*t296*t725*t805;
  t1405 = t1348 + t1360;
  t729 = -1.*t671*t296*t725;
  t806 = t757*t805;
  t945 = t729 + t806;
  t1697 = t8*t268*t296;
  t1724 = t39*t1405;
  t1734 = t1697 + t1724;
  t1800 = Cos(var1[13]);
  t1801 = -1.*t1800;
  t1808 = 1. + t1801;
  t1898 = Sin(var1[13]);
  t2200 = -1.*t39*t8*t296;
  t2226 = t268*t1405;
  t2338 = t2200 + t2226;
  t2659 = t347*t945;
  t2704 = -1.*t476*t1734;
  t2716 = t2659 + t2704;
  t2787 = Cos(var1[14]);
  t2836 = -1.*t2787;
  t2887 = 1. + t2836;
  t2912 = Sin(var1[14]);
  t2969 = t1898*t2338;
  t2981 = t1800*t2716;
  t3004 = t2969 + t2981;
  t3163 = t1800*t2338;
  t3167 = -1.*t1898*t2716;
  t3179 = t3163 + t3167;
  t3324 = Cos(var1[15]);
  t3325 = -1.*t3324;
  t3402 = 1. + t3325;
  t3442 = Sin(var1[15]);
  t3479 = -1.*t2912*t3004;
  t3528 = t2787*t3179;
  t3576 = t3479 + t3528;
  t3651 = t2787*t3004;
  t3669 = t2912*t3179;
  t3687 = t3651 + t3669;
  t263 = -0.022225*t212;
  t281 = -0.086996*t268;
  t286 = 0. + t263 + t281;
  t411 = -0.31508*t382;
  t506 = 0.156996*t476;
  t508 = 0. + t411 + t506;
  t1149 = -0.086996*t212;
  t1168 = 0.022225*t268;
  t1260 = 0. + t1149 + t1168;
  t1547 = -0.156996*t382;
  t1586 = -0.31508*t476;
  t1608 = 0. + t1547 + t1586;
  t4384 = -1.*t671*t296;
  t4387 = t757*t725*t805;
  t4438 = t4384 + t4387;
  t1835 = -0.022225*t1808;
  t2012 = 0.38008*t1898;
  t2074 = 0. + t1835 + t2012;
  t4051 = t757*t671*t725;
  t4244 = t296*t805;
  t4297 = t4051 + t4244;
  t4493 = -1.*t757*t8*t268;
  t4494 = t39*t4438;
  t4564 = t4493 + t4494;
  t2486 = -0.38008*t1808;
  t2547 = -0.022225*t1898;
  t2556 = 0. + t2486 + t2547;
  t2895 = -0.86008*t2887;
  t2935 = -0.022225*t2912;
  t2966 = 0. + t2895 + t2935;
  t4676 = t39*t757*t8;
  t4683 = t268*t4438;
  t4702 = t4676 + t4683;
  t4823 = t347*t4297;
  t4835 = -1.*t476*t4564;
  t4842 = t4823 + t4835;
  t3046 = -0.022225*t2887;
  t3101 = 0.86008*t2912;
  t3126 = 0. + t3046 + t3101;
  t3436 = -0.021147*t3402;
  t3455 = 1.34008*t3442;
  t3478 = 0. + t3436 + t3455;
  t4872 = t1898*t4702;
  t4891 = t1800*t4842;
  t4893 = t4872 + t4891;
  t4926 = t1800*t4702;
  t5002 = -1.*t1898*t4842;
  t5050 = t4926 + t5002;
  t3586 = -1.34008*t3402;
  t3632 = -0.021147*t3442;
  t3636 = 0. + t3586 + t3632;
  t5062 = -1.*t2912*t4893;
  t5117 = t2787*t5050;
  t5119 = t5062 + t5117;
  t5218 = t2787*t4893;
  t5266 = t2912*t5050;
  t5271 = t5218 + t5266;
  t5464 = t757*t268*t725;
  t5480 = t39*t757*t8*t805;
  t5483 = t5464 + t5480;
  t5558 = -1.*t39*t757*t725;
  t5563 = t757*t8*t268*t805;
  t5574 = t5558 + t5563;
  t5684 = t347*t757*t8*t671;
  t5707 = -1.*t476*t5483;
  t5711 = t5684 + t5707;
  t5718 = t1898*t5574;
  t5721 = t1800*t5711;
  t5755 = t5718 + t5721;
  t5788 = t1800*t5574;
  t5790 = -1.*t1898*t5711;
  t5828 = t5788 + t5790;
  t5893 = -1.*t2912*t5755;
  t5907 = t2787*t5828;
  t5910 = t5893 + t5907;
  t5965 = t2787*t5755;
  t5968 = t2912*t5828;
  t5971 = t5965 + t5968;
  t6216 = t268*t296*t725;
  t6221 = t39*t8*t296*t805;
  t6232 = t6216 + t6221;
  t6298 = -1.*t39*t296*t725;
  t6330 = t8*t268*t296*t805;
  t6332 = t6298 + t6330;
  t6417 = t347*t8*t671*t296;
  t6451 = -1.*t476*t6232;
  t6452 = t6417 + t6451;
  t6504 = t1898*t6332;
  t6507 = t1800*t6452;
  t6516 = t6504 + t6507;
  t6540 = t1800*t6332;
  t6575 = -1.*t1898*t6452;
  t6584 = t6540 + t6575;
  t6622 = -1.*t2912*t6516;
  t6623 = t2787*t6584;
  t6633 = t6622 + t6623;
  t6637 = t2787*t6516;
  t6640 = t2912*t6584;
  t6644 = t6637 + t6640;
  t6815 = t8*t268;
  t6826 = -1.*t39*t725*t805;
  t6831 = t6815 + t6826;
  t6836 = -1.*t39*t8;
  t6842 = -1.*t268*t725*t805;
  t6852 = t6836 + t6842;
  t6885 = -1.*t347*t671*t725;
  t6890 = -1.*t476*t6831;
  t6916 = t6885 + t6890;
  t6935 = t1898*t6852;
  t6941 = t1800*t6916;
  t6943 = t6935 + t6941;
  t6954 = t1800*t6852;
  t6958 = -1.*t1898*t6916;
  t6962 = t6954 + t6958;
  t6970 = -1.*t2912*t6943;
  t6971 = t2787*t6962;
  t6991 = t6970 + t6971;
  t6999 = t2787*t6943;
  t7001 = t2912*t6962;
  t7002 = t6999 + t7001;
  t7111 = t671*t296;
  t7135 = -1.*t757*t725*t805;
  t7159 = t7111 + t7135;
  t7177 = -1.*t39*t476*t4297;
  t7200 = t347*t7159;
  t7229 = t7177 + t7200;
  t7268 = t268*t1898*t4297;
  t7269 = t1800*t7229;
  t7276 = t7268 + t7269;
  t7291 = t1800*t268*t4297;
  t7293 = -1.*t1898*t7229;
  t7301 = t7291 + t7293;
  t7323 = -1.*t2912*t7276;
  t7325 = t2787*t7301;
  t7329 = t7323 + t7325;
  t7355 = t2787*t7276;
  t7358 = t2912*t7301;
  t7381 = t7355 + t7358;
  t7473 = t671*t296*t725;
  t7486 = -1.*t757*t805;
  t7491 = t7473 + t7486;
  t7529 = -1.*t39*t476*t7491;
  t7530 = t347*t1405;
  t7538 = t7529 + t7530;
  t7564 = t268*t1898*t7491;
  t7570 = t1800*t7538;
  t7574 = t7564 + t7570;
  t7577 = t1800*t268*t7491;
  t7579 = -1.*t1898*t7538;
  t7587 = t7577 + t7579;
  t7607 = -1.*t2912*t7574;
  t7608 = t2787*t7587;
  t7613 = t7607 + t7608;
  t7627 = t2787*t7574;
  t7633 = t2912*t7587;
  t7638 = t7627 + t7633;
  t7739 = -1.*t39*t8*t671*t476;
  t7741 = -1.*t347*t8*t805;
  t7753 = t7739 + t7741;
  t7803 = t8*t671*t268*t1898;
  t7806 = t1800*t7753;
  t7807 = t7803 + t7806;
  t7833 = t1800*t8*t671*t268;
  t7835 = -1.*t1898*t7753;
  t7844 = t7833 + t7835;
  t7850 = -1.*t2912*t7807;
  t7853 = t2787*t7844;
  t7855 = t7850 + t7853;
  t7860 = t2787*t7807;
  t7862 = t2912*t7844;
  t7864 = t7860 + t7862;
  t7986 = -1.*t39*t757*t8;
  t7996 = -1.*t268*t4438;
  t8002 = t7986 + t7996;
  t8021 = t1898*t4564;
  t8023 = -1.*t1800*t476*t8002;
  t8028 = t8021 + t8023;
  t8035 = t1800*t4564;
  t8039 = t476*t1898*t8002;
  t8064 = t8035 + t8039;
  t8073 = -1.*t2912*t8028;
  t8093 = t2787*t8064;
  t8094 = t8073 + t8093;
  t8103 = t2787*t8028;
  t8105 = t2912*t8064;
  t8108 = t8103 + t8105;
  t7915 = -0.086996*t39;
  t7920 = -0.022225*t268;
  t7932 = t7915 + t7920;
  t7961 = 0.022225*t39;
  t7966 = t7961 + t281;
  t8170 = t757*t671;
  t8196 = t296*t725*t805;
  t8198 = t8170 + t8196;
  t8251 = -1.*t268*t8198;
  t8258 = t2200 + t8251;
  t8210 = -1.*t8*t268*t296;
  t8215 = t39*t8198;
  t8234 = t8210 + t8215;
  t8293 = t1898*t8234;
  t8294 = -1.*t1800*t476*t8258;
  t8301 = t8293 + t8294;
  t8311 = t1800*t8234;
  t8313 = t476*t1898*t8258;
  t8321 = t8311 + t8313;
  t8330 = -1.*t2912*t8301;
  t8333 = t2787*t8321;
  t8336 = t8330 + t8333;
  t8353 = t2787*t8301;
  t8354 = t2912*t8321;
  t8357 = t8353 + t8354;
  t8520 = t39*t725;
  t8522 = -1.*t8*t268*t805;
  t8528 = t8520 + t8522;
  t8506 = t268*t725;
  t8509 = t39*t8*t805;
  t8518 = t8506 + t8509;
  t8542 = t1898*t8518;
  t8544 = -1.*t1800*t476*t8528;
  t8556 = t8542 + t8544;
  t8561 = t1800*t8518;
  t8571 = t476*t1898*t8528;
  t8573 = t8561 + t8571;
  t8585 = -1.*t2912*t8556;
  t8601 = t2787*t8573;
  t8602 = t8585 + t8601;
  t8620 = t2787*t8556;
  t8636 = t2912*t8573;
  t8641 = t8620 + t8636;
  t8741 = -1.*t476*t4297;
  t8744 = -1.*t347*t4564;
  t8753 = t8741 + t8744;
  t8775 = -1.*t2787*t1898*t8753;
  t8777 = -1.*t1800*t2912*t8753;
  t8779 = t8775 + t8777;
  t8787 = t1800*t2787*t8753;
  t8792 = -1.*t1898*t2912*t8753;
  t8809 = t8787 + t8792;
  t8705 = 0.156996*t347;
  t8706 = t8705 + t1586;
  t8719 = -0.31508*t347;
  t8724 = -0.156996*t476;
  t8726 = t8719 + t8724;
  t8882 = -1.*t476*t7491;
  t8892 = -1.*t347*t8234;
  t8894 = t8882 + t8892;
  t8923 = -1.*t2787*t1898*t8894;
  t8925 = -1.*t1800*t2912*t8894;
  t8926 = t8923 + t8925;
  t8933 = t1800*t2787*t8894;
  t8936 = -1.*t1898*t2912*t8894;
  t8942 = t8933 + t8936;
  t9058 = -1.*t8*t671*t476;
  t9074 = -1.*t347*t8518;
  t9078 = t9058 + t9074;
  t9136 = -1.*t2787*t1898*t9078;
  t9137 = -1.*t1800*t2912*t9078;
  t9139 = t9136 + t9137;
  t9141 = t1800*t2787*t9078;
  t9142 = -1.*t1898*t2912*t9078;
  t9164 = t9141 + t9142;
  t9292 = -1.*t1898*t4702;
  t9301 = -1.*t1800*t4842;
  t9308 = t9292 + t9301;
  t9322 = t2912*t9308;
  t9323 = t9322 + t5117;
  t9343 = t2787*t9308;
  t9344 = -1.*t2912*t5050;
  t9346 = t9343 + t9344;
  t9262 = 0.38008*t1800;
  t9266 = t9262 + t2547;
  t9275 = -0.022225*t1800;
  t9282 = -0.38008*t1898;
  t9284 = t9275 + t9282;
  t8907 = t347*t7491;
  t8912 = -1.*t476*t8234;
  t8920 = t8907 + t8912;
  t9441 = t39*t8*t296;
  t9442 = t268*t8198;
  t9448 = t9441 + t9442;
  t9453 = -1.*t1898*t9448;
  t9454 = -1.*t1800*t8920;
  t9460 = t9453 + t9454;
  t9464 = t1800*t9448;
  t9474 = -1.*t1898*t8920;
  t9480 = t9464 + t9474;
  t9496 = t2912*t9460;
  t9510 = t2787*t9480;
  t9516 = t9496 + t9510;
  t9539 = t2787*t9460;
  t9548 = -1.*t2912*t9480;
  t9575 = t9539 + t9548;
  t9096 = t347*t8*t671;
  t9110 = -1.*t476*t8518;
  t9130 = t9096 + t9110;
  t9693 = -1.*t39*t725;
  t9700 = t8*t268*t805;
  t9703 = t9693 + t9700;
  t9744 = -1.*t1898*t9703;
  t9748 = -1.*t1800*t9130;
  t9755 = t9744 + t9748;
  t9780 = t1800*t9703;
  t9786 = -1.*t1898*t9130;
  t9813 = t9780 + t9786;
  t9820 = t2912*t9755;
  t9837 = t2787*t9813;
  t9840 = t9820 + t9837;
  t9845 = t2787*t9755;
  t9861 = -1.*t2912*t9813;
  t9862 = t9845 + t9861;
  t10015 = -1.*t2787*t4893;
  t10020 = t10015 + t9344;
  t5373 = t3324*t5119;
  t9967 = -0.022225*t2787;
  t9976 = -0.86008*t2912;
  t9980 = t9967 + t9976;
  t9998 = 0.86008*t2787;
  t10000 = t9998 + t2935;
  t10039 = t1898*t9448;
  t10041 = t1800*t8920;
  t10042 = t10039 + t10041;
  t10046 = -1.*t2912*t10042;
  t10047 = t10046 + t9510;
  t10051 = -1.*t2787*t10042;
  t10052 = t10051 + t9548;
  t10071 = t1898*t9703;
  t10073 = t1800*t9130;
  t10074 = t10071 + t10073;
  t10080 = -1.*t2912*t10074;
  t10082 = t10080 + t9837;
  t10084 = -1.*t2787*t10074;
  t10087 = t10084 + t9861;
  t10024 = -1.*t3442*t5119;
  t5381 = -1.*t3442*t5271;
  t5397 = t5373 + t5381;
  t10104 = 1.34008*t3324;
  t10105 = t10104 + t3632;
  t10108 = -0.021147*t3324;
  t10109 = -1.34008*t3442;
  t10110 = t10108 + t10109;
  t10058 = -1.*t3442*t10047;
  t10118 = t2787*t10042;
  t10119 = t2912*t9480;
  t10120 = t10118 + t10119;
  t10065 = t3324*t10047;
  t10089 = -1.*t3442*t10082;
  t10131 = t2787*t10074;
  t10132 = t2912*t9813;
  t10133 = t10131 + t10132;
  t10094 = t3324*t10082;

  p_output1(0)=1.;
  p_output1(1)=0;
  p_output1(2)=0;
  p_output1(3)=0;
  p_output1(4)=1.;
  p_output1(5)=0;
  p_output1(6)=0;
  p_output1(7)=0;
  p_output1(8)=1.;
  p_output1(9)=t1260*t1405 + t1608*t1734 + t2074*t2338 + t2556*t2716 + t2966*t3004 + t3126*t3179 + t3478*t3576 + t3636*t3687 - 1.325132*(t3442*t3576 + t3324*t3687) + 0.043865*(t3324*t3576 - 1.*t3442*t3687) - 1.*t286*t296*t8 + t508*t945 - 0.166996*(t1734*t347 + t476*t945);
  p_output1(10)=t1260*t4438 + t1608*t4564 + t2074*t4702 - 0.166996*(t347*t4564 + t4297*t476) + t2556*t4842 + t2966*t4893 + t3126*t5050 + t4297*t508 + t3478*t5119 + t3636*t5271 - 1.325132*(t3442*t5119 + t3324*t5271) + 0.043865*t5397 + t286*t757*t8;
  p_output1(11)=0;
  p_output1(12)=t1608*t5483 + t2074*t5574 + t2556*t5711 + t2966*t5755 + t3126*t5828 + t3478*t5910 + t3636*t5971 - 1.325132*(t3442*t5910 + t3324*t5971) + 0.043865*(t3324*t5910 - 1.*t3442*t5971) - 1.*t286*t725*t757 + t508*t671*t757*t8 - 0.166996*(t347*t5483 + t476*t671*t757*t8) + t1260*t757*t8*t805;
  p_output1(13)=t1608*t6232 + t2074*t6332 + t2556*t6452 + t2966*t6516 + t3126*t6584 + t3478*t6633 + t3636*t6644 - 1.325132*(t3442*t6633 + t3324*t6644) + 0.043865*(t3324*t6633 - 1.*t3442*t6644) - 1.*t286*t296*t725 + t296*t508*t671*t8 - 0.166996*(t347*t6232 + t296*t476*t671*t8) + t1260*t296*t8*t805;
  p_output1(14)=t1608*t6831 + t2074*t6852 + t2556*t6916 + t2966*t6943 + t3126*t6962 + t3478*t6991 + t3636*t7002 - 1.325132*(t3442*t6991 + t3324*t7002) + 0.043865*(t3324*t6991 - 1.*t3442*t7002) - 1.*t508*t671*t725 - 0.166996*(t347*t6831 - 1.*t476*t671*t725) - 1.*t286*t8 - 1.*t1260*t725*t805;
  p_output1(15)=t1260*t4297 + t2074*t268*t4297 + t1608*t39*t4297 + t508*t7159 - 0.166996*(t347*t39*t4297 + t476*t7159) + t2556*t7229 + t2966*t7276 + t3126*t7301 + t3478*t7329 + t3636*t7381 - 1.325132*(t3442*t7329 + t3324*t7381) + 0.043865*(t3324*t7329 - 1.*t3442*t7381);
  p_output1(16)=t1405*t508 + t1260*t7491 + t2074*t268*t7491 + t1608*t39*t7491 - 0.166996*(t1405*t476 + t347*t39*t7491) + t2556*t7538 + t2966*t7574 + t3126*t7587 + t3478*t7613 + t3636*t7638 - 1.325132*(t3442*t7613 + t3324*t7638) + 0.043865*(t3324*t7613 - 1.*t3442*t7638);
  p_output1(17)=t2556*t7753 + t2966*t7807 + t3126*t7844 + t3478*t7855 + t3636*t7864 - 1.325132*(t3442*t7855 + t3324*t7864) + 0.043865*(t3324*t7855 - 1.*t3442*t7864) + t1260*t671*t8 + t2074*t268*t671*t8 + t1608*t39*t671*t8 - 1.*t508*t8*t805 - 0.166996*(t347*t39*t671*t8 - 1.*t476*t8*t805);
  p_output1(18)=0;
  p_output1(19)=0;
  p_output1(20)=0;
  p_output1(21)=0;
  p_output1(22)=0;
  p_output1(23)=0;
  p_output1(24)=0;
  p_output1(25)=0;
  p_output1(26)=0;
  p_output1(27)=0;
  p_output1(28)=0;
  p_output1(29)=0;
  p_output1(30)=0;
  p_output1(31)=0;
  p_output1(32)=0;
  p_output1(33)=t2074*t4564 + t4438*t7966 + t757*t7932*t8 + t1608*t8002 - 0.166996*t347*t8002 - 1.*t2556*t476*t8002 + t2966*t8028 + t3126*t8064 + t3478*t8094 + t3636*t8108 - 1.325132*(t3442*t8094 + t3324*t8108) + 0.043865*(t3324*t8094 - 1.*t3442*t8108);
  p_output1(34)=t296*t7932*t8 + t7966*t8198 + t2074*t8234 + t1608*t8258 - 0.166996*t347*t8258 - 1.*t2556*t476*t8258 + t2966*t8301 + t3126*t8321 + t3478*t8336 + t3636*t8357 - 1.325132*(t3442*t8336 + t3324*t8357) + 0.043865*(t3324*t8336 - 1.*t3442*t8357);
  p_output1(35)=-1.*t725*t7932 + t7966*t8*t805 + t2074*t8518 + t1608*t8528 - 0.166996*t347*t8528 - 1.*t2556*t476*t8528 + t2966*t8556 + t3126*t8573 + t3478*t8602 + t3636*t8641 - 1.325132*(t3442*t8602 + t3324*t8641) + 0.043865*(t3324*t8602 - 1.*t3442*t8641);
  p_output1(36)=-0.166996*t4842 + t4297*t8706 + t4564*t8726 + t2556*t8753 + t1800*t2966*t8753 - 1.*t1898*t3126*t8753 + t3478*t8779 + t3636*t8809 - 1.325132*(t3442*t8779 + t3324*t8809) + 0.043865*(t3324*t8779 - 1.*t3442*t8809);
  p_output1(37)=t7491*t8706 + t8234*t8726 + t2556*t8894 + t1800*t2966*t8894 - 1.*t1898*t3126*t8894 - 0.166996*t8920 + t3478*t8926 + t3636*t8942 - 1.325132*(t3442*t8926 + t3324*t8942) + 0.043865*(t3324*t8926 - 1.*t3442*t8942);
  p_output1(38)=t671*t8*t8706 + t8518*t8726 + t2556*t9078 + t1800*t2966*t9078 - 1.*t1898*t3126*t9078 - 0.166996*t9130 + t3478*t9139 + t3636*t9164 - 1.325132*(t3442*t9139 + t3324*t9164) + 0.043865*(t3324*t9139 - 1.*t3442*t9164);
  p_output1(39)=t2966*t5050 + t4702*t9266 + t4842*t9284 + t3126*t9308 + t3636*t9323 + t3478*t9346 + 0.043865*(-1.*t3442*t9323 + t3324*t9346) - 1.325132*(t3324*t9323 + t3442*t9346);
  p_output1(40)=t8920*t9284 + t9266*t9448 + t3126*t9460 + t2966*t9480 + t3636*t9516 + t3478*t9575 + 0.043865*(-1.*t3442*t9516 + t3324*t9575) - 1.325132*(t3324*t9516 + t3442*t9575);
  p_output1(41)=t9130*t9284 + t9266*t9703 + t3126*t9755 + t2966*t9813 + t3636*t9840 + t3478*t9862 + 0.043865*(-1.*t3442*t9840 + t3324*t9862) - 1.325132*(t3324*t9840 + t3442*t9862);
  p_output1(42)=0.043865*(t10024 + t10020*t3324) + t10020*t3478 + t10000*t5050 + t3636*t5119 - 1.325132*(t10020*t3442 + t5373) + t4893*t9980;
  p_output1(43)=0.043865*(t10058 + t10052*t3324) - 1.325132*(t10065 + t10052*t3442) + t10052*t3478 + t10047*t3636 + t10000*t9480 + t10042*t9980;
  p_output1(44)=0.043865*(t10089 + t10087*t3324) - 1.325132*(t10094 + t10087*t3442) + t10087*t3478 + t10082*t3636 + t10000*t9813 + t10074*t9980;
  p_output1(45)=t10105*t5119 + t10110*t5271 + 0.043865*(t10024 - 1.*t3324*t5271) - 1.325132*t5397;
  p_output1(46)=t10047*t10105 + t10110*t10120 + 0.043865*(t10058 - 1.*t10120*t3324) - 1.325132*(t10065 - 1.*t10120*t3442);
  p_output1(47)=t10082*t10105 + t10110*t10133 + 0.043865*(t10089 - 1.*t10133*t3324) - 1.325132*(t10094 - 1.*t10133*t3442);
}


       
void Jp_RightFootBottom(Eigen::Matrix<double,3,16> &p_output1, const Eigen::Matrix<double,16,1> &var1)
{
  // Call Subroutines
  output1(p_output1, var1);

}
