/*
 * Automatically Generated from Mathematica.
 * Thu 16 Aug 2018 23:22:14 GMT-05:00
 */
#include <stdio.h>
#include <stdlib.h>
#include <math.h>

#include "pcom_Draco.h"

#ifdef _MSC_VER
  #define INLINE __forceinline /* use __forceinline (VC++ specific) */
#else
  #define INLINE inline        /* use standard inline */
#endif

/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
INLINE double Power(double x, double y) { return pow(x, y); }
INLINE double Sqrt(double x) { return sqrt(x); }

INLINE double Abs(double x) { return fabs(x); }

INLINE double Exp(double x) { return exp(x); }
INLINE double Log(double x) { return log(x); }

INLINE double Sin(double x) { return sin(x); }
INLINE double Cos(double x) { return cos(x); }
INLINE double Tan(double x) { return tan(x); }

INLINE double Csc(double x) { return 1.0/sin(x); }
INLINE double Sec(double x) { return 1.0/cos(x); }

INLINE double ArcSin(double x) { return asin(x); }
INLINE double ArcCos(double x) { return acos(x); }
//INLINE double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
INLINE double ArcTan(double x, double y) { return atan2(y,x); }

INLINE double Sinh(double x) { return sinh(x); }
INLINE double Cosh(double x) { return cosh(x); }
INLINE double Tanh(double x) { return tanh(x); }

#define E 2.71828182845904523536029
#define Pi 3.14159265358979323846264
#define Degree 0.01745329251994329576924

/*
 * Sub functions
 */
static void output1(Eigen::Matrix<double,3,1> &p_output1, const Eigen::Matrix<double,16,1> &var1)
{
  double t49;
  double t94;
  double t117;
  double t189;
  double t219;
  double t258;
  double t276;
  double t260;
  double t280;
  double t57;
  double t266;
  double t281;
  double t286;
  double t324;
  double t331;
  double t350;
  double t207;
  double t226;
  double t250;
  double t253;
  double t293;
  double t300;
  double t316;
  double t354;
  double t549;
  double t550;
  double t554;
  double t613;
  double t468;
  double t480;
  double t481;
  double t495;
  double t500;
  double t531;
  double t574;
  double t616;
  double t625;
  double t636;
  double t639;
  double t652;
  double t655;
  double t665;
  double t684;
  double t688;
  double t698;
  double t810;
  double t815;
  double t824;
  double t831;
  double t714;
  double t738;
  double t780;
  double t827;
  double t854;
  double t895;
  double t917;
  double t928;
  double t929;
  double t931;
  double t932;
  double t941;
  double t945;
  double t946;
  double t999;
  double t1000;
  double t1014;
  double t1024;
  double t955;
  double t956;
  double t957;
  double t1016;
  double t1029;
  double t1031;
  double t1067;
  double t1068;
  double t1072;
  double t1077;
  double t1097;
  double t1110;
  double t1125;
  double t1139;
  double t1189;
  double t1229;
  double t1236;
  double t1267;
  double t1144;
  double t1145;
  double t1162;
  double t1471;
  double t1475;
  double t1483;
  double t1544;
  double t1496;
  double t1551;
  double t1555;
  double t1560;
  double t1563;
  double t1570;
  double t1573;
  double t1579;
  double t1598;
  double t1616;
  double t1624;
  double t1587;
  double t1592;
  double t1596;
  double t1656;
  double t1658;
  double t1659;
  double t1670;
  double t1663;
  double t1671;
  double t1673;
  double t1675;
  double t1680;
  double t1691;
  double t1697;
  double t1709;
  double t1727;
  double t1730;
  double t1744;
  double t1778;
  double t1780;
  double t1783;
  double t1815;
  double t1820;
  double t1823;
  double t1834;
  double t1831;
  double t1843;
  double t1847;
  double t1849;
  double t1863;
  double t1897;
  double t1916;
  double t1936;
  double t1938;
  double t1942;
  double t1949;
  double t1988;
  double t1989;
  double t2006;
  double t2013;
  double t1959;
  double t1969;
  double t1973;
  double t2007;
  double t2015;
  double t2019;
  double t2031;
  double t2040;
  double t2053;
  double t2054;
  double t2066;
  double t2078;
  double t2086;
  double t2126;
  double t2165;
  double t2171;
  double t2183;
  double t2191;
  double t2133;
  double t2135;
  double t2142;
  double t2369;
  double t2378;
  double t2385;
  double t2395;
  double t2396;
  double t2398;
  double t2351;
  double t2407;
  double t2429;
  double t2431;
  double t2432;
  double t2437;
  double t2443;
  double t2459;
  double t2477;
  double t2480;
  double t2487;
  double t2495;
  double t2503;
  double t2508;
  double t2521;
  double t2523;
  double t2565;
  double t2577;
  double t2581;
  double t2583;
  double t2585;
  double t2612;
  double t2624;
  double t2631;
  double t2653;
  double t2654;
  double t1261;
  double t1272;
  double t1276;
  double t2656;
  double t2662;
  double t2663;
  double t1291;
  double t1294;
  double t1298;
  double t2665;
  double t2666;
  double t2671;
  double t2764;
  double t2770;
  double t2796;
  double t2801;
  double t2814;
  double t2783;
  double t2788;
  double t2793;
  double t2830;
  double t2851;
  double t2858;
  double t2866;
  double t2867;
  double t2896;
  double t2910;
  double t2924;
  double t2944;
  double t2945;
  double t2949;
  double t2950;
  double t2952;
  double t2955;
  double t2957;
  double t2958;
  double t3006;
  double t3007;
  double t2186;
  double t2198;
  double t2199;
  double t3011;
  double t3014;
  double t3021;
  double t2237;
  double t2245;
  double t2251;
  double t3027;
  double t3032;
  double t3035;
  double t3129;
  double t3133;
  double t3144;
  double t3150;
  double t3154;
  double t3159;
  double t3160;
  double t3163;
  double t3169;
  double t3170;
  double t3176;
  double t3186;
  double t3187;
  double t3193;
  double t3196;
  double t3198;
  double t3211;
  double t3215;
  double t3216;
  double t3218;
  double t3226;
  double t3234;
  double t3240;
  double t3242;
  double t3300;
  double t3301;
  double t3303;
  double t3304;
  double t3305;
  double t3315;
  double t3316;
  double t3327;
  double t3379;
  double t3381;
  double t3399;
  double t3411;
  double t3413;
  double t3386;
  double t3389;
  double t3391;
  double t3431;
  double t3439;
  double t3446;
  double t3448;
  double t3454;
  double t3459;
  double t3460;
  double t3465;
  double t3481;
  double t3482;
  double t3483;
  double t3490;
  double t3494;
  double t3498;
  double t3500;
  double t3501;
  double t3511;
  double t3517;
  double t3518;
  double t3527;
  double t3531;
  double t3538;
  double t3545;
  double t3550;
  t49 = Cos(var1[3]);
  t94 = Cos(var1[11]);
  t117 = -1.*t94;
  t189 = 1. + t117;
  t219 = Sin(var1[11]);
  t258 = Cos(var1[5]);
  t276 = Sin(var1[3]);
  t260 = Sin(var1[4]);
  t280 = Sin(var1[5]);
  t57 = Cos(var1[4]);
  t266 = t49*t258*t260;
  t281 = t276*t280;
  t286 = t266 + t281;
  t324 = -1.*t258*t276;
  t331 = t49*t260*t280;
  t350 = t324 + t331;
  t207 = -0.022225*t189;
  t226 = -0.086996*t219;
  t250 = t207 + t226;
  t253 = t49*t57*t250;
  t293 = -0.086996*t189;
  t300 = 0.022225*t219;
  t316 = t293 + t300;
  t354 = t316*t350;
  t549 = Cos(var1[12]);
  t550 = -1.*t549;
  t554 = 1. + t550;
  t613 = Sin(var1[12]);
  t468 = -1.*t49*t57*t219;
  t480 = t94*t350;
  t481 = t468 + t480;
  t495 = t94*t49*t57;
  t500 = t219*t350;
  t531 = t495 + t500;
  t574 = -0.31508*t554;
  t616 = 0.156996*t613;
  t625 = t574 + t616;
  t636 = t625*t286;
  t639 = -0.156996*t554;
  t652 = -0.31508*t613;
  t655 = t639 + t652;
  t665 = t655*t481;
  t684 = t613*t286;
  t688 = t549*t481;
  t698 = t684 + t688;
  t810 = Cos(var1[13]);
  t815 = -1.*t810;
  t824 = 1. + t815;
  t831 = Sin(var1[13]);
  t714 = t549*t286;
  t738 = -1.*t613*t481;
  t780 = t714 + t738;
  t827 = -0.022225*t824;
  t854 = 0.38008*t831;
  t895 = t827 + t854;
  t917 = t895*t531;
  t928 = -0.38008*t824;
  t929 = -0.022225*t831;
  t931 = t928 + t929;
  t932 = t931*t780;
  t941 = t831*t531;
  t945 = t810*t780;
  t946 = t941 + t945;
  t999 = Cos(var1[14]);
  t1000 = -1.*t999;
  t1014 = 1. + t1000;
  t1024 = Sin(var1[14]);
  t955 = t810*t531;
  t956 = -1.*t831*t780;
  t957 = t955 + t956;
  t1016 = -0.86008*t1014;
  t1029 = -0.022225*t1024;
  t1031 = t1016 + t1029;
  t1067 = t1031*t946;
  t1068 = -0.022225*t1014;
  t1072 = 0.86008*t1024;
  t1077 = t1068 + t1072;
  t1097 = t1077*t957;
  t1110 = -1.*t1024*t946;
  t1125 = t999*t957;
  t1139 = t1110 + t1125;
  t1189 = Cos(var1[15]);
  t1229 = -1.*t1189;
  t1236 = 1. + t1229;
  t1267 = Sin(var1[15]);
  t1144 = t999*t946;
  t1145 = t1024*t957;
  t1162 = t1144 + t1145;
  t1471 = Cos(var1[6]);
  t1475 = -1.*t1471;
  t1483 = 1. + t1475;
  t1544 = Sin(var1[6]);
  t1496 = 0.087004*t1483;
  t1551 = 0.022225*t1544;
  t1555 = t1496 + t1551;
  t1560 = t350*t1555;
  t1563 = -0.022225*t1483;
  t1570 = 0.087004*t1544;
  t1573 = t1563 + t1570;
  t1579 = t49*t57*t1573;
  t1598 = t49*t57*t1471;
  t1616 = t350*t1544;
  t1624 = t1598 + t1616;
  t1587 = t1471*t350;
  t1592 = -1.*t49*t57*t1544;
  t1596 = t1587 + t1592;
  t1656 = Cos(var1[7]);
  t1658 = -1.*t1656;
  t1659 = 1. + t1658;
  t1670 = Sin(var1[7]);
  t1663 = 0.157004*t1659;
  t1671 = -0.31508*t1670;
  t1673 = t1663 + t1671;
  t1675 = t1596*t1673;
  t1680 = -0.31508*t1659;
  t1691 = -0.157004*t1670;
  t1697 = t1680 + t1691;
  t1709 = t286*t1697;
  t1727 = t1656*t1596;
  t1730 = t286*t1670;
  t1744 = t1727 + t1730;
  t1778 = t1656*t286;
  t1780 = -1.*t1596*t1670;
  t1783 = t1778 + t1780;
  t1815 = Cos(var1[8]);
  t1820 = -1.*t1815;
  t1823 = 1. + t1820;
  t1834 = Sin(var1[8]);
  t1831 = -0.38008*t1823;
  t1843 = -0.022225*t1834;
  t1847 = t1831 + t1843;
  t1849 = t1783*t1847;
  t1863 = -0.022225*t1823;
  t1897 = 0.38008*t1834;
  t1916 = t1863 + t1897;
  t1936 = t1624*t1916;
  t1938 = t1815*t1783;
  t1942 = t1624*t1834;
  t1949 = t1938 + t1942;
  t1988 = Cos(var1[9]);
  t1989 = -1.*t1988;
  t2006 = 1. + t1989;
  t2013 = Sin(var1[9]);
  t1959 = t1815*t1624;
  t1969 = -1.*t1783*t1834;
  t1973 = t1959 + t1969;
  t2007 = -0.86008*t2006;
  t2015 = -0.022225*t2013;
  t2019 = t2007 + t2015;
  t2031 = t2019*t1949;
  t2040 = -0.022225*t2006;
  t2053 = 0.86008*t2013;
  t2054 = t2040 + t2053;
  t2066 = t2054*t1973;
  t2078 = -1.*t2013*t1949;
  t2086 = t1988*t1973;
  t2126 = t2078 + t2086;
  t2165 = Cos(var1[10]);
  t2171 = -1.*t2165;
  t2183 = 1. + t2171;
  t2191 = Sin(var1[10]);
  t2133 = t1988*t1949;
  t2135 = t2013*t1973;
  t2142 = t2133 + t2135;
  t2369 = t258*t276*t260;
  t2378 = -1.*t49*t280;
  t2385 = t2369 + t2378;
  t2395 = t49*t258;
  t2396 = t276*t260*t280;
  t2398 = t2395 + t2396;
  t2351 = t57*t250*t276;
  t2407 = t316*t2398;
  t2429 = -1.*t57*t219*t276;
  t2431 = t94*t2398;
  t2432 = t2429 + t2431;
  t2437 = t94*t57*t276;
  t2443 = t219*t2398;
  t2459 = t2437 + t2443;
  t2477 = t625*t2385;
  t2480 = t655*t2432;
  t2487 = t613*t2385;
  t2495 = t549*t2432;
  t2503 = t2487 + t2495;
  t2508 = t549*t2385;
  t2521 = -1.*t613*t2432;
  t2523 = t2508 + t2521;
  t2565 = t895*t2459;
  t2577 = t931*t2523;
  t2581 = t831*t2459;
  t2583 = t810*t2523;
  t2585 = t2581 + t2583;
  t2612 = t810*t2459;
  t2624 = -1.*t831*t2523;
  t2631 = t2612 + t2624;
  t2653 = t1031*t2585;
  t2654 = t1077*t2631;
  t1261 = -0.021147*t1236;
  t1272 = 1.34008*t1267;
  t1276 = t1261 + t1272;
  t2656 = -1.*t1024*t2585;
  t2662 = t999*t2631;
  t2663 = t2656 + t2662;
  t1291 = -1.34008*t1236;
  t1294 = -0.021147*t1267;
  t1298 = t1291 + t1294;
  t2665 = t999*t2585;
  t2666 = t1024*t2631;
  t2671 = t2665 + t2666;
  t2764 = t2398*t1555;
  t2770 = t57*t276*t1573;
  t2796 = t57*t1471*t276;
  t2801 = t2398*t1544;
  t2814 = t2796 + t2801;
  t2783 = t1471*t2398;
  t2788 = -1.*t57*t276*t1544;
  t2793 = t2783 + t2788;
  t2830 = t2793*t1673;
  t2851 = t2385*t1697;
  t2858 = t1656*t2793;
  t2866 = t2385*t1670;
  t2867 = t2858 + t2866;
  t2896 = t1656*t2385;
  t2910 = -1.*t2793*t1670;
  t2924 = t2896 + t2910;
  t2944 = t2924*t1847;
  t2945 = t2814*t1916;
  t2949 = t1815*t2924;
  t2950 = t2814*t1834;
  t2952 = t2949 + t2950;
  t2955 = t1815*t2814;
  t2957 = -1.*t2924*t1834;
  t2958 = t2955 + t2957;
  t3006 = t2019*t2952;
  t3007 = t2054*t2958;
  t2186 = -0.021147*t2183;
  t2198 = 1.34008*t2191;
  t2199 = t2186 + t2198;
  t3011 = -1.*t2013*t2952;
  t3014 = t1988*t2958;
  t3021 = t3011 + t3014;
  t2237 = -1.34008*t2183;
  t2245 = -0.021147*t2191;
  t2251 = t2237 + t2245;
  t3027 = t1988*t2952;
  t3032 = t2013*t2958;
  t3035 = t3027 + t3032;
  t3129 = -1.*t250*t260;
  t3133 = t57*t316*t280;
  t3144 = t219*t260;
  t3150 = t94*t57*t280;
  t3154 = t3144 + t3150;
  t3159 = -1.*t94*t260;
  t3160 = t57*t219*t280;
  t3163 = t3159 + t3160;
  t3169 = t57*t258*t625;
  t3170 = t655*t3154;
  t3176 = t57*t258*t613;
  t3186 = t549*t3154;
  t3187 = t3176 + t3186;
  t3193 = t549*t57*t258;
  t3196 = -1.*t613*t3154;
  t3198 = t3193 + t3196;
  t3211 = t895*t3163;
  t3215 = t931*t3198;
  t3216 = t831*t3163;
  t3218 = t810*t3198;
  t3226 = t3216 + t3218;
  t3234 = t810*t3163;
  t3240 = -1.*t831*t3198;
  t3242 = t3234 + t3240;
  t3300 = t1031*t3226;
  t3301 = t1077*t3242;
  t3303 = -1.*t1024*t3226;
  t3304 = t999*t3242;
  t3305 = t3303 + t3304;
  t3315 = t999*t3226;
  t3316 = t1024*t3242;
  t3327 = t3315 + t3316;
  t3379 = t57*t280*t1555;
  t3381 = -1.*t260*t1573;
  t3399 = -1.*t1471*t260;
  t3411 = t57*t280*t1544;
  t3413 = t3399 + t3411;
  t3386 = t57*t1471*t280;
  t3389 = t260*t1544;
  t3391 = t3386 + t3389;
  t3431 = t3391*t1673;
  t3439 = t57*t258*t1697;
  t3446 = t1656*t3391;
  t3448 = t57*t258*t1670;
  t3454 = t3446 + t3448;
  t3459 = t57*t258*t1656;
  t3460 = -1.*t3391*t1670;
  t3465 = t3459 + t3460;
  t3481 = t3465*t1847;
  t3482 = t3413*t1916;
  t3483 = t1815*t3465;
  t3490 = t3413*t1834;
  t3494 = t3483 + t3490;
  t3498 = t1815*t3413;
  t3500 = -1.*t3465*t1834;
  t3501 = t3498 + t3500;
  t3511 = t2019*t3494;
  t3517 = t2054*t3501;
  t3518 = -1.*t2013*t3494;
  t3527 = t1988*t3501;
  t3531 = t3518 + t3527;
  t3538 = t1988*t3494;
  t3545 = t2013*t3501;
  t3550 = t3538 + t3545;

  p_output1(0)=0.0280898876404494*(t1560 + t1579 + 0.16373*t1596 - 0.023556*t1624 + t253 - 0.523868*t286 + t354 - 0.163722*t481 - 0.020894*t531 + 2.*var1(0) + 0.5*(t1560 + t1579 - 0.018834*t1624 + t1675 + t1709 + 0.177665*t1744 - 0.340809*t1783 + var1(0)) + 6.*(t1560 + t1579 + t1675 + t1709 + 0.173654*t1744 + t1849 + t1936 - 0.620188*t1949 - 0.021332*t1973 + var1(0)) + 3.8*(t1560 + t1579 + t1675 + t1709 + 0.166946*t1744 + t1849 + t1936 + t2031 + t2066 - 0.038294*t2126 - 1.107902*t2142 + var1(0)) + 0.5*(t1560 + t1579 + t1675 + t1709 + 0.166999*t1744 + t1849 + t1936 + t2031 + t2066 - 1.329456*(t2142*t2165 + t2126*t2191) + 0.023136*(t2126*t2165 - 1.*t2142*t2191) + t2126*t2199 + t2142*t2251 + var1(0)) + 12.*(-0.187273*t286 + 0.000754*t350 - 0.013391*t49*t57 + var1(0)) + 0.5*(t253 + t354 - 0.018834*t531 + t636 + t665 - 0.177657*t698 - 0.340809*t780 + var1(0)) + 3.8*(t1067 + t1097 - 0.038294*t1139 - 1.107902*t1162 + t253 + t354 + t636 + t665 - 0.167054*t698 + t917 + t932 + var1(0)) + 0.5*(t1067 + t1097 - 1.329456*(t1162*t1189 + t1139*t1267) + 0.023136*(t1139*t1189 - 1.*t1162*t1267) + t1139*t1276 + t1162*t1298 + t253 + t354 + t636 + t665 - 0.167001*t698 + t917 + t932 + var1(0)) + 6.*(t253 + t354 + t636 + t665 - 0.160346*t698 + t917 + t932 - 0.620188*t946 - 0.021332*t957 + var1(0)));
  p_output1(1)=0.0280898876404494*(t2351 - 0.523868*t2385 + t2407 - 0.163722*t2432 - 0.020894*t2459 + t2764 + t2770 + 0.16373*t2793 - 0.023556*t2814 + 2.*var1(1) + 0.5*(t2351 + t2407 - 0.018834*t2459 + t2477 + t2480 - 0.177657*t2503 - 0.340809*t2523 + var1(1)) + 6.*(t2351 + t2407 + t2477 + t2480 - 0.160346*t2503 + t2565 + t2577 - 0.620188*t2585 - 0.021332*t2631 + var1(1)) + 3.8*(t2351 + t2407 + t2477 + t2480 - 0.167054*t2503 + t2565 + t2577 + t2653 + t2654 - 0.038294*t2663 - 1.107902*t2671 + var1(1)) + 0.5*(t2351 + t2407 + t2477 + t2480 - 0.167001*t2503 + t2565 + t2577 + t2653 + t2654 + t1276*t2663 + t1298*t2671 - 1.329456*(t1267*t2663 + t1189*t2671) + 0.023136*(t1189*t2663 - 1.*t1267*t2671) + var1(1)) + 0.5*(t2764 + t2770 - 0.018834*t2814 + t2830 + t2851 + 0.177665*t2867 - 0.340809*t2924 + var1(1)) + 6.*(t2764 + t2770 + t2830 + t2851 + 0.173654*t2867 + t2944 + t2945 - 0.620188*t2952 - 0.021332*t2958 + var1(1)) + 3.8*(t2764 + t2770 + t2830 + t2851 + 0.166946*t2867 + t2944 + t2945 + t3006 + t3007 - 0.038294*t3021 - 1.107902*t3035 + var1(1)) + 0.5*(t2764 + t2770 + t2830 + t2851 + 0.166999*t2867 + t2944 + t2945 + t3006 + t3007 + t2199*t3021 + t2251*t3035 - 1.329456*(t2191*t3021 + t2165*t3035) + 0.023136*(t2165*t3021 - 1.*t2191*t3035) + var1(1)) + 12.*(-0.187273*t2385 + 0.000754*t2398 - 0.013391*t276*t57 + var1(1)));
  p_output1(2)=0.0280898876404494*(t3129 + t3133 - 0.163722*t3154 - 0.020894*t3163 + t3379 + t3381 + 0.16373*t3391 - 0.023556*t3413 - 0.523868*t258*t57 + 2.*var1(2) + 0.5*(t3129 + t3133 - 0.018834*t3163 + t3169 + t3170 - 0.177657*t3187 - 0.340809*t3198 + var1(2)) + 6.*(t3129 + t3133 + t3169 + t3170 - 0.160346*t3187 + t3211 + t3215 - 0.620188*t3226 - 0.021332*t3242 + var1(2)) + 3.8*(t3129 + t3133 + t3169 + t3170 - 0.167054*t3187 + t3211 + t3215 + t3300 + t3301 - 0.038294*t3305 - 1.107902*t3327 + var1(2)) + 0.5*(t3129 + t3133 + t3169 + t3170 - 0.167001*t3187 + t3211 + t3215 + t3300 + t3301 + t1276*t3305 + t1298*t3327 - 1.329456*(t1267*t3305 + t1189*t3327) + 0.023136*(t1189*t3305 - 1.*t1267*t3327) + var1(2)) + 0.5*(t3379 + t3381 - 0.018834*t3413 + t3431 + t3439 + 0.177665*t3454 - 0.340809*t3465 + var1(2)) + 6.*(t3379 + t3381 + t3431 + t3439 + 0.173654*t3454 + t3481 + t3482 - 0.620188*t3494 - 0.021332*t3501 + var1(2)) + 3.8*(t3379 + t3381 + t3431 + t3439 + 0.166946*t3454 + t3481 + t3482 + t3511 + t3517 - 0.038294*t3531 - 1.107902*t3550 + var1(2)) + 0.5*(t3379 + t3381 + t3431 + t3439 + 0.166999*t3454 + t3481 + t3482 + t3511 + t3517 + t2199*t3531 + t2251*t3550 - 1.329456*(t2191*t3531 + t2165*t3550) + 0.023136*(t2165*t3531 - 1.*t2191*t3550) + var1(2)) + 12.*(0.013391*t260 - 0.187273*t258*t57 + 0.000754*t280*t57 + var1(2)));
}


       
void pcom_Draco(Eigen::Matrix<double,3,1> &p_output1, const Eigen::Matrix<double,16,1> &var1)
{
  // Call Subroutines
  output1(p_output1, var1);

}
