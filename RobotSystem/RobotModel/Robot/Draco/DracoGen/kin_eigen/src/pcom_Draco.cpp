/*
 * Automatically Generated from Mathematica.
 * Thu 16 Aug 2018 18:05:37 GMT-05:00
 */
#include <stdio.h>
#include <stdlib.h>
#include <math.h>

#include "pcom_Draco.h"

#ifdef _MSC_VER
  #define INLINE __forceinline /* use __forceinline (VC++ specific) */
#else
  #define INLINE inline        /* use standard inline */
#endif

/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
INLINE double Power(double x, double y) { return pow(x, y); }
INLINE double Sqrt(double x) { return sqrt(x); }

INLINE double Abs(double x) { return fabs(x); }

INLINE double Exp(double x) { return exp(x); }
INLINE double Log(double x) { return log(x); }

INLINE double Sin(double x) { return sin(x); }
INLINE double Cos(double x) { return cos(x); }
INLINE double Tan(double x) { return tan(x); }

INLINE double Csc(double x) { return 1.0/sin(x); }
INLINE double Sec(double x) { return 1.0/cos(x); }

INLINE double ArcSin(double x) { return asin(x); }
INLINE double ArcCos(double x) { return acos(x); }
//INLINE double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
INLINE double ArcTan(double x, double y) { return atan2(y,x); }

INLINE double Sinh(double x) { return sinh(x); }
INLINE double Cosh(double x) { return cosh(x); }
INLINE double Tanh(double x) { return tanh(x); }

#define E 2.71828182845904523536029
#define Pi 3.14159265358979323846264
#define Degree 0.01745329251994329576924

/*
 * Sub functions
 */
static void output1(Eigen::Matrix<double,3,1> &p_output1, const Eigen::Matrix<double,16,1> &var1)
{
  double t26;
  double t112;
  double t122;
  double t137;
  double t172;
  double t220;
  double t257;
  double t228;
  double t275;
  double t47;
  double t256;
  double t278;
  double t294;
  double t329;
  double t333;
  double t338;
  double t165;
  double t180;
  double t193;
  double t204;
  double t297;
  double t300;
  double t325;
  double t355;
  double t510;
  double t523;
  double t566;
  double t584;
  double t426;
  double t427;
  double t444;
  double t487;
  double t489;
  double t497;
  double t569;
  double t593;
  double t596;
  double t604;
  double t613;
  double t617;
  double t620;
  double t637;
  double t651;
  double t652;
  double t660;
  double t805;
  double t807;
  double t809;
  double t820;
  double t693;
  double t699;
  double t717;
  double t813;
  double t821;
  double t823;
  double t872;
  double t892;
  double t893;
  double t900;
  double t901;
  double t904;
  double t909;
  double t915;
  double t1036;
  double t1041;
  double t1043;
  double t1070;
  double t921;
  double t923;
  double t951;
  double t1059;
  double t1076;
  double t1087;
  double t1093;
  double t1096;
  double t1135;
  double t1138;
  double t1139;
  double t1154;
  double t1170;
  double t1172;
  double t1314;
  double t1317;
  double t1318;
  double t1323;
  double t1177;
  double t1217;
  double t1242;
  double t1485;
  double t1494;
  double t1497;
  double t1506;
  double t1504;
  double t1508;
  double t1509;
  double t1513;
  double t1524;
  double t1525;
  double t1526;
  double t1527;
  double t1556;
  double t1573;
  double t1605;
  double t1530;
  double t1545;
  double t1546;
  double t1611;
  double t1612;
  double t1625;
  double t1628;
  double t1626;
  double t1630;
  double t1642;
  double t1654;
  double t1660;
  double t1661;
  double t1672;
  double t1684;
  double t1685;
  double t1701;
  double t1709;
  double t1722;
  double t1731;
  double t1734;
  double t1783;
  double t1787;
  double t1790;
  double t1816;
  double t1803;
  double t1824;
  double t1836;
  double t1838;
  double t1846;
  double t1859;
  double t1860;
  double t1864;
  double t1871;
  double t1889;
  double t1893;
  double t1942;
  double t1945;
  double t1947;
  double t1949;
  double t1903;
  double t1910;
  double t1911;
  double t1948;
  double t1952;
  double t1958;
  double t1959;
  double t1962;
  double t1966;
  double t1974;
  double t1975;
  double t1978;
  double t1988;
  double t2009;
  double t2072;
  double t2076;
  double t2083;
  double t2088;
  double t2012;
  double t2020;
  double t2023;
  double t2301;
  double t2311;
  double t2316;
  double t2336;
  double t2348;
  double t2351;
  double t2283;
  double t2361;
  double t2381;
  double t2387;
  double t2395;
  double t2412;
  double t2432;
  double t2438;
  double t2446;
  double t2447;
  double t2451;
  double t2453;
  double t2482;
  double t2501;
  double t2509;
  double t2519;
  double t2532;
  double t2547;
  double t2549;
  double t2551;
  double t2556;
  double t2565;
  double t2571;
  double t2590;
  double t2635;
  double t2650;
  double t1319;
  double t1325;
  double t1343;
  double t2672;
  double t2685;
  double t2694;
  double t1368;
  double t1377;
  double t1388;
  double t2696;
  double t2700;
  double t2707;
  double t2846;
  double t2849;
  double t2912;
  double t2916;
  double t2938;
  double t2858;
  double t2875;
  double t2893;
  double t2965;
  double t2978;
  double t2981;
  double t2991;
  double t2995;
  double t3002;
  double t3008;
  double t3010;
  double t3048;
  double t3089;
  double t3097;
  double t3107;
  double t3115;
  double t3120;
  double t3130;
  double t3136;
  double t3148;
  double t3149;
  double t2087;
  double t2102;
  double t2103;
  double t3151;
  double t3152;
  double t3158;
  double t2113;
  double t2123;
  double t2139;
  double t3160;
  double t3163;
  double t3165;
  double t3221;
  double t3238;
  double t3271;
  double t3272;
  double t3277;
  double t3280;
  double t3282;
  double t3286;
  double t3291;
  double t3294;
  double t3298;
  double t3302;
  double t3322;
  double t3328;
  double t3333;
  double t3342;
  double t3363;
  double t3372;
  double t3388;
  double t3390;
  double t3399;
  double t3407;
  double t3411;
  double t3414;
  double t3442;
  double t3445;
  double t3453;
  double t3457;
  double t3458;
  double t3469;
  double t3470;
  double t3472;
  double t3555;
  double t3558;
  double t3583;
  double t3584;
  double t3586;
  double t3561;
  double t3564;
  double t3576;
  double t3590;
  double t3596;
  double t3597;
  double t3599;
  double t3605;
  double t3608;
  double t3610;
  double t3613;
  double t3629;
  double t3635;
  double t3640;
  double t3647;
  double t3658;
  double t3662;
  double t3674;
  double t3677;
  double t3697;
  double t3701;
  double t3703;
  double t3704;
  double t3706;
  double t3711;
  double t3720;
  double t3724;
  t26 = Cos(var1[3]);
  t112 = Cos(var1[11]);
  t122 = -1.*t112;
  t137 = 1. + t122;
  t172 = Sin(var1[11]);
  t220 = Cos(var1[5]);
  t257 = Sin(var1[3]);
  t228 = Sin(var1[4]);
  t275 = Sin(var1[5]);
  t47 = Cos(var1[4]);
  t256 = t26*t220*t228;
  t278 = t257*t275;
  t294 = t256 + t278;
  t329 = -1.*t220*t257;
  t333 = t26*t228*t275;
  t338 = t329 + t333;
  t165 = -0.022225*t137;
  t180 = -0.086996*t172;
  t193 = t165 + t180;
  t204 = t26*t47*t193;
  t297 = -0.086996*t137;
  t300 = 0.022225*t172;
  t325 = t297 + t300;
  t355 = t325*t338;
  t510 = Cos(var1[12]);
  t523 = -1.*t510;
  t566 = 1. + t523;
  t584 = Sin(var1[12]);
  t426 = -1.*t26*t47*t172;
  t427 = t112*t338;
  t444 = t426 + t427;
  t487 = t112*t26*t47;
  t489 = t172*t338;
  t497 = t487 + t489;
  t569 = -0.31508*t566;
  t593 = 0.156996*t584;
  t596 = t569 + t593;
  t604 = t596*t294;
  t613 = -0.156996*t566;
  t617 = -0.31508*t584;
  t620 = t613 + t617;
  t637 = t620*t444;
  t651 = t584*t294;
  t652 = t510*t444;
  t660 = t651 + t652;
  t805 = Cos(var1[13]);
  t807 = -1.*t805;
  t809 = 1. + t807;
  t820 = Sin(var1[13]);
  t693 = t510*t294;
  t699 = -1.*t584*t444;
  t717 = t693 + t699;
  t813 = -0.022225*t809;
  t821 = 0.38008*t820;
  t823 = t813 + t821;
  t872 = t823*t497;
  t892 = -0.38008*t809;
  t893 = -0.022225*t820;
  t900 = t892 + t893;
  t901 = t900*t717;
  t904 = t820*t497;
  t909 = t805*t717;
  t915 = t904 + t909;
  t1036 = Cos(var1[14]);
  t1041 = -1.*t1036;
  t1043 = 1. + t1041;
  t1070 = Sin(var1[14]);
  t921 = t805*t497;
  t923 = -1.*t820*t717;
  t951 = t921 + t923;
  t1059 = -0.86008*t1043;
  t1076 = -0.022225*t1070;
  t1087 = t1059 + t1076;
  t1093 = t1087*t915;
  t1096 = -0.022225*t1043;
  t1135 = 0.86008*t1070;
  t1138 = t1096 + t1135;
  t1139 = t1138*t951;
  t1154 = -1.*t1070*t915;
  t1170 = t1036*t951;
  t1172 = t1154 + t1170;
  t1314 = Cos(var1[15]);
  t1317 = -1.*t1314;
  t1318 = 1. + t1317;
  t1323 = Sin(var1[15]);
  t1177 = t1036*t915;
  t1217 = t1070*t951;
  t1242 = t1177 + t1217;
  t1485 = Cos(var1[6]);
  t1494 = -1.*t1485;
  t1497 = 1. + t1494;
  t1506 = Sin(var1[6]);
  t1504 = 0.087004*t1497;
  t1508 = 0.022225*t1506;
  t1509 = t1504 + t1508;
  t1513 = t338*t1509;
  t1524 = -0.022225*t1497;
  t1525 = 0.087004*t1506;
  t1526 = t1524 + t1525;
  t1527 = t26*t47*t1526;
  t1556 = t26*t47*t1485;
  t1573 = t338*t1506;
  t1605 = t1556 + t1573;
  t1530 = t1485*t338;
  t1545 = -1.*t26*t47*t1506;
  t1546 = t1530 + t1545;
  t1611 = Cos(var1[7]);
  t1612 = -1.*t1611;
  t1625 = 1. + t1612;
  t1628 = Sin(var1[7]);
  t1626 = 0.157004*t1625;
  t1630 = -0.31508*t1628;
  t1642 = t1626 + t1630;
  t1654 = t1546*t1642;
  t1660 = -0.31508*t1625;
  t1661 = -0.157004*t1628;
  t1672 = t1660 + t1661;
  t1684 = t294*t1672;
  t1685 = t1611*t1546;
  t1701 = t294*t1628;
  t1709 = t1685 + t1701;
  t1722 = t1611*t294;
  t1731 = -1.*t1546*t1628;
  t1734 = t1722 + t1731;
  t1783 = Cos(var1[8]);
  t1787 = -1.*t1783;
  t1790 = 1. + t1787;
  t1816 = Sin(var1[8]);
  t1803 = -0.38008*t1790;
  t1824 = -0.022225*t1816;
  t1836 = t1803 + t1824;
  t1838 = t1734*t1836;
  t1846 = -0.022225*t1790;
  t1859 = 0.38008*t1816;
  t1860 = t1846 + t1859;
  t1864 = t1605*t1860;
  t1871 = t1783*t1734;
  t1889 = t1605*t1816;
  t1893 = t1871 + t1889;
  t1942 = Cos(var1[9]);
  t1945 = -1.*t1942;
  t1947 = 1. + t1945;
  t1949 = Sin(var1[9]);
  t1903 = t1783*t1605;
  t1910 = -1.*t1734*t1816;
  t1911 = t1903 + t1910;
  t1948 = -0.86008*t1947;
  t1952 = -0.022225*t1949;
  t1958 = t1948 + t1952;
  t1959 = t1958*t1893;
  t1962 = -0.022225*t1947;
  t1966 = 0.86008*t1949;
  t1974 = t1962 + t1966;
  t1975 = t1974*t1911;
  t1978 = -1.*t1949*t1893;
  t1988 = t1942*t1911;
  t2009 = t1978 + t1988;
  t2072 = Cos(var1[10]);
  t2076 = -1.*t2072;
  t2083 = 1. + t2076;
  t2088 = Sin(var1[10]);
  t2012 = t1942*t1893;
  t2020 = t1949*t1911;
  t2023 = t2012 + t2020;
  t2301 = t220*t257*t228;
  t2311 = -1.*t26*t275;
  t2316 = t2301 + t2311;
  t2336 = t26*t220;
  t2348 = t257*t228*t275;
  t2351 = t2336 + t2348;
  t2283 = t47*t193*t257;
  t2361 = t325*t2351;
  t2381 = -1.*t47*t172*t257;
  t2387 = t112*t2351;
  t2395 = t2381 + t2387;
  t2412 = t112*t47*t257;
  t2432 = t172*t2351;
  t2438 = t2412 + t2432;
  t2446 = t596*t2316;
  t2447 = t620*t2395;
  t2451 = t584*t2316;
  t2453 = t510*t2395;
  t2482 = t2451 + t2453;
  t2501 = t510*t2316;
  t2509 = -1.*t584*t2395;
  t2519 = t2501 + t2509;
  t2532 = t823*t2438;
  t2547 = t900*t2519;
  t2549 = t820*t2438;
  t2551 = t805*t2519;
  t2556 = t2549 + t2551;
  t2565 = t805*t2438;
  t2571 = -1.*t820*t2519;
  t2590 = t2565 + t2571;
  t2635 = t1087*t2556;
  t2650 = t1138*t2590;
  t1319 = -0.021147*t1318;
  t1325 = 1.34008*t1323;
  t1343 = t1319 + t1325;
  t2672 = -1.*t1070*t2556;
  t2685 = t1036*t2590;
  t2694 = t2672 + t2685;
  t1368 = -1.34008*t1318;
  t1377 = -0.021147*t1323;
  t1388 = t1368 + t1377;
  t2696 = t1036*t2556;
  t2700 = t1070*t2590;
  t2707 = t2696 + t2700;
  t2846 = t2351*t1509;
  t2849 = t47*t257*t1526;
  t2912 = t47*t1485*t257;
  t2916 = t2351*t1506;
  t2938 = t2912 + t2916;
  t2858 = t1485*t2351;
  t2875 = -1.*t47*t257*t1506;
  t2893 = t2858 + t2875;
  t2965 = t2893*t1642;
  t2978 = t2316*t1672;
  t2981 = t1611*t2893;
  t2991 = t2316*t1628;
  t2995 = t2981 + t2991;
  t3002 = t1611*t2316;
  t3008 = -1.*t2893*t1628;
  t3010 = t3002 + t3008;
  t3048 = t3010*t1836;
  t3089 = t2938*t1860;
  t3097 = t1783*t3010;
  t3107 = t2938*t1816;
  t3115 = t3097 + t3107;
  t3120 = t1783*t2938;
  t3130 = -1.*t3010*t1816;
  t3136 = t3120 + t3130;
  t3148 = t1958*t3115;
  t3149 = t1974*t3136;
  t2087 = -0.021147*t2083;
  t2102 = 1.34008*t2088;
  t2103 = t2087 + t2102;
  t3151 = -1.*t1949*t3115;
  t3152 = t1942*t3136;
  t3158 = t3151 + t3152;
  t2113 = -1.34008*t2083;
  t2123 = -0.021147*t2088;
  t2139 = t2113 + t2123;
  t3160 = t1942*t3115;
  t3163 = t1949*t3136;
  t3165 = t3160 + t3163;
  t3221 = -1.*t193*t228;
  t3238 = t47*t325*t275;
  t3271 = t172*t228;
  t3272 = t112*t47*t275;
  t3277 = t3271 + t3272;
  t3280 = -1.*t112*t228;
  t3282 = t47*t172*t275;
  t3286 = t3280 + t3282;
  t3291 = t47*t220*t596;
  t3294 = t620*t3277;
  t3298 = t47*t220*t584;
  t3302 = t510*t3277;
  t3322 = t3298 + t3302;
  t3328 = t510*t47*t220;
  t3333 = -1.*t584*t3277;
  t3342 = t3328 + t3333;
  t3363 = t823*t3286;
  t3372 = t900*t3342;
  t3388 = t820*t3286;
  t3390 = t805*t3342;
  t3399 = t3388 + t3390;
  t3407 = t805*t3286;
  t3411 = -1.*t820*t3342;
  t3414 = t3407 + t3411;
  t3442 = t1087*t3399;
  t3445 = t1138*t3414;
  t3453 = -1.*t1070*t3399;
  t3457 = t1036*t3414;
  t3458 = t3453 + t3457;
  t3469 = t1036*t3399;
  t3470 = t1070*t3414;
  t3472 = t3469 + t3470;
  t3555 = t47*t275*t1509;
  t3558 = -1.*t228*t1526;
  t3583 = -1.*t1485*t228;
  t3584 = t47*t275*t1506;
  t3586 = t3583 + t3584;
  t3561 = t47*t1485*t275;
  t3564 = t228*t1506;
  t3576 = t3561 + t3564;
  t3590 = t3576*t1642;
  t3596 = t47*t220*t1672;
  t3597 = t1611*t3576;
  t3599 = t47*t220*t1628;
  t3605 = t3597 + t3599;
  t3608 = t47*t220*t1611;
  t3610 = -1.*t3576*t1628;
  t3613 = t3608 + t3610;
  t3629 = t3613*t1836;
  t3635 = t3586*t1860;
  t3640 = t1783*t3613;
  t3647 = t3586*t1816;
  t3658 = t3640 + t3647;
  t3662 = t1783*t3586;
  t3674 = -1.*t3613*t1816;
  t3677 = t3662 + t3674;
  t3697 = t1958*t3658;
  t3701 = t1974*t3677;
  t3703 = -1.*t1949*t3658;
  t3704 = t1942*t3677;
  t3706 = t3703 + t3704;
  t3711 = t1942*t3658;
  t3720 = t1949*t3677;
  t3724 = t3711 + t3720;

  p_output1(0)=0.0280898876404494*(t1513 + t1527 + 0.16373*t1546 - 0.023556*t1605 + t204 - 0.523868*t294 + t355 - 0.163722*t444 - 0.020894*t497 + 2.*var1(0) + 0.5*(t1513 + t1527 - 0.018834*t1605 + t1654 + t1684 + 0.177665*t1709 - 0.340809*t1734 + var1(0)) + 6.*(t1513 + t1527 + t1654 + t1684 + 0.173654*t1709 + t1838 + t1864 - 0.620188*t1893 - 0.021332*t1911 + var1(0)) + 3.8*(t1513 + t1527 + t1654 + t1684 + 0.166946*t1709 + t1838 + t1864 + t1959 + t1975 - 0.038294*t2009 - 1.107902*t2023 + var1(0)) + 0.5*(t1513 + t1527 + t1654 + t1684 + 0.166999*t1709 + t1838 + t1864 + t1959 + t1975 - 1.329456*(t2023*t2072 + t2009*t2088) + 0.023136*(t2009*t2072 - 1.*t2023*t2088) + t2009*t2103 + t2023*t2139 + var1(0)) + 12.*(-0.187273*t294 + 0.000754*t338 - 0.013391*t26*t47 + var1(0)) + 0.5*(t204 + t355 - 0.018834*t497 + t604 + t637 - 0.177657*t660 - 0.340809*t717 + var1(0)) + 3.8*(t1093 + t1139 - 0.038294*t1172 - 1.107902*t1242 + t204 + t355 + t604 + t637 - 0.167054*t660 + t872 + t901 + var1(0)) + 0.5*(t1093 + t1139 - 1.329456*(t1242*t1314 + t1172*t1323) + 0.023136*(t1172*t1314 - 1.*t1242*t1323) + t1172*t1343 + t1242*t1388 + t204 + t355 + t604 + t637 - 0.167001*t660 + t872 + t901 + var1(0)) + 6.*(t204 + t355 + t604 + t637 - 0.160346*t660 + t872 + t901 - 0.620188*t915 - 0.021332*t951 + var1(0)));
  p_output1(1)=0.0280898876404494*(t2283 - 0.523868*t2316 + t2361 - 0.163722*t2395 - 0.020894*t2438 + t2846 + t2849 + 0.16373*t2893 - 0.023556*t2938 + 2.*var1(1) + 0.5*(t2283 + t2361 - 0.018834*t2438 + t2446 + t2447 - 0.177657*t2482 - 0.340809*t2519 + var1(1)) + 6.*(t2283 + t2361 + t2446 + t2447 - 0.160346*t2482 + t2532 + t2547 - 0.620188*t2556 - 0.021332*t2590 + var1(1)) + 3.8*(t2283 + t2361 + t2446 + t2447 - 0.167054*t2482 + t2532 + t2547 + t2635 + t2650 - 0.038294*t2694 - 1.107902*t2707 + var1(1)) + 0.5*(t2283 + t2361 + t2446 + t2447 - 0.167001*t2482 + t2532 + t2547 + t2635 + t2650 + t1343*t2694 + t1388*t2707 - 1.329456*(t1323*t2694 + t1314*t2707) + 0.023136*(t1314*t2694 - 1.*t1323*t2707) + var1(1)) + 0.5*(t2846 + t2849 - 0.018834*t2938 + t2965 + t2978 + 0.177665*t2995 - 0.340809*t3010 + var1(1)) + 6.*(t2846 + t2849 + t2965 + t2978 + 0.173654*t2995 + t3048 + t3089 - 0.620188*t3115 - 0.021332*t3136 + var1(1)) + 3.8*(t2846 + t2849 + t2965 + t2978 + 0.166946*t2995 + t3048 + t3089 + t3148 + t3149 - 0.038294*t3158 - 1.107902*t3165 + var1(1)) + 0.5*(t2846 + t2849 + t2965 + t2978 + 0.166999*t2995 + t3048 + t3089 + t3148 + t3149 + t2103*t3158 + t2139*t3165 - 1.329456*(t2088*t3158 + t2072*t3165) + 0.023136*(t2072*t3158 - 1.*t2088*t3165) + var1(1)) + 12.*(-0.187273*t2316 + 0.000754*t2351 - 0.013391*t257*t47 + var1(1)));
  p_output1(2)=0.0280898876404494*(t3221 + t3238 - 0.163722*t3277 - 0.020894*t3286 + t3555 + t3558 + 0.16373*t3576 - 0.023556*t3586 - 0.523868*t220*t47 + 2.*var1(2) + 0.5*(t3221 + t3238 - 0.018834*t3286 + t3291 + t3294 - 0.177657*t3322 - 0.340809*t3342 + var1(2)) + 6.*(t3221 + t3238 + t3291 + t3294 - 0.160346*t3322 + t3363 + t3372 - 0.620188*t3399 - 0.021332*t3414 + var1(2)) + 3.8*(t3221 + t3238 + t3291 + t3294 - 0.167054*t3322 + t3363 + t3372 + t3442 + t3445 - 0.038294*t3458 - 1.107902*t3472 + var1(2)) + 0.5*(t3221 + t3238 + t3291 + t3294 - 0.167001*t3322 + t3363 + t3372 + t3442 + t3445 + t1343*t3458 + t1388*t3472 - 1.329456*(t1323*t3458 + t1314*t3472) + 0.023136*(t1314*t3458 - 1.*t1323*t3472) + var1(2)) + 0.5*(t3555 + t3558 - 0.018834*t3586 + t3590 + t3596 + 0.177665*t3605 - 0.340809*t3613 + var1(2)) + 6.*(t3555 + t3558 + t3590 + t3596 + 0.173654*t3605 + t3629 + t3635 - 0.620188*t3658 - 0.021332*t3677 + var1(2)) + 3.8*(t3555 + t3558 + t3590 + t3596 + 0.166946*t3605 + t3629 + t3635 + t3697 + t3701 - 0.038294*t3706 - 1.107902*t3724 + var1(2)) + 0.5*(t3555 + t3558 + t3590 + t3596 + 0.166999*t3605 + t3629 + t3635 + t3697 + t3701 + t2103*t3706 + t2139*t3724 - 1.329456*(t2088*t3706 + t2072*t3724) + 0.023136*(t2072*t3706 - 1.*t2088*t3724) + var1(2)) + 12.*(0.013391*t228 - 0.187273*t220*t47 + 0.000754*t275*t47 + var1(2)));
}


       
void pcom_Draco(Eigen::Matrix<double,3,1> &p_output1, const Eigen::Matrix<double,16,1> &var1)
{
  // Call Subroutines
  output1(p_output1, var1);

}
