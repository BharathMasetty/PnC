/*
 * Automatically Generated from Mathematica.
 * Thu 16 Aug 2018 18:05:02 GMT-05:00
 */
#include <stdio.h>
#include <stdlib.h>
#include <math.h>

#include "Jp_rAnkle.h"

#ifdef _MSC_VER
  #define INLINE __forceinline /* use __forceinline (VC++ specific) */
#else
  #define INLINE inline        /* use standard inline */
#endif

/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
INLINE double Power(double x, double y) { return pow(x, y); }
INLINE double Sqrt(double x) { return sqrt(x); }

INLINE double Abs(double x) { return fabs(x); }

INLINE double Exp(double x) { return exp(x); }
INLINE double Log(double x) { return log(x); }

INLINE double Sin(double x) { return sin(x); }
INLINE double Cos(double x) { return cos(x); }
INLINE double Tan(double x) { return tan(x); }

INLINE double Csc(double x) { return 1.0/sin(x); }
INLINE double Sec(double x) { return 1.0/cos(x); }

INLINE double ArcSin(double x) { return asin(x); }
INLINE double ArcCos(double x) { return acos(x); }
//INLINE double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
INLINE double ArcTan(double x, double y) { return atan2(y,x); }

INLINE double Sinh(double x) { return sinh(x); }
INLINE double Cosh(double x) { return cosh(x); }
INLINE double Tanh(double x) { return tanh(x); }

#define E 2.71828182845904523536029
#define Pi 3.14159265358979323846264
#define Degree 0.01745329251994329576924

/*
 * Sub functions
 */
static void output1(Eigen::Matrix<double,3,16> &p_output1, const Eigen::Matrix<double,16,1> &var1)
{
  double t373;
  double t58;
  double t78;
  double t144;
  double t261;
  double t654;
  double t639;
  double t648;
  double t666;
  double t402;
  double t427;
  double t566;
  double t597;
  double t56;
  double t1053;
  double t1061;
  double t1082;
  double t649;
  double t675;
  double t687;
  double t1527;
  double t1536;
  double t1554;
  double t1581;
  double t1596;
  double t1691;
  double t1695;
  double t1745;
  double t1751;
  double t1754;
  double t2106;
  double t2187;
  double t2320;
  double t2354;
  double t2501;
  double t2556;
  double t2651;
  double t2724;
  double t2747;
  double t2807;
  double t2913;
  double t2932;
  double t2952;
  double t3004;
  double t3011;
  double t3039;
  double t3063;
  double t3195;
  double t3214;
  double t3272;
  double t3590;
  double t3627;
  double t3646;
  double t219;
  double t266;
  double t364;
  double t590;
  double t602;
  double t617;
  double t927;
  double t1005;
  double t1035;
  double t1306;
  double t1511;
  double t1524;
  double t4523;
  double t4539;
  double t4546;
  double t1694;
  double t1696;
  double t1712;
  double t4384;
  double t4495;
  double t4497;
  double t4629;
  double t4666;
  double t4683;
  double t2012;
  double t2024;
  double t2037;
  double t2569;
  double t2693;
  double t2707;
  double t4836;
  double t4849;
  double t4880;
  double t4982;
  double t5050;
  double t5053;
  double t2849;
  double t2854;
  double t2899;
  double t3050;
  double t3080;
  double t3182;
  double t5075;
  double t5079;
  double t5096;
  double t5147;
  double t5178;
  double t5213;
  double t3441;
  double t3528;
  double t3551;
  double t5290;
  double t5311;
  double t5327;
  double t5344;
  double t5361;
  double t5442;
  double t5746;
  double t5748;
  double t5752;
  double t5780;
  double t5827;
  double t5828;
  double t5892;
  double t5893;
  double t5895;
  double t5926;
  double t5930;
  double t5950;
  double t5964;
  double t5967;
  double t5970;
  double t5978;
  double t5995;
  double t5997;
  double t6004;
  double t6005;
  double t6027;
  double t6401;
  double t6421;
  double t6429;
  double t6451;
  double t6464;
  double t6472;
  double t6582;
  double t6586;
  double t6593;
  double t6639;
  double t6697;
  double t6708;
  double t6790;
  double t6877;
  double t6918;
  double t6933;
  double t6938;
  double t6965;
  double t6976;
  double t6984;
  double t7020;
  double t7244;
  double t7257;
  double t7263;
  double t7275;
  double t7296;
  double t7306;
  double t7360;
  double t7385;
  double t7386;
  double t7390;
  double t7422;
  double t7432;
  double t7448;
  double t7449;
  double t7450;
  double t7472;
  double t7480;
  double t7488;
  double t7494;
  double t7509;
  double t7514;
  double t7621;
  double t7639;
  double t7646;
  double t7665;
  double t7672;
  double t7675;
  double t7697;
  double t7711;
  double t7718;
  double t7726;
  double t7752;
  double t7761;
  double t7785;
  double t7789;
  double t7816;
  double t7827;
  double t7836;
  double t7838;
  double t7895;
  double t7900;
  double t7904;
  double t7945;
  double t7946;
  double t7948;
  double t7987;
  double t7995;
  double t7999;
  double t8007;
  double t8008;
  double t8011;
  double t8013;
  double t8028;
  double t8034;
  double t8048;
  double t8051;
  double t8058;
  double t8136;
  double t8139;
  double t8142;
  double t8213;
  double t8214;
  double t8235;
  double t8239;
  double t8241;
  double t8243;
  double t8245;
  double t8251;
  double t8257;
  double t8266;
  double t8268;
  double t8279;
  double t8375;
  double t8377;
  double t8379;
  double t8402;
  double t8412;
  double t8413;
  double t8415;
  double t8421;
  double t8422;
  double t8434;
  double t8437;
  double t8443;
  double t8455;
  double t8458;
  double t8467;
  double t8333;
  double t8338;
  double t8343;
  double t8348;
  double t8353;
  double t8530;
  double t8531;
  double t8542;
  double t8554;
  double t8557;
  double t8544;
  double t8545;
  double t8548;
  double t8577;
  double t8585;
  double t8600;
  double t8603;
  double t8607;
  double t8623;
  double t8629;
  double t8631;
  double t8643;
  double t8662;
  double t8664;
  double t8667;
  double t8725;
  double t8736;
  double t8740;
  double t8708;
  double t8710;
  double t8715;
  double t8768;
  double t8780;
  double t8781;
  double t8794;
  double t8798;
  double t8800;
  double t8809;
  double t8814;
  double t8816;
  double t8820;
  double t8824;
  double t8827;
  double t8951;
  double t8954;
  double t8956;
  double t8984;
  double t8988;
  double t8999;
  double t9012;
  double t9014;
  double t9017;
  double t8902;
  double t8904;
  double t8924;
  double t8936;
  double t8940;
  double t9078;
  double t9080;
  double t9102;
  double t9135;
  double t9138;
  double t9150;
  double t9167;
  double t9169;
  double t9170;
  double t9232;
  double t9234;
  double t9235;
  double t9269;
  double t9274;
  double t9291;
  double t9294;
  double t9304;
  double t9307;
  double t9435;
  double t9441;
  double t9446;
  double t9463;
  double t9465;
  double t9479;
  double t9480;
  double t9483;
  double t9380;
  double t9381;
  double t9390;
  double t9398;
  double t9401;
  double t9121;
  double t9129;
  double t9133;
  double t9587;
  double t9596;
  double t9601;
  double t9626;
  double t9633;
  double t9638;
  double t9653;
  double t9654;
  double t9656;
  double t9658;
  double t9666;
  double t9671;
  double t9679;
  double t9683;
  double t9693;
  double t9248;
  double t9249;
  double t9250;
  double t9724;
  double t9726;
  double t9732;
  double t9739;
  double t9740;
  double t9742;
  double t9746;
  double t9748;
  double t9750;
  double t9757;
  double t9758;
  double t9759;
  double t9766;
  double t9767;
  double t9769;
  double t9815;
  double t9816;
  double t5577;
  double t9795;
  double t9796;
  double t9799;
  double t9805;
  double t9809;
  double t9832;
  double t9833;
  double t9834;
  double t9837;
  double t9838;
  double t9840;
  double t9841;
  double t9855;
  double t9856;
  double t9857;
  double t9863;
  double t9865;
  double t9868;
  double t9869;
  double t9820;
  double t5614;
  double t5617;
  double t9885;
  double t9886;
  double t9889;
  double t9890;
  double t9892;
  double t9844;
  double t9900;
  double t9901;
  double t9902;
  double t9850;
  double t9872;
  double t9913;
  double t9914;
  double t9915;
  double t9876;
  t373 = Sin(var1[3]);
  t58 = Cos(var1[11]);
  t78 = -1.*t58;
  t144 = 1. + t78;
  t261 = Sin(var1[11]);
  t654 = Cos(var1[3]);
  t639 = Cos(var1[5]);
  t648 = Sin(var1[4]);
  t666 = Sin(var1[5]);
  t402 = Cos(var1[12]);
  t427 = -1.*t402;
  t566 = 1. + t427;
  t597 = Sin(var1[12]);
  t56 = Cos(var1[4]);
  t1053 = -1.*t654*t639;
  t1061 = -1.*t373*t648*t666;
  t1082 = t1053 + t1061;
  t649 = -1.*t639*t373*t648;
  t675 = t654*t666;
  t687 = t649 + t675;
  t1527 = t56*t261*t373;
  t1536 = t58*t1082;
  t1554 = t1527 + t1536;
  t1581 = Cos(var1[13]);
  t1596 = -1.*t1581;
  t1691 = 1. + t1596;
  t1695 = Sin(var1[13]);
  t1745 = -1.*t58*t56*t373;
  t1751 = t261*t1082;
  t1754 = t1745 + t1751;
  t2106 = t402*t687;
  t2187 = -1.*t597*t1554;
  t2320 = t2106 + t2187;
  t2354 = Cos(var1[14]);
  t2501 = -1.*t2354;
  t2556 = 1. + t2501;
  t2651 = Sin(var1[14]);
  t2724 = t1695*t1754;
  t2747 = t1581*t2320;
  t2807 = t2724 + t2747;
  t2913 = t1581*t1754;
  t2932 = -1.*t1695*t2320;
  t2952 = t2913 + t2932;
  t3004 = Cos(var1[15]);
  t3011 = -1.*t3004;
  t3039 = 1. + t3011;
  t3063 = Sin(var1[15]);
  t3195 = -1.*t2651*t2807;
  t3214 = t2354*t2952;
  t3272 = t3195 + t3214;
  t3590 = t2354*t2807;
  t3627 = t2651*t2952;
  t3646 = t3590 + t3627;
  t219 = -0.022225*t144;
  t266 = -0.086996*t261;
  t364 = 0. + t219 + t266;
  t590 = -0.31508*t566;
  t602 = 0.156996*t597;
  t617 = 0. + t590 + t602;
  t927 = -0.086996*t144;
  t1005 = 0.022225*t261;
  t1035 = 0. + t927 + t1005;
  t1306 = -0.156996*t566;
  t1511 = -0.31508*t597;
  t1524 = 0. + t1306 + t1511;
  t4523 = -1.*t639*t373;
  t4539 = t654*t648*t666;
  t4546 = t4523 + t4539;
  t1694 = -0.022225*t1691;
  t1696 = 0.38008*t1695;
  t1712 = 0. + t1694 + t1696;
  t4384 = t654*t639*t648;
  t4495 = t373*t666;
  t4497 = t4384 + t4495;
  t4629 = -1.*t654*t56*t261;
  t4666 = t58*t4546;
  t4683 = t4629 + t4666;
  t2012 = -0.38008*t1691;
  t2024 = -0.022225*t1695;
  t2037 = 0. + t2012 + t2024;
  t2569 = -0.86008*t2556;
  t2693 = -0.022225*t2651;
  t2707 = 0. + t2569 + t2693;
  t4836 = t58*t654*t56;
  t4849 = t261*t4546;
  t4880 = t4836 + t4849;
  t4982 = t402*t4497;
  t5050 = -1.*t597*t4683;
  t5053 = t4982 + t5050;
  t2849 = -0.022225*t2556;
  t2854 = 0.86008*t2651;
  t2899 = 0. + t2849 + t2854;
  t3050 = -0.021147*t3039;
  t3080 = 1.34008*t3063;
  t3182 = 0. + t3050 + t3080;
  t5075 = t1695*t4880;
  t5079 = t1581*t5053;
  t5096 = t5075 + t5079;
  t5147 = t1581*t4880;
  t5178 = -1.*t1695*t5053;
  t5213 = t5147 + t5178;
  t3441 = -1.34008*t3039;
  t3528 = -0.021147*t3063;
  t3551 = 0. + t3441 + t3528;
  t5290 = -1.*t2651*t5096;
  t5311 = t2354*t5213;
  t5327 = t5290 + t5311;
  t5344 = t2354*t5096;
  t5361 = t2651*t5213;
  t5442 = t5344 + t5361;
  t5746 = t654*t261*t648;
  t5748 = t58*t654*t56*t666;
  t5752 = t5746 + t5748;
  t5780 = -1.*t58*t654*t648;
  t5827 = t654*t56*t261*t666;
  t5828 = t5780 + t5827;
  t5892 = t402*t654*t56*t639;
  t5893 = -1.*t597*t5752;
  t5895 = t5892 + t5893;
  t5926 = t1695*t5828;
  t5930 = t1581*t5895;
  t5950 = t5926 + t5930;
  t5964 = t1581*t5828;
  t5967 = -1.*t1695*t5895;
  t5970 = t5964 + t5967;
  t5978 = -1.*t2651*t5950;
  t5995 = t2354*t5970;
  t5997 = t5978 + t5995;
  t6004 = t2354*t5950;
  t6005 = t2651*t5970;
  t6027 = t6004 + t6005;
  t6401 = t261*t373*t648;
  t6421 = t58*t56*t373*t666;
  t6429 = t6401 + t6421;
  t6451 = -1.*t58*t373*t648;
  t6464 = t56*t261*t373*t666;
  t6472 = t6451 + t6464;
  t6582 = t402*t56*t639*t373;
  t6586 = -1.*t597*t6429;
  t6593 = t6582 + t6586;
  t6639 = t1695*t6472;
  t6697 = t1581*t6593;
  t6708 = t6639 + t6697;
  t6790 = t1581*t6472;
  t6877 = -1.*t1695*t6593;
  t6918 = t6790 + t6877;
  t6933 = -1.*t2651*t6708;
  t6938 = t2354*t6918;
  t6965 = t6933 + t6938;
  t6976 = t2354*t6708;
  t6984 = t2651*t6918;
  t7020 = t6976 + t6984;
  t7244 = t56*t261;
  t7257 = -1.*t58*t648*t666;
  t7263 = t7244 + t7257;
  t7275 = -1.*t58*t56;
  t7296 = -1.*t261*t648*t666;
  t7306 = t7275 + t7296;
  t7360 = -1.*t402*t639*t648;
  t7385 = -1.*t597*t7263;
  t7386 = t7360 + t7385;
  t7390 = t1695*t7306;
  t7422 = t1581*t7386;
  t7432 = t7390 + t7422;
  t7448 = t1581*t7306;
  t7449 = -1.*t1695*t7386;
  t7450 = t7448 + t7449;
  t7472 = -1.*t2651*t7432;
  t7480 = t2354*t7450;
  t7488 = t7472 + t7480;
  t7494 = t2354*t7432;
  t7509 = t2651*t7450;
  t7514 = t7494 + t7509;
  t7621 = t639*t373;
  t7639 = -1.*t654*t648*t666;
  t7646 = t7621 + t7639;
  t7665 = -1.*t58*t597*t4497;
  t7672 = t402*t7646;
  t7675 = t7665 + t7672;
  t7697 = t261*t1695*t4497;
  t7711 = t1581*t7675;
  t7718 = t7697 + t7711;
  t7726 = t1581*t261*t4497;
  t7752 = -1.*t1695*t7675;
  t7761 = t7726 + t7752;
  t7785 = -1.*t2651*t7718;
  t7789 = t2354*t7761;
  t7816 = t7785 + t7789;
  t7827 = t2354*t7718;
  t7836 = t2651*t7761;
  t7838 = t7827 + t7836;
  t7895 = t639*t373*t648;
  t7900 = -1.*t654*t666;
  t7904 = t7895 + t7900;
  t7945 = -1.*t58*t597*t7904;
  t7946 = t402*t1082;
  t7948 = t7945 + t7946;
  t7987 = t261*t1695*t7904;
  t7995 = t1581*t7948;
  t7999 = t7987 + t7995;
  t8007 = t1581*t261*t7904;
  t8008 = -1.*t1695*t7948;
  t8011 = t8007 + t8008;
  t8013 = -1.*t2651*t7999;
  t8028 = t2354*t8011;
  t8034 = t8013 + t8028;
  t8048 = t2354*t7999;
  t8051 = t2651*t8011;
  t8058 = t8048 + t8051;
  t8136 = -1.*t58*t56*t639*t597;
  t8139 = -1.*t402*t56*t666;
  t8142 = t8136 + t8139;
  t8213 = t56*t639*t261*t1695;
  t8214 = t1581*t8142;
  t8235 = t8213 + t8214;
  t8239 = t1581*t56*t639*t261;
  t8241 = -1.*t1695*t8142;
  t8243 = t8239 + t8241;
  t8245 = -1.*t2651*t8235;
  t8251 = t2354*t8243;
  t8257 = t8245 + t8251;
  t8266 = t2354*t8235;
  t8268 = t2651*t8243;
  t8279 = t8266 + t8268;
  t8375 = -1.*t58*t654*t56;
  t8377 = -1.*t261*t4546;
  t8379 = t8375 + t8377;
  t8402 = t1695*t4683;
  t8412 = -1.*t1581*t597*t8379;
  t8413 = t8402 + t8412;
  t8415 = t1581*t4683;
  t8421 = t597*t1695*t8379;
  t8422 = t8415 + t8421;
  t8434 = -1.*t2651*t8413;
  t8437 = t2354*t8422;
  t8443 = t8434 + t8437;
  t8455 = t2354*t8413;
  t8458 = t2651*t8422;
  t8467 = t8455 + t8458;
  t8333 = -0.086996*t58;
  t8338 = -0.022225*t261;
  t8343 = t8333 + t8338;
  t8348 = 0.022225*t58;
  t8353 = t8348 + t266;
  t8530 = t654*t639;
  t8531 = t373*t648*t666;
  t8542 = t8530 + t8531;
  t8554 = -1.*t261*t8542;
  t8557 = t1745 + t8554;
  t8544 = -1.*t56*t261*t373;
  t8545 = t58*t8542;
  t8548 = t8544 + t8545;
  t8577 = t1695*t8548;
  t8585 = -1.*t1581*t597*t8557;
  t8600 = t8577 + t8585;
  t8603 = t1581*t8548;
  t8607 = t597*t1695*t8557;
  t8623 = t8603 + t8607;
  t8629 = -1.*t2651*t8600;
  t8631 = t2354*t8623;
  t8643 = t8629 + t8631;
  t8662 = t2354*t8600;
  t8664 = t2651*t8623;
  t8667 = t8662 + t8664;
  t8725 = t58*t648;
  t8736 = -1.*t56*t261*t666;
  t8740 = t8725 + t8736;
  t8708 = t261*t648;
  t8710 = t58*t56*t666;
  t8715 = t8708 + t8710;
  t8768 = t1695*t8715;
  t8780 = -1.*t1581*t597*t8740;
  t8781 = t8768 + t8780;
  t8794 = t1581*t8715;
  t8798 = t597*t1695*t8740;
  t8800 = t8794 + t8798;
  t8809 = -1.*t2651*t8781;
  t8814 = t2354*t8800;
  t8816 = t8809 + t8814;
  t8820 = t2354*t8781;
  t8824 = t2651*t8800;
  t8827 = t8820 + t8824;
  t8951 = -1.*t597*t4497;
  t8954 = -1.*t402*t4683;
  t8956 = t8951 + t8954;
  t8984 = -1.*t2354*t1695*t8956;
  t8988 = -1.*t1581*t2651*t8956;
  t8999 = t8984 + t8988;
  t9012 = t1581*t2354*t8956;
  t9014 = -1.*t1695*t2651*t8956;
  t9017 = t9012 + t9014;
  t8902 = 0.156996*t402;
  t8904 = t8902 + t1511;
  t8924 = -0.31508*t402;
  t8936 = -0.156996*t597;
  t8940 = t8924 + t8936;
  t9078 = -1.*t597*t7904;
  t9080 = -1.*t402*t8548;
  t9102 = t9078 + t9080;
  t9135 = -1.*t2354*t1695*t9102;
  t9138 = -1.*t1581*t2651*t9102;
  t9150 = t9135 + t9138;
  t9167 = t1581*t2354*t9102;
  t9169 = -1.*t1695*t2651*t9102;
  t9170 = t9167 + t9169;
  t9232 = -1.*t56*t639*t597;
  t9234 = -1.*t402*t8715;
  t9235 = t9232 + t9234;
  t9269 = -1.*t2354*t1695*t9235;
  t9274 = -1.*t1581*t2651*t9235;
  t9291 = t9269 + t9274;
  t9294 = t1581*t2354*t9235;
  t9304 = -1.*t1695*t2651*t9235;
  t9307 = t9294 + t9304;
  t9435 = -1.*t1695*t4880;
  t9441 = -1.*t1581*t5053;
  t9446 = t9435 + t9441;
  t9463 = t2651*t9446;
  t9465 = t9463 + t5311;
  t9479 = t2354*t9446;
  t9480 = -1.*t2651*t5213;
  t9483 = t9479 + t9480;
  t9380 = 0.38008*t1581;
  t9381 = t9380 + t2024;
  t9390 = -0.022225*t1581;
  t9398 = -0.38008*t1695;
  t9401 = t9390 + t9398;
  t9121 = t402*t7904;
  t9129 = -1.*t597*t8548;
  t9133 = t9121 + t9129;
  t9587 = t58*t56*t373;
  t9596 = t261*t8542;
  t9601 = t9587 + t9596;
  t9626 = -1.*t1695*t9601;
  t9633 = -1.*t1581*t9133;
  t9638 = t9626 + t9633;
  t9653 = t1581*t9601;
  t9654 = -1.*t1695*t9133;
  t9656 = t9653 + t9654;
  t9658 = t2651*t9638;
  t9666 = t2354*t9656;
  t9671 = t9658 + t9666;
  t9679 = t2354*t9638;
  t9683 = -1.*t2651*t9656;
  t9693 = t9679 + t9683;
  t9248 = t402*t56*t639;
  t9249 = -1.*t597*t8715;
  t9250 = t9248 + t9249;
  t9724 = -1.*t58*t648;
  t9726 = t56*t261*t666;
  t9732 = t9724 + t9726;
  t9739 = -1.*t1695*t9732;
  t9740 = -1.*t1581*t9250;
  t9742 = t9739 + t9740;
  t9746 = t1581*t9732;
  t9748 = -1.*t1695*t9250;
  t9750 = t9746 + t9748;
  t9757 = t2651*t9742;
  t9758 = t2354*t9750;
  t9759 = t9757 + t9758;
  t9766 = t2354*t9742;
  t9767 = -1.*t2651*t9750;
  t9769 = t9766 + t9767;
  t9815 = -1.*t2354*t5096;
  t9816 = t9815 + t9480;
  t5577 = t3004*t5327;
  t9795 = -0.022225*t2354;
  t9796 = -0.86008*t2651;
  t9799 = t9795 + t9796;
  t9805 = 0.86008*t2354;
  t9809 = t9805 + t2693;
  t9832 = t1695*t9601;
  t9833 = t1581*t9133;
  t9834 = t9832 + t9833;
  t9837 = -1.*t2651*t9834;
  t9838 = t9837 + t9666;
  t9840 = -1.*t2354*t9834;
  t9841 = t9840 + t9683;
  t9855 = t1695*t9732;
  t9856 = t1581*t9250;
  t9857 = t9855 + t9856;
  t9863 = -1.*t2651*t9857;
  t9865 = t9863 + t9758;
  t9868 = -1.*t2354*t9857;
  t9869 = t9868 + t9767;
  t9820 = -1.*t3063*t5327;
  t5614 = -1.*t3063*t5442;
  t5617 = t5577 + t5614;
  t9885 = 1.34008*t3004;
  t9886 = t9885 + t3528;
  t9889 = -0.021147*t3004;
  t9890 = -1.34008*t3063;
  t9892 = t9889 + t9890;
  t9844 = -1.*t3063*t9838;
  t9900 = t2354*t9834;
  t9901 = t2651*t9656;
  t9902 = t9900 + t9901;
  t9850 = t3004*t9838;
  t9872 = -1.*t3063*t9865;
  t9913 = t2354*t9857;
  t9914 = t2651*t9750;
  t9915 = t9913 + t9914;
  t9876 = t3004*t9865;

  p_output1(0)=1.;
  p_output1(1)=0;
  p_output1(2)=0;
  p_output1(3)=0;
  p_output1(4)=1.;
  p_output1(5)=0;
  p_output1(6)=0;
  p_output1(7)=0;
  p_output1(8)=1.;
  p_output1(9)=t1035*t1082 + t1524*t1554 + t1712*t1754 + t2037*t2320 + t2707*t2807 + t2899*t2952 + t3182*t3272 + t3551*t3646 - 1.34008*(t3063*t3272 + t3004*t3646) - 0.021147*(t3004*t3272 - 1.*t3063*t3646) - 1.*t364*t373*t56 + t617*t687 - 0.166996*(t1554*t402 + t597*t687);
  p_output1(10)=t1035*t4546 + t1524*t4683 + t1712*t4880 + t2037*t5053 + t2707*t5096 + t2899*t5213 + t3182*t5327 + t3551*t5442 - 1.34008*(t3063*t5327 + t3004*t5442) - 0.021147*t5617 - 0.166996*(t402*t4683 + t4497*t597) + t4497*t617 + t364*t56*t654;
  p_output1(11)=0;
  p_output1(12)=t1524*t5752 + t1712*t5828 + t2037*t5895 + t2707*t5950 + t2899*t5970 + t3182*t5997 + t3551*t6027 - 1.34008*(t3063*t5997 + t3004*t6027) - 0.021147*(t3004*t5997 - 1.*t3063*t6027) + t56*t617*t639*t654 - 1.*t364*t648*t654 - 0.166996*(t402*t5752 + t56*t597*t639*t654) + t1035*t56*t654*t666;
  p_output1(13)=t373*t56*t617*t639 + t1524*t6429 - 0.166996*(t373*t56*t597*t639 + t402*t6429) + t1712*t6472 - 1.*t364*t373*t648 + t2037*t6593 + t1035*t373*t56*t666 + t2707*t6708 + t2899*t6918 + t3182*t6965 + t3551*t7020 - 1.34008*(t3063*t6965 + t3004*t7020) - 0.021147*(t3004*t6965 - 1.*t3063*t7020);
  p_output1(14)=-1.*t364*t56 - 1.*t617*t639*t648 - 1.*t1035*t648*t666 + t1524*t7263 - 0.166996*(-1.*t597*t639*t648 + t402*t7263) + t1712*t7306 + t2037*t7386 + t2707*t7432 + t2899*t7450 + t3182*t7488 + t3551*t7514 - 1.34008*(t3063*t7488 + t3004*t7514) - 0.021147*(t3004*t7488 - 1.*t3063*t7514);
  p_output1(15)=t1035*t4497 + t1712*t261*t4497 + t1524*t4497*t58 + t617*t7646 - 0.166996*(t402*t4497*t58 + t597*t7646) + t2037*t7675 + t2707*t7718 + t2899*t7761 + t3182*t7816 + t3551*t7838 - 1.34008*(t3063*t7816 + t3004*t7838) - 0.021147*(t3004*t7816 - 1.*t3063*t7838);
  p_output1(16)=t1082*t617 + t1035*t7904 + t1712*t261*t7904 + t1524*t58*t7904 - 0.166996*(t1082*t597 + t402*t58*t7904) + t2037*t7948 + t2707*t7999 + t2899*t8011 + t3182*t8034 + t3551*t8058 - 1.34008*(t3063*t8034 + t3004*t8058) - 0.021147*(t3004*t8034 - 1.*t3063*t8058);
  p_output1(17)=t1035*t56*t639 + t1712*t261*t56*t639 + t1524*t56*t58*t639 - 1.*t56*t617*t666 - 0.166996*(t402*t56*t58*t639 - 1.*t56*t597*t666) + t2037*t8142 + t2707*t8235 + t2899*t8243 + t3182*t8257 + t3551*t8279 - 1.34008*(t3063*t8257 + t3004*t8279) - 0.021147*(t3004*t8257 - 1.*t3063*t8279);
  p_output1(18)=0;
  p_output1(19)=0;
  p_output1(20)=0;
  p_output1(21)=0;
  p_output1(22)=0;
  p_output1(23)=0;
  p_output1(24)=0;
  p_output1(25)=0;
  p_output1(26)=0;
  p_output1(27)=0;
  p_output1(28)=0;
  p_output1(29)=0;
  p_output1(30)=0;
  p_output1(31)=0;
  p_output1(32)=0;
  p_output1(33)=t1712*t4683 + t56*t654*t8343 + t4546*t8353 + t1524*t8379 - 0.166996*t402*t8379 - 1.*t2037*t597*t8379 + t2707*t8413 + t2899*t8422 + t3182*t8443 + t3551*t8467 - 1.34008*(t3063*t8443 + t3004*t8467) - 0.021147*(t3004*t8443 - 1.*t3063*t8467);
  p_output1(34)=t373*t56*t8343 + t8353*t8542 + t1712*t8548 + t1524*t8557 - 0.166996*t402*t8557 - 1.*t2037*t597*t8557 + t2707*t8600 + t2899*t8623 + t3182*t8643 + t3551*t8667 - 1.34008*(t3063*t8643 + t3004*t8667) - 0.021147*(t3004*t8643 - 1.*t3063*t8667);
  p_output1(35)=-1.*t648*t8343 + t56*t666*t8353 + t1712*t8715 + t1524*t8740 - 0.166996*t402*t8740 - 1.*t2037*t597*t8740 + t2707*t8781 + t2899*t8800 + t3182*t8816 + t3551*t8827 - 1.34008*(t3063*t8816 + t3004*t8827) - 0.021147*(t3004*t8816 - 1.*t3063*t8827);
  p_output1(36)=-0.166996*t5053 + t4497*t8904 + t4683*t8940 + t2037*t8956 + t1581*t2707*t8956 - 1.*t1695*t2899*t8956 + t3182*t8999 + t3551*t9017 - 1.34008*(t3063*t8999 + t3004*t9017) - 0.021147*(t3004*t8999 - 1.*t3063*t9017);
  p_output1(37)=t7904*t8904 + t8548*t8940 + t2037*t9102 + t1581*t2707*t9102 - 1.*t1695*t2899*t9102 - 0.166996*t9133 + t3182*t9150 + t3551*t9170 - 1.34008*(t3063*t9150 + t3004*t9170) - 0.021147*(t3004*t9150 - 1.*t3063*t9170);
  p_output1(38)=t56*t639*t8904 + t8715*t8940 + t2037*t9235 + t1581*t2707*t9235 - 1.*t1695*t2899*t9235 - 0.166996*t9250 + t3182*t9291 + t3551*t9307 - 1.34008*(t3063*t9291 + t3004*t9307) - 0.021147*(t3004*t9291 - 1.*t3063*t9307);
  p_output1(39)=t2707*t5213 + t4880*t9381 + t5053*t9401 + t2899*t9446 + t3551*t9465 + t3182*t9483 - 0.021147*(-1.*t3063*t9465 + t3004*t9483) - 1.34008*(t3004*t9465 + t3063*t9483);
  p_output1(40)=t9133*t9401 + t9381*t9601 + t2899*t9638 + t2707*t9656 + t3551*t9671 + t3182*t9693 - 0.021147*(-1.*t3063*t9671 + t3004*t9693) - 1.34008*(t3004*t9671 + t3063*t9693);
  p_output1(41)=t9250*t9401 + t9381*t9732 + t2899*t9742 + t2707*t9750 + t3551*t9759 + t3182*t9769 - 0.021147*(-1.*t3063*t9759 + t3004*t9769) - 1.34008*(t3004*t9759 + t3063*t9769);
  p_output1(42)=t3551*t5327 + t5096*t9799 + t5213*t9809 + t3182*t9816 - 1.34008*(t5577 + t3063*t9816) - 0.021147*(t3004*t9816 + t9820);
  p_output1(43)=t9656*t9809 + t9799*t9834 + t3551*t9838 + t3182*t9841 - 0.021147*(t3004*t9841 + t9844) - 1.34008*(t3063*t9841 + t9850);
  p_output1(44)=t9750*t9809 + t9799*t9857 + t3551*t9865 + t3182*t9869 - 0.021147*(t3004*t9869 + t9872) - 1.34008*(t3063*t9869 + t9876);
  p_output1(45)=-1.34008*t5617 - 0.021147*(-1.*t3004*t5442 + t9820) + t5327*t9886 + t5442*t9892;
  p_output1(46)=t9838*t9886 + t9892*t9902 - 0.021147*(t9844 - 1.*t3004*t9902) - 1.34008*(t9850 - 1.*t3063*t9902);
  p_output1(47)=t9865*t9886 + t9892*t9915 - 0.021147*(t9872 - 1.*t3004*t9915) - 1.34008*(t9876 - 1.*t3063*t9915);
}


       
void Jp_rAnkle(Eigen::Matrix<double,3,16> &p_output1, const Eigen::Matrix<double,16,1> &var1)
{
  // Call Subroutines
  output1(p_output1, var1);

}
