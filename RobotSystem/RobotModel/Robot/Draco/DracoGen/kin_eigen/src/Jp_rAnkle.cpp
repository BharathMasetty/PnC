/*
 * Automatically Generated from Mathematica.
 * Thu 23 Aug 2018 15:50:28 GMT-05:00
 */
#include <stdio.h>
#include <stdlib.h>
#include <math.h>

#include "Jp_rAnkle.h"

#ifdef _MSC_VER
  #define INLINE __forceinline /* use __forceinline (VC++ specific) */
#else
  #define INLINE inline        /* use standard inline */
#endif

/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
INLINE double Power(double x, double y) { return pow(x, y); }
INLINE double Sqrt(double x) { return sqrt(x); }

INLINE double Abs(double x) { return fabs(x); }

INLINE double Exp(double x) { return exp(x); }
INLINE double Log(double x) { return log(x); }

INLINE double Sin(double x) { return sin(x); }
INLINE double Cos(double x) { return cos(x); }
INLINE double Tan(double x) { return tan(x); }

INLINE double Csc(double x) { return 1.0/sin(x); }
INLINE double Sec(double x) { return 1.0/cos(x); }

INLINE double ArcSin(double x) { return asin(x); }
INLINE double ArcCos(double x) { return acos(x); }
//INLINE double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
INLINE double ArcTan(double x, double y) { return atan2(y,x); }

INLINE double Sinh(double x) { return sinh(x); }
INLINE double Cosh(double x) { return cosh(x); }
INLINE double Tanh(double x) { return tanh(x); }

#define E 2.71828182845904523536029
#define Pi 3.14159265358979323846264
#define Degree 0.01745329251994329576924

/*
 * Sub functions
 */
static void output1(Eigen::Matrix<double,3,16> &p_output1, const Eigen::Matrix<double,16,1> &var1)
{
  double t428;
  double t83;
  double t111;
  double t145;
  double t253;
  double t1042;
  double t859;
  double t997;
  double t1142;
  double t523;
  double t546;
  double t580;
  double t643;
  double t33;
  double t1519;
  double t1556;
  double t1575;
  double t1006;
  double t1390;
  double t1412;
  double t1771;
  double t1774;
  double t1805;
  double t1875;
  double t1966;
  double t1990;
  double t2004;
  double t2023;
  double t2024;
  double t2028;
  double t2389;
  double t2400;
  double t2454;
  double t2627;
  double t2656;
  double t2685;
  double t2697;
  double t2870;
  double t2871;
  double t2895;
  double t3095;
  double t3217;
  double t3379;
  double t3444;
  double t3502;
  double t3506;
  double t3600;
  double t3635;
  double t3781;
  double t4037;
  double t4204;
  double t4228;
  double t4234;
  double t164;
  double t287;
  double t293;
  double t637;
  double t720;
  double t739;
  double t1456;
  double t1466;
  double t1493;
  double t1581;
  double t1585;
  double t1598;
  double t4947;
  double t4979;
  double t5014;
  double t2002;
  double t2012;
  double t2022;
  double t4737;
  double t4750;
  double t4803;
  double t5072;
  double t5140;
  double t5162;
  double t2294;
  double t2348;
  double t2381;
  double t2694;
  double t2805;
  double t2826;
  double t5201;
  double t5294;
  double t5320;
  double t5727;
  double t5810;
  double t5817;
  double t2950;
  double t2958;
  double t2963;
  double t3587;
  double t3606;
  double t3607;
  double t5895;
  double t5914;
  double t5917;
  double t5940;
  double t5986;
  double t5991;
  double t4115;
  double t4121;
  double t4193;
  double t6030;
  double t6070;
  double t6086;
  double t6103;
  double t6109;
  double t6121;
  double t6270;
  double t6272;
  double t6285;
  double t6314;
  double t6371;
  double t6377;
  double t6494;
  double t6501;
  double t6527;
  double t6545;
  double t6556;
  double t6586;
  double t6591;
  double t6608;
  double t6611;
  double t6651;
  double t6655;
  double t6668;
  double t6689;
  double t6714;
  double t6741;
  double t6831;
  double t6852;
  double t6857;
  double t6875;
  double t6878;
  double t6902;
  double t6949;
  double t6951;
  double t6971;
  double t6987;
  double t6995;
  double t7007;
  double t7018;
  double t7023;
  double t7025;
  double t7033;
  double t7044;
  double t7048;
  double t7081;
  double t7088;
  double t7096;
  double t7195;
  double t7210;
  double t7211;
  double t7229;
  double t7239;
  double t7253;
  double t7289;
  double t7299;
  double t7302;
  double t7314;
  double t7324;
  double t7325;
  double t7330;
  double t7332;
  double t7343;
  double t7350;
  double t7362;
  double t7383;
  double t7393;
  double t7398;
  double t7402;
  double t7450;
  double t7463;
  double t7464;
  double t7475;
  double t7476;
  double t7487;
  double t7513;
  double t7518;
  double t7521;
  double t7527;
  double t7533;
  double t7535;
  double t7549;
  double t7560;
  double t7561;
  double t7567;
  double t7572;
  double t7579;
  double t7619;
  double t7627;
  double t7634;
  double t7663;
  double t7664;
  double t7670;
  double t7708;
  double t7725;
  double t7727;
  double t7734;
  double t7736;
  double t7741;
  double t7748;
  double t7752;
  double t7754;
  double t7756;
  double t7757;
  double t7759;
  double t7821;
  double t7826;
  double t7827;
  double t7882;
  double t7885;
  double t7887;
  double t7900;
  double t7903;
  double t7911;
  double t7920;
  double t7928;
  double t7930;
  double t7935;
  double t7936;
  double t7945;
  double t8058;
  double t8070;
  double t8073;
  double t8086;
  double t8088;
  double t8090;
  double t8099;
  double t8102;
  double t8105;
  double t8109;
  double t8110;
  double t8112;
  double t8116;
  double t8138;
  double t8139;
  double t8034;
  double t8041;
  double t8043;
  double t8050;
  double t8052;
  double t8182;
  double t8186;
  double t8191;
  double t8209;
  double t8210;
  double t8198;
  double t8200;
  double t8202;
  double t8216;
  double t8217;
  double t8218;
  double t8231;
  double t8232;
  double t8234;
  double t8238;
  double t8239;
  double t8240;
  double t8251;
  double t8252;
  double t8259;
  double t8354;
  double t8355;
  double t8358;
  double t8330;
  double t8343;
  double t8347;
  double t8363;
  double t8366;
  double t8367;
  double t8373;
  double t8374;
  double t8378;
  double t8386;
  double t8389;
  double t8396;
  double t8403;
  double t8410;
  double t8411;
  double t8499;
  double t8500;
  double t8501;
  double t8529;
  double t8531;
  double t8540;
  double t8546;
  double t8552;
  double t8556;
  double t8475;
  double t8476;
  double t8488;
  double t8490;
  double t8493;
  double t8615;
  double t8620;
  double t8624;
  double t8643;
  double t8644;
  double t8655;
  double t8659;
  double t8662;
  double t8691;
  double t8733;
  double t8740;
  double t8741;
  double t8765;
  double t8770;
  double t8785;
  double t8798;
  double t8802;
  double t8804;
  double t8885;
  double t8888;
  double t8897;
  double t8909;
  double t8910;
  double t8920;
  double t8922;
  double t8933;
  double t8843;
  double t8846;
  double t8862;
  double t8867;
  double t8868;
  double t8634;
  double t8639;
  double t8640;
  double t8971;
  double t8974;
  double t8978;
  double t9000;
  double t9006;
  double t9007;
  double t9011;
  double t9016;
  double t9028;
  double t9031;
  double t9032;
  double t9036;
  double t9038;
  double t9040;
  double t9047;
  double t8756;
  double t8758;
  double t8760;
  double t9104;
  double t9105;
  double t9113;
  double t9124;
  double t9127;
  double t9132;
  double t9137;
  double t9142;
  double t9151;
  double t9154;
  double t9160;
  double t9162;
  double t9172;
  double t9181;
  double t9185;
  double t9266;
  double t9271;
  double t6224;
  double t9221;
  double t9224;
  double t9231;
  double t9251;
  double t9252;
  double t9313;
  double t9343;
  double t9347;
  double t9362;
  double t9368;
  double t9371;
  double t9373;
  double t9422;
  double t9424;
  double t9426;
  double t9446;
  double t9452;
  double t9459;
  double t9466;
  double t9279;
  double t6227;
  double t6236;
  double t9526;
  double t9532;
  double t9538;
  double t9539;
  double t9540;
  double t9378;
  double t9558;
  double t9560;
  double t9565;
  double t9394;
  double t9469;
  double t9614;
  double t9615;
  double t9620;
  double t9506;
  t428 = Sin(var1[3]);
  t83 = Cos(var1[11]);
  t111 = -1.*t83;
  t145 = 1. + t111;
  t253 = Sin(var1[11]);
  t1042 = Cos(var1[3]);
  t859 = Cos(var1[5]);
  t997 = Sin(var1[4]);
  t1142 = Sin(var1[5]);
  t523 = Cos(var1[12]);
  t546 = -1.*t523;
  t580 = 1. + t546;
  t643 = Sin(var1[12]);
  t33 = Cos(var1[4]);
  t1519 = -1.*t1042*t859;
  t1556 = -1.*t428*t997*t1142;
  t1575 = t1519 + t1556;
  t1006 = -1.*t859*t428*t997;
  t1390 = t1042*t1142;
  t1412 = t1006 + t1390;
  t1771 = t33*t253*t428;
  t1774 = t83*t1575;
  t1805 = t1771 + t1774;
  t1875 = Cos(var1[13]);
  t1966 = -1.*t1875;
  t1990 = 1. + t1966;
  t2004 = Sin(var1[13]);
  t2023 = -1.*t83*t33*t428;
  t2024 = t253*t1575;
  t2028 = t2023 + t2024;
  t2389 = t523*t1412;
  t2400 = -1.*t643*t1805;
  t2454 = t2389 + t2400;
  t2627 = Cos(var1[14]);
  t2656 = -1.*t2627;
  t2685 = 1. + t2656;
  t2697 = Sin(var1[14]);
  t2870 = t2004*t2028;
  t2871 = t1875*t2454;
  t2895 = t2870 + t2871;
  t3095 = t1875*t2028;
  t3217 = -1.*t2004*t2454;
  t3379 = t3095 + t3217;
  t3444 = Cos(var1[15]);
  t3502 = -1.*t3444;
  t3506 = 1. + t3502;
  t3600 = Sin(var1[15]);
  t3635 = -1.*t2697*t2895;
  t3781 = t2627*t3379;
  t4037 = t3635 + t3781;
  t4204 = t2627*t2895;
  t4228 = t2697*t3379;
  t4234 = t4204 + t4228;
  t164 = -0.0222*t145;
  t287 = -0.087*t253;
  t293 = 0. + t164 + t287;
  t637 = -0.3151*t580;
  t720 = 0.157*t643;
  t739 = 0. + t637 + t720;
  t1456 = -0.087*t145;
  t1466 = 0.0222*t253;
  t1493 = 0. + t1456 + t1466;
  t1581 = -0.157*t580;
  t1585 = -0.3151*t643;
  t1598 = 0. + t1581 + t1585;
  t4947 = -1.*t859*t428;
  t4979 = t1042*t997*t1142;
  t5014 = t4947 + t4979;
  t2002 = -0.0222*t1990;
  t2012 = 0.3801*t2004;
  t2022 = 0. + t2002 + t2012;
  t4737 = t1042*t859*t997;
  t4750 = t428*t1142;
  t4803 = t4737 + t4750;
  t5072 = -1.*t1042*t33*t253;
  t5140 = t83*t5014;
  t5162 = t5072 + t5140;
  t2294 = -0.3801*t1990;
  t2348 = -0.0222*t2004;
  t2381 = 0. + t2294 + t2348;
  t2694 = -0.8601*t2685;
  t2805 = -0.0222*t2697;
  t2826 = 0. + t2694 + t2805;
  t5201 = t83*t1042*t33;
  t5294 = t253*t5014;
  t5320 = t5201 + t5294;
  t5727 = t523*t4803;
  t5810 = -1.*t643*t5162;
  t5817 = t5727 + t5810;
  t2950 = -0.0222*t2685;
  t2958 = 0.8601*t2697;
  t2963 = 0. + t2950 + t2958;
  t3587 = -0.0211*t3506;
  t3606 = 1.3401*t3600;
  t3607 = 0. + t3587 + t3606;
  t5895 = t2004*t5320;
  t5914 = t1875*t5817;
  t5917 = t5895 + t5914;
  t5940 = t1875*t5320;
  t5986 = -1.*t2004*t5817;
  t5991 = t5940 + t5986;
  t4115 = -1.3401*t3506;
  t4121 = -0.0211*t3600;
  t4193 = 0. + t4115 + t4121;
  t6030 = -1.*t2697*t5917;
  t6070 = t2627*t5991;
  t6086 = t6030 + t6070;
  t6103 = t2627*t5917;
  t6109 = t2697*t5991;
  t6121 = t6103 + t6109;
  t6270 = t1042*t253*t997;
  t6272 = t83*t1042*t33*t1142;
  t6285 = t6270 + t6272;
  t6314 = -1.*t83*t1042*t997;
  t6371 = t1042*t33*t253*t1142;
  t6377 = t6314 + t6371;
  t6494 = t523*t1042*t33*t859;
  t6501 = -1.*t643*t6285;
  t6527 = t6494 + t6501;
  t6545 = t2004*t6377;
  t6556 = t1875*t6527;
  t6586 = t6545 + t6556;
  t6591 = t1875*t6377;
  t6608 = -1.*t2004*t6527;
  t6611 = t6591 + t6608;
  t6651 = -1.*t2697*t6586;
  t6655 = t2627*t6611;
  t6668 = t6651 + t6655;
  t6689 = t2627*t6586;
  t6714 = t2697*t6611;
  t6741 = t6689 + t6714;
  t6831 = t253*t428*t997;
  t6852 = t83*t33*t428*t1142;
  t6857 = t6831 + t6852;
  t6875 = -1.*t83*t428*t997;
  t6878 = t33*t253*t428*t1142;
  t6902 = t6875 + t6878;
  t6949 = t523*t33*t859*t428;
  t6951 = -1.*t643*t6857;
  t6971 = t6949 + t6951;
  t6987 = t2004*t6902;
  t6995 = t1875*t6971;
  t7007 = t6987 + t6995;
  t7018 = t1875*t6902;
  t7023 = -1.*t2004*t6971;
  t7025 = t7018 + t7023;
  t7033 = -1.*t2697*t7007;
  t7044 = t2627*t7025;
  t7048 = t7033 + t7044;
  t7081 = t2627*t7007;
  t7088 = t2697*t7025;
  t7096 = t7081 + t7088;
  t7195 = t33*t253;
  t7210 = -1.*t83*t997*t1142;
  t7211 = t7195 + t7210;
  t7229 = -1.*t83*t33;
  t7239 = -1.*t253*t997*t1142;
  t7253 = t7229 + t7239;
  t7289 = -1.*t523*t859*t997;
  t7299 = -1.*t643*t7211;
  t7302 = t7289 + t7299;
  t7314 = t2004*t7253;
  t7324 = t1875*t7302;
  t7325 = t7314 + t7324;
  t7330 = t1875*t7253;
  t7332 = -1.*t2004*t7302;
  t7343 = t7330 + t7332;
  t7350 = -1.*t2697*t7325;
  t7362 = t2627*t7343;
  t7383 = t7350 + t7362;
  t7393 = t2627*t7325;
  t7398 = t2697*t7343;
  t7402 = t7393 + t7398;
  t7450 = t859*t428;
  t7463 = -1.*t1042*t997*t1142;
  t7464 = t7450 + t7463;
  t7475 = -1.*t83*t643*t4803;
  t7476 = t523*t7464;
  t7487 = t7475 + t7476;
  t7513 = t253*t2004*t4803;
  t7518 = t1875*t7487;
  t7521 = t7513 + t7518;
  t7527 = t1875*t253*t4803;
  t7533 = -1.*t2004*t7487;
  t7535 = t7527 + t7533;
  t7549 = -1.*t2697*t7521;
  t7560 = t2627*t7535;
  t7561 = t7549 + t7560;
  t7567 = t2627*t7521;
  t7572 = t2697*t7535;
  t7579 = t7567 + t7572;
  t7619 = t859*t428*t997;
  t7627 = -1.*t1042*t1142;
  t7634 = t7619 + t7627;
  t7663 = -1.*t83*t643*t7634;
  t7664 = t523*t1575;
  t7670 = t7663 + t7664;
  t7708 = t253*t2004*t7634;
  t7725 = t1875*t7670;
  t7727 = t7708 + t7725;
  t7734 = t1875*t253*t7634;
  t7736 = -1.*t2004*t7670;
  t7741 = t7734 + t7736;
  t7748 = -1.*t2697*t7727;
  t7752 = t2627*t7741;
  t7754 = t7748 + t7752;
  t7756 = t2627*t7727;
  t7757 = t2697*t7741;
  t7759 = t7756 + t7757;
  t7821 = -1.*t83*t33*t859*t643;
  t7826 = -1.*t523*t33*t1142;
  t7827 = t7821 + t7826;
  t7882 = t33*t859*t253*t2004;
  t7885 = t1875*t7827;
  t7887 = t7882 + t7885;
  t7900 = t1875*t33*t859*t253;
  t7903 = -1.*t2004*t7827;
  t7911 = t7900 + t7903;
  t7920 = -1.*t2697*t7887;
  t7928 = t2627*t7911;
  t7930 = t7920 + t7928;
  t7935 = t2627*t7887;
  t7936 = t2697*t7911;
  t7945 = t7935 + t7936;
  t8058 = -1.*t83*t1042*t33;
  t8070 = -1.*t253*t5014;
  t8073 = t8058 + t8070;
  t8086 = t2004*t5162;
  t8088 = -1.*t1875*t643*t8073;
  t8090 = t8086 + t8088;
  t8099 = t1875*t5162;
  t8102 = t643*t2004*t8073;
  t8105 = t8099 + t8102;
  t8109 = -1.*t2697*t8090;
  t8110 = t2627*t8105;
  t8112 = t8109 + t8110;
  t8116 = t2627*t8090;
  t8138 = t2697*t8105;
  t8139 = t8116 + t8138;
  t8034 = -0.087*t83;
  t8041 = -0.0222*t253;
  t8043 = t8034 + t8041;
  t8050 = 0.0222*t83;
  t8052 = t8050 + t287;
  t8182 = t1042*t859;
  t8186 = t428*t997*t1142;
  t8191 = t8182 + t8186;
  t8209 = -1.*t253*t8191;
  t8210 = t2023 + t8209;
  t8198 = -1.*t33*t253*t428;
  t8200 = t83*t8191;
  t8202 = t8198 + t8200;
  t8216 = t2004*t8202;
  t8217 = -1.*t1875*t643*t8210;
  t8218 = t8216 + t8217;
  t8231 = t1875*t8202;
  t8232 = t643*t2004*t8210;
  t8234 = t8231 + t8232;
  t8238 = -1.*t2697*t8218;
  t8239 = t2627*t8234;
  t8240 = t8238 + t8239;
  t8251 = t2627*t8218;
  t8252 = t2697*t8234;
  t8259 = t8251 + t8252;
  t8354 = t83*t997;
  t8355 = -1.*t33*t253*t1142;
  t8358 = t8354 + t8355;
  t8330 = t253*t997;
  t8343 = t83*t33*t1142;
  t8347 = t8330 + t8343;
  t8363 = t2004*t8347;
  t8366 = -1.*t1875*t643*t8358;
  t8367 = t8363 + t8366;
  t8373 = t1875*t8347;
  t8374 = t643*t2004*t8358;
  t8378 = t8373 + t8374;
  t8386 = -1.*t2697*t8367;
  t8389 = t2627*t8378;
  t8396 = t8386 + t8389;
  t8403 = t2627*t8367;
  t8410 = t2697*t8378;
  t8411 = t8403 + t8410;
  t8499 = -1.*t643*t4803;
  t8500 = -1.*t523*t5162;
  t8501 = t8499 + t8500;
  t8529 = -1.*t2627*t2004*t8501;
  t8531 = -1.*t1875*t2697*t8501;
  t8540 = t8529 + t8531;
  t8546 = t1875*t2627*t8501;
  t8552 = -1.*t2004*t2697*t8501;
  t8556 = t8546 + t8552;
  t8475 = 0.157*t523;
  t8476 = t8475 + t1585;
  t8488 = -0.3151*t523;
  t8490 = -0.157*t643;
  t8493 = t8488 + t8490;
  t8615 = -1.*t643*t7634;
  t8620 = -1.*t523*t8202;
  t8624 = t8615 + t8620;
  t8643 = -1.*t2627*t2004*t8624;
  t8644 = -1.*t1875*t2697*t8624;
  t8655 = t8643 + t8644;
  t8659 = t1875*t2627*t8624;
  t8662 = -1.*t2004*t2697*t8624;
  t8691 = t8659 + t8662;
  t8733 = -1.*t33*t859*t643;
  t8740 = -1.*t523*t8347;
  t8741 = t8733 + t8740;
  t8765 = -1.*t2627*t2004*t8741;
  t8770 = -1.*t1875*t2697*t8741;
  t8785 = t8765 + t8770;
  t8798 = t1875*t2627*t8741;
  t8802 = -1.*t2004*t2697*t8741;
  t8804 = t8798 + t8802;
  t8885 = -1.*t2004*t5320;
  t8888 = -1.*t1875*t5817;
  t8897 = t8885 + t8888;
  t8909 = t2697*t8897;
  t8910 = t8909 + t6070;
  t8920 = t2627*t8897;
  t8922 = -1.*t2697*t5991;
  t8933 = t8920 + t8922;
  t8843 = 0.3801*t1875;
  t8846 = t8843 + t2348;
  t8862 = -0.0222*t1875;
  t8867 = -0.3801*t2004;
  t8868 = t8862 + t8867;
  t8634 = t523*t7634;
  t8639 = -1.*t643*t8202;
  t8640 = t8634 + t8639;
  t8971 = t83*t33*t428;
  t8974 = t253*t8191;
  t8978 = t8971 + t8974;
  t9000 = -1.*t2004*t8978;
  t9006 = -1.*t1875*t8640;
  t9007 = t9000 + t9006;
  t9011 = t1875*t8978;
  t9016 = -1.*t2004*t8640;
  t9028 = t9011 + t9016;
  t9031 = t2697*t9007;
  t9032 = t2627*t9028;
  t9036 = t9031 + t9032;
  t9038 = t2627*t9007;
  t9040 = -1.*t2697*t9028;
  t9047 = t9038 + t9040;
  t8756 = t523*t33*t859;
  t8758 = -1.*t643*t8347;
  t8760 = t8756 + t8758;
  t9104 = -1.*t83*t997;
  t9105 = t33*t253*t1142;
  t9113 = t9104 + t9105;
  t9124 = -1.*t2004*t9113;
  t9127 = -1.*t1875*t8760;
  t9132 = t9124 + t9127;
  t9137 = t1875*t9113;
  t9142 = -1.*t2004*t8760;
  t9151 = t9137 + t9142;
  t9154 = t2697*t9132;
  t9160 = t2627*t9151;
  t9162 = t9154 + t9160;
  t9172 = t2627*t9132;
  t9181 = -1.*t2697*t9151;
  t9185 = t9172 + t9181;
  t9266 = -1.*t2627*t5917;
  t9271 = t9266 + t8922;
  t6224 = t3444*t6086;
  t9221 = -0.0222*t2627;
  t9224 = -0.8601*t2697;
  t9231 = t9221 + t9224;
  t9251 = 0.8601*t2627;
  t9252 = t9251 + t2805;
  t9313 = t2004*t8978;
  t9343 = t1875*t8640;
  t9347 = t9313 + t9343;
  t9362 = -1.*t2697*t9347;
  t9368 = t9362 + t9032;
  t9371 = -1.*t2627*t9347;
  t9373 = t9371 + t9040;
  t9422 = t2004*t9113;
  t9424 = t1875*t8760;
  t9426 = t9422 + t9424;
  t9446 = -1.*t2697*t9426;
  t9452 = t9446 + t9160;
  t9459 = -1.*t2627*t9426;
  t9466 = t9459 + t9181;
  t9279 = -1.*t3600*t6086;
  t6227 = -1.*t3600*t6121;
  t6236 = t6224 + t6227;
  t9526 = 1.3401*t3444;
  t9532 = t9526 + t4121;
  t9538 = -0.0211*t3444;
  t9539 = -1.3401*t3600;
  t9540 = t9538 + t9539;
  t9378 = -1.*t3600*t9368;
  t9558 = t2627*t9347;
  t9560 = t2697*t9028;
  t9565 = t9558 + t9560;
  t9394 = t3444*t9368;
  t9469 = -1.*t3600*t9452;
  t9614 = t2627*t9426;
  t9615 = t2697*t9151;
  t9620 = t9614 + t9615;
  t9506 = t3444*t9452;

  p_output1(0)=1.;
  p_output1(1)=0;
  p_output1(2)=0;
  p_output1(3)=0;
  p_output1(4)=1.;
  p_output1(5)=0;
  p_output1(6)=0;
  p_output1(7)=0;
  p_output1(8)=1.;
  p_output1(9)=t1493*t1575 + t1598*t1805 + t2022*t2028 + t2381*t2454 + t2826*t2895 + t2963*t3379 + t3607*t4037 + t4193*t4234 - 1.3401*(t3600*t4037 + t3444*t4234) - 0.0211*(t3444*t4037 - 1.*t3600*t4234) - 1.*t293*t33*t428 - 0.16705*(t1805*t523 + t1412*t643) + t1412*t739;
  p_output1(10)=t1042*t293*t33 + t1493*t5014 + t1598*t5162 + t2022*t5320 + t2381*t5817 + t2826*t5917 + t2963*t5991 + t3607*t6086 + t4193*t6121 - 1.3401*(t3600*t6086 + t3444*t6121) - 0.0211*t6236 - 0.16705*(t5162*t523 + t4803*t643) + t4803*t739;
  p_output1(11)=0;
  p_output1(12)=t1042*t1142*t1493*t33 + t1598*t6285 + t2022*t6377 + t2381*t6527 + t2826*t6586 + t2963*t6611 + t3607*t6668 + t4193*t6741 - 1.3401*(t3600*t6668 + t3444*t6741) - 0.0211*(t3444*t6668 - 1.*t3600*t6741) + t1042*t33*t739*t859 - 0.16705*(t523*t6285 + t1042*t33*t643*t859) - 1.*t1042*t293*t997;
  p_output1(13)=t1142*t1493*t33*t428 + t1598*t6857 + t2022*t6902 + t2381*t6971 + t2826*t7007 + t2963*t7025 + t3607*t7048 + t4193*t7096 - 1.3401*(t3600*t7048 + t3444*t7096) - 0.0211*(t3444*t7048 - 1.*t3600*t7096) + t33*t428*t739*t859 - 0.16705*(t523*t6857 + t33*t428*t643*t859) - 1.*t293*t428*t997;
  p_output1(14)=-1.*t293*t33 + t1598*t7211 + t2022*t7253 + t2381*t7302 + t2826*t7325 + t2963*t7343 + t3607*t7383 + t4193*t7402 - 1.3401*(t3600*t7383 + t3444*t7402) - 0.0211*(t3444*t7383 - 1.*t3600*t7402) - 1.*t1142*t1493*t997 - 1.*t739*t859*t997 - 0.16705*(t523*t7211 - 1.*t643*t859*t997);
  p_output1(15)=t1493*t4803 + t2022*t253*t4803 + t739*t7464 + t2381*t7487 + t2826*t7521 + t2963*t7535 + t3607*t7561 + t4193*t7579 - 1.3401*(t3600*t7561 + t3444*t7579) - 0.0211*(t3444*t7561 - 1.*t3600*t7579) + t1598*t4803*t83 - 0.16705*(t643*t7464 + t4803*t523*t83);
  p_output1(16)=t1575*t739 + t1493*t7634 + t2022*t253*t7634 + t2381*t7670 + t2826*t7727 + t2963*t7741 + t3607*t7754 + t4193*t7759 - 1.3401*(t3600*t7754 + t3444*t7759) - 0.0211*(t3444*t7754 - 1.*t3600*t7759) + t1598*t7634*t83 - 0.16705*(t1575*t643 + t523*t7634*t83);
  p_output1(17)=-1.*t1142*t33*t739 + t2381*t7827 + t2826*t7887 + t2963*t7911 + t3607*t7930 + t4193*t7945 - 1.3401*(t3600*t7930 + t3444*t7945) - 0.0211*(t3444*t7930 - 1.*t3600*t7945) + t1493*t33*t859 + t2022*t253*t33*t859 + t1598*t33*t83*t859 - 0.16705*(-1.*t1142*t33*t643 + t33*t523*t83*t859);
  p_output1(18)=0;
  p_output1(19)=0;
  p_output1(20)=0;
  p_output1(21)=0;
  p_output1(22)=0;
  p_output1(23)=0;
  p_output1(24)=0;
  p_output1(25)=0;
  p_output1(26)=0;
  p_output1(27)=0;
  p_output1(28)=0;
  p_output1(29)=0;
  p_output1(30)=0;
  p_output1(31)=0;
  p_output1(32)=0;
  p_output1(33)=t2022*t5162 + t1042*t33*t8043 + t5014*t8052 + t1598*t8073 - 0.16705*t523*t8073 - 1.*t2381*t643*t8073 + t2826*t8090 + t2963*t8105 + t3607*t8112 + t4193*t8139 - 1.3401*(t3600*t8112 + t3444*t8139) - 0.0211*(t3444*t8112 - 1.*t3600*t8139);
  p_output1(34)=t33*t428*t8043 + t8052*t8191 + t2022*t8202 + t1598*t8210 - 0.16705*t523*t8210 - 1.*t2381*t643*t8210 + t2826*t8218 + t2963*t8234 + t3607*t8240 + t4193*t8259 - 1.3401*(t3600*t8240 + t3444*t8259) - 0.0211*(t3444*t8240 - 1.*t3600*t8259);
  p_output1(35)=t1142*t33*t8052 + t2022*t8347 + t1598*t8358 - 0.16705*t523*t8358 - 1.*t2381*t643*t8358 + t2826*t8367 + t2963*t8378 + t3607*t8396 + t4193*t8411 - 1.3401*(t3600*t8396 + t3444*t8411) - 0.0211*(t3444*t8396 - 1.*t3600*t8411) - 1.*t8043*t997;
  p_output1(36)=-0.16705*t5817 + t4803*t8476 + t5162*t8493 + t2381*t8501 + t1875*t2826*t8501 - 1.*t2004*t2963*t8501 + t3607*t8540 + t4193*t8556 - 1.3401*(t3600*t8540 + t3444*t8556) - 0.0211*(t3444*t8540 - 1.*t3600*t8556);
  p_output1(37)=t7634*t8476 + t8202*t8493 + t2381*t8624 + t1875*t2826*t8624 - 1.*t2004*t2963*t8624 - 0.16705*t8640 + t3607*t8655 + t4193*t8691 - 1.3401*(t3600*t8655 + t3444*t8691) - 0.0211*(t3444*t8655 - 1.*t3600*t8691);
  p_output1(38)=t8347*t8493 + t33*t8476*t859 + t2381*t8741 + t1875*t2826*t8741 - 1.*t2004*t2963*t8741 - 0.16705*t8760 + t3607*t8785 + t4193*t8804 - 1.3401*(t3600*t8785 + t3444*t8804) - 0.0211*(t3444*t8785 - 1.*t3600*t8804);
  p_output1(39)=t2826*t5991 + t5320*t8846 + t5817*t8868 + t2963*t8897 + t4193*t8910 + t3607*t8933 - 0.0211*(-1.*t3600*t8910 + t3444*t8933) - 1.3401*(t3444*t8910 + t3600*t8933);
  p_output1(40)=t8640*t8868 + t8846*t8978 + t2963*t9007 + t2826*t9028 + t4193*t9036 + t3607*t9047 - 0.0211*(-1.*t3600*t9036 + t3444*t9047) - 1.3401*(t3444*t9036 + t3600*t9047);
  p_output1(41)=t8760*t8868 + t8846*t9113 + t2963*t9132 + t2826*t9151 + t4193*t9162 + t3607*t9185 - 0.0211*(-1.*t3600*t9162 + t3444*t9185) - 1.3401*(t3444*t9162 + t3600*t9185);
  p_output1(42)=t4193*t6086 + t5917*t9231 + t5991*t9252 + t3607*t9271 - 1.3401*(t6224 + t3600*t9271) - 0.0211*(t3444*t9271 + t9279);
  p_output1(43)=t9028*t9252 + t9231*t9347 + t4193*t9368 + t3607*t9373 - 0.0211*(t3444*t9373 + t9378) - 1.3401*(t3600*t9373 + t9394);
  p_output1(44)=t9151*t9252 + t9231*t9426 + t4193*t9452 + t3607*t9466 - 0.0211*(t3444*t9466 + t9469) - 1.3401*(t3600*t9466 + t9506);
  p_output1(45)=-1.3401*t6236 - 0.0211*(-1.*t3444*t6121 + t9279) + t6086*t9532 + t6121*t9540;
  p_output1(46)=t9368*t9532 + t9540*t9565 - 0.0211*(t9378 - 1.*t3444*t9565) - 1.3401*(t9394 - 1.*t3600*t9565);
  p_output1(47)=t9452*t9532 + t9540*t9620 - 0.0211*(t9469 - 1.*t3444*t9620) - 1.3401*(t9506 - 1.*t3600*t9620);
}


       
void Jp_rAnkle(Eigen::Matrix<double,3,16> &p_output1, const Eigen::Matrix<double,16,1> &var1)
{
  // Call Subroutines
  output1(p_output1, var1);

}
