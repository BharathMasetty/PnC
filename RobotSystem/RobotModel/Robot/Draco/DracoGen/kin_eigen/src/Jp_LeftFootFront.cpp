/*
 * Automatically Generated from Mathematica.
 * Thu 23 Aug 2018 15:50:31 GMT-05:00
 */
#include <stdio.h>
#include <stdlib.h>
#include <math.h>

#include "Jp_LeftFootFront.h"

#ifdef _MSC_VER
  #define INLINE __forceinline /* use __forceinline (VC++ specific) */
#else
  #define INLINE inline        /* use standard inline */
#endif

/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
INLINE double Power(double x, double y) { return pow(x, y); }
INLINE double Sqrt(double x) { return sqrt(x); }

INLINE double Abs(double x) { return fabs(x); }

INLINE double Exp(double x) { return exp(x); }
INLINE double Log(double x) { return log(x); }

INLINE double Sin(double x) { return sin(x); }
INLINE double Cos(double x) { return cos(x); }
INLINE double Tan(double x) { return tan(x); }

INLINE double Csc(double x) { return 1.0/sin(x); }
INLINE double Sec(double x) { return 1.0/cos(x); }

INLINE double ArcSin(double x) { return asin(x); }
INLINE double ArcCos(double x) { return acos(x); }
//INLINE double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
INLINE double ArcTan(double x, double y) { return atan2(y,x); }

INLINE double Sinh(double x) { return sinh(x); }
INLINE double Cosh(double x) { return cosh(x); }
INLINE double Tanh(double x) { return tanh(x); }

#define E 2.71828182845904523536029
#define Pi 3.14159265358979323846264
#define Degree 0.01745329251994329576924

/*
 * Sub functions
 */
static void output1(Eigen::Matrix<double,3,16> &p_output1, const Eigen::Matrix<double,16,1> &var1)
{
  double t515;
  double t880;
  double t921;
  double t949;
  double t956;
  double t9;
  double t197;
  double t445;
  double t635;
  double t654;
  double t665;
  double t707;
  double t1195;
  double t1397;
  double t1453;
  double t1470;
  double t1521;
  double t1334;
  double t1345;
  double t1351;
  double t1649;
  double t1662;
  double t1714;
  double t2099;
  double t2193;
  double t2244;
  double t2346;
  double t1974;
  double t2027;
  double t2062;
  double t2466;
  double t2497;
  double t2533;
  double t2578;
  double t2588;
  double t2610;
  double t2654;
  double t2733;
  double t2738;
  double t2739;
  double t2946;
  double t2957;
  double t2961;
  double t2998;
  double t3000;
  double t3010;
  double t3054;
  double t3114;
  double t3131;
  double t3216;
  double t3541;
  double t3553;
  double t3574;
  double t954;
  double t983;
  double t998;
  double t1213;
  double t1236;
  double t1280;
  double t3846;
  double t3880;
  double t3883;
  double t1496;
  double t1539;
  double t1555;
  double t1767;
  double t1790;
  double t1819;
  double t3963;
  double t3966;
  double t4012;
  double t4044;
  double t4047;
  double t4116;
  double t2313;
  double t2350;
  double t2357;
  double t2543;
  double t2552;
  double t2564;
  double t2621;
  double t2673;
  double t2679;
  double t4367;
  double t4397;
  double t4425;
  double t4461;
  double t4467;
  double t4501;
  double t2905;
  double t2918;
  double t2943;
  double t3016;
  double t3086;
  double t3087;
  double t4523;
  double t4536;
  double t4543;
  double t4562;
  double t4603;
  double t4621;
  double t3363;
  double t3466;
  double t3535;
  double t4647;
  double t4655;
  double t4688;
  double t4742;
  double t4843;
  double t4844;
  double t5075;
  double t5077;
  double t5091;
  double t5321;
  double t5324;
  double t5337;
  double t5384;
  double t5395;
  double t5408;
  double t5425;
  double t5472;
  double t5477;
  double t5492;
  double t5507;
  double t5519;
  double t5540;
  double t5554;
  double t5583;
  double t5614;
  double t5626;
  double t5637;
  double t5809;
  double t5812;
  double t5816;
  double t5992;
  double t5993;
  double t6048;
  double t6056;
  double t6058;
  double t6070;
  double t6090;
  double t6115;
  double t6124;
  double t6158;
  double t6165;
  double t6168;
  double t6211;
  double t6238;
  double t6270;
  double t6335;
  double t6404;
  double t6417;
  double t6638;
  double t6644;
  double t6648;
  double t6718;
  double t6739;
  double t6743;
  double t6748;
  double t6754;
  double t6756;
  double t6806;
  double t6819;
  double t6829;
  double t6837;
  double t6841;
  double t6859;
  double t6878;
  double t6901;
  double t6925;
  double t6931;
  double t6938;
  double t6953;
  double t7110;
  double t7128;
  double t7133;
  double t7164;
  double t7165;
  double t7167;
  double t7197;
  double t7228;
  double t7234;
  double t7254;
  double t7265;
  double t7278;
  double t7295;
  double t7313;
  double t7314;
  double t7348;
  double t7352;
  double t7362;
  double t7431;
  double t7432;
  double t7436;
  double t7464;
  double t7468;
  double t7472;
  double t7492;
  double t7510;
  double t7517;
  double t7519;
  double t7526;
  double t7530;
  double t7550;
  double t7567;
  double t7572;
  double t7576;
  double t7580;
  double t7581;
  double t7694;
  double t7702;
  double t7703;
  double t7729;
  double t7732;
  double t7745;
  double t7760;
  double t7762;
  double t7767;
  double t7778;
  double t7785;
  double t7786;
  double t7803;
  double t7805;
  double t7809;
  double t7900;
  double t7908;
  double t7911;
  double t7947;
  double t7957;
  double t7958;
  double t7964;
  double t7973;
  double t7985;
  double t7990;
  double t8001;
  double t8004;
  double t8018;
  double t8020;
  double t8023;
  double t7879;
  double t7880;
  double t7882;
  double t7894;
  double t7895;
  double t8056;
  double t8057;
  double t8070;
  double t8072;
  double t8082;
  double t8108;
  double t8116;
  double t8130;
  double t8138;
  double t8143;
  double t8144;
  double t8148;
  double t8153;
  double t8155;
  double t8163;
  double t8165;
  double t8167;
  double t8173;
  double t8176;
  double t8179;
  double t8280;
  double t8287;
  double t8293;
  double t8314;
  double t8328;
  double t8335;
  double t8344;
  double t8346;
  double t8349;
  double t8361;
  double t8362;
  double t8363;
  double t8374;
  double t8380;
  double t8382;
  double t8393;
  double t8409;
  double t8410;
  double t8507;
  double t8509;
  double t8510;
  double t8549;
  double t8566;
  double t8571;
  double t8576;
  double t8577;
  double t8583;
  double t8461;
  double t8462;
  double t8486;
  double t8488;
  double t8496;
  double t8659;
  double t8674;
  double t8678;
  double t8722;
  double t8723;
  double t8727;
  double t8744;
  double t8748;
  double t8759;
  double t8838;
  double t8840;
  double t8844;
  double t8906;
  double t8908;
  double t8909;
  double t8934;
  double t8957;
  double t8971;
  double t9075;
  double t9078;
  double t9096;
  double t9123;
  double t9132;
  double t9152;
  double t9163;
  double t9166;
  double t8703;
  double t8708;
  double t8709;
  double t9046;
  double t9048;
  double t9051;
  double t9059;
  double t9071;
  double t9217;
  double t9223;
  double t9224;
  double t9231;
  double t9234;
  double t9235;
  double t9244;
  double t9251;
  double t9255;
  double t9278;
  double t9280;
  double t9281;
  double t9286;
  double t9304;
  double t9307;
  double t8847;
  double t8858;
  double t8862;
  double t9384;
  double t9385;
  double t9386;
  double t9399;
  double t9408;
  double t9409;
  double t9428;
  double t9466;
  double t9467;
  double t9491;
  double t9503;
  double t9505;
  double t9512;
  double t9516;
  double t9519;
  double t9631;
  double t9636;
  double t4885;
  double t9558;
  double t9570;
  double t9572;
  double t9594;
  double t9598;
  double t9682;
  double t9685;
  double t9696;
  double t9711;
  double t9712;
  double t9717;
  double t9724;
  double t9744;
  double t9748;
  double t9750;
  double t9755;
  double t9758;
  double t9761;
  double t9762;
  double t9653;
  double t4927;
  double t4978;
  double t9780;
  double t9782;
  double t9784;
  double t9785;
  double t9786;
  double t9728;
  double t9794;
  double t9795;
  double t9796;
  double t9736;
  double t9764;
  double t9807;
  double t9808;
  double t9809;
  double t9773;
  t515 = Sin(var1[3]);
  t880 = Cos(var1[6]);
  t921 = -1.*t880;
  t949 = 1. + t921;
  t956 = Sin(var1[6]);
  t9 = Cos(var1[3]);
  t197 = Cos(var1[5]);
  t445 = -1.*t9*t197;
  t635 = Sin(var1[4]);
  t654 = Sin(var1[5]);
  t665 = -1.*t515*t635*t654;
  t707 = t445 + t665;
  t1195 = Cos(var1[4]);
  t1397 = Cos(var1[7]);
  t1453 = -1.*t1397;
  t1470 = 1. + t1453;
  t1521 = Sin(var1[7]);
  t1334 = t880*t707;
  t1345 = t1195*t515*t956;
  t1351 = t1334 + t1345;
  t1649 = -1.*t197*t515*t635;
  t1662 = t9*t654;
  t1714 = t1649 + t1662;
  t2099 = Cos(var1[8]);
  t2193 = -1.*t2099;
  t2244 = 1. + t2193;
  t2346 = Sin(var1[8]);
  t1974 = t1397*t1714;
  t2027 = -1.*t1351*t1521;
  t2062 = t1974 + t2027;
  t2466 = -1.*t1195*t880*t515;
  t2497 = t707*t956;
  t2533 = t2466 + t2497;
  t2578 = Cos(var1[9]);
  t2588 = -1.*t2578;
  t2610 = 1. + t2588;
  t2654 = Sin(var1[9]);
  t2733 = t2099*t2062;
  t2738 = t2533*t2346;
  t2739 = t2733 + t2738;
  t2946 = t2099*t2533;
  t2957 = -1.*t2062*t2346;
  t2961 = t2946 + t2957;
  t2998 = Cos(var1[10]);
  t3000 = -1.*t2998;
  t3010 = 1. + t3000;
  t3054 = Sin(var1[10]);
  t3114 = -1.*t2654*t2739;
  t3131 = t2578*t2961;
  t3216 = t3114 + t3131;
  t3541 = t2578*t2739;
  t3553 = t2654*t2961;
  t3574 = t3541 + t3553;
  t954 = 0.087*t949;
  t983 = 0.0222*t956;
  t998 = 0. + t954 + t983;
  t1213 = -0.0222*t949;
  t1236 = 0.087*t956;
  t1280 = 0. + t1213 + t1236;
  t3846 = -1.*t197*t515;
  t3880 = t9*t635*t654;
  t3883 = t3846 + t3880;
  t1496 = 0.157*t1470;
  t1539 = -0.3151*t1521;
  t1555 = 0. + t1496 + t1539;
  t1767 = -0.3151*t1470;
  t1790 = -0.157*t1521;
  t1819 = 0. + t1767 + t1790;
  t3963 = t880*t3883;
  t3966 = -1.*t9*t1195*t956;
  t4012 = t3963 + t3966;
  t4044 = t9*t197*t635;
  t4047 = t515*t654;
  t4116 = t4044 + t4047;
  t2313 = -0.3801*t2244;
  t2350 = -0.0222*t2346;
  t2357 = 0. + t2313 + t2350;
  t2543 = -0.0222*t2244;
  t2552 = 0.3801*t2346;
  t2564 = 0. + t2543 + t2552;
  t2621 = -0.8601*t2610;
  t2673 = -0.0222*t2654;
  t2679 = 0. + t2621 + t2673;
  t4367 = t1397*t4116;
  t4397 = -1.*t4012*t1521;
  t4425 = t4367 + t4397;
  t4461 = t9*t1195*t880;
  t4467 = t3883*t956;
  t4501 = t4461 + t4467;
  t2905 = -0.0222*t2610;
  t2918 = 0.8601*t2654;
  t2943 = 0. + t2905 + t2918;
  t3016 = -0.0211*t3010;
  t3086 = 1.3401*t3054;
  t3087 = 0. + t3016 + t3086;
  t4523 = t2099*t4425;
  t4536 = t4501*t2346;
  t4543 = t4523 + t4536;
  t4562 = t2099*t4501;
  t4603 = -1.*t4425*t2346;
  t4621 = t4562 + t4603;
  t3363 = -1.3401*t3010;
  t3466 = -0.0211*t3054;
  t3535 = 0. + t3363 + t3466;
  t4647 = -1.*t2654*t4543;
  t4655 = t2578*t4621;
  t4688 = t4647 + t4655;
  t4742 = t2578*t4543;
  t4843 = t2654*t4621;
  t4844 = t4742 + t4843;
  t5075 = t9*t1195*t880*t654;
  t5077 = t9*t635*t956;
  t5091 = t5075 + t5077;
  t5321 = t9*t1195*t197*t1397;
  t5324 = -1.*t5091*t1521;
  t5337 = t5321 + t5324;
  t5384 = -1.*t9*t880*t635;
  t5395 = t9*t1195*t654*t956;
  t5408 = t5384 + t5395;
  t5425 = t2099*t5337;
  t5472 = t5408*t2346;
  t5477 = t5425 + t5472;
  t5492 = t2099*t5408;
  t5507 = -1.*t5337*t2346;
  t5519 = t5492 + t5507;
  t5540 = -1.*t2654*t5477;
  t5554 = t2578*t5519;
  t5583 = t5540 + t5554;
  t5614 = t2578*t5477;
  t5626 = t2654*t5519;
  t5637 = t5614 + t5626;
  t5809 = t1195*t880*t515*t654;
  t5812 = t515*t635*t956;
  t5816 = t5809 + t5812;
  t5992 = t1195*t197*t1397*t515;
  t5993 = -1.*t5816*t1521;
  t6048 = t5992 + t5993;
  t6056 = -1.*t880*t515*t635;
  t6058 = t1195*t515*t654*t956;
  t6070 = t6056 + t6058;
  t6090 = t2099*t6048;
  t6115 = t6070*t2346;
  t6124 = t6090 + t6115;
  t6158 = t2099*t6070;
  t6165 = -1.*t6048*t2346;
  t6168 = t6158 + t6165;
  t6211 = -1.*t2654*t6124;
  t6238 = t2578*t6168;
  t6270 = t6211 + t6238;
  t6335 = t2578*t6124;
  t6404 = t2654*t6168;
  t6417 = t6335 + t6404;
  t6638 = -1.*t880*t635*t654;
  t6644 = t1195*t956;
  t6648 = t6638 + t6644;
  t6718 = -1.*t197*t1397*t635;
  t6739 = -1.*t6648*t1521;
  t6743 = t6718 + t6739;
  t6748 = -1.*t1195*t880;
  t6754 = -1.*t635*t654*t956;
  t6756 = t6748 + t6754;
  t6806 = t2099*t6743;
  t6819 = t6756*t2346;
  t6829 = t6806 + t6819;
  t6837 = t2099*t6756;
  t6841 = -1.*t6743*t2346;
  t6859 = t6837 + t6841;
  t6878 = -1.*t2654*t6829;
  t6901 = t2578*t6859;
  t6925 = t6878 + t6901;
  t6931 = t2578*t6829;
  t6938 = t2654*t6859;
  t6953 = t6931 + t6938;
  t7110 = t197*t515;
  t7128 = -1.*t9*t635*t654;
  t7133 = t7110 + t7128;
  t7164 = t1397*t7133;
  t7165 = -1.*t880*t4116*t1521;
  t7167 = t7164 + t7165;
  t7197 = t2099*t7167;
  t7228 = t4116*t956*t2346;
  t7234 = t7197 + t7228;
  t7254 = t2099*t4116*t956;
  t7265 = -1.*t7167*t2346;
  t7278 = t7254 + t7265;
  t7295 = -1.*t2654*t7234;
  t7313 = t2578*t7278;
  t7314 = t7295 + t7313;
  t7348 = t2578*t7234;
  t7352 = t2654*t7278;
  t7362 = t7348 + t7352;
  t7431 = t197*t515*t635;
  t7432 = -1.*t9*t654;
  t7436 = t7431 + t7432;
  t7464 = t1397*t707;
  t7468 = -1.*t880*t7436*t1521;
  t7472 = t7464 + t7468;
  t7492 = t2099*t7472;
  t7510 = t7436*t956*t2346;
  t7517 = t7492 + t7510;
  t7519 = t2099*t7436*t956;
  t7526 = -1.*t7472*t2346;
  t7530 = t7519 + t7526;
  t7550 = -1.*t2654*t7517;
  t7567 = t2578*t7530;
  t7572 = t7550 + t7567;
  t7576 = t2578*t7517;
  t7580 = t2654*t7530;
  t7581 = t7576 + t7580;
  t7694 = -1.*t1195*t1397*t654;
  t7702 = -1.*t1195*t197*t880*t1521;
  t7703 = t7694 + t7702;
  t7729 = t2099*t7703;
  t7732 = t1195*t197*t956*t2346;
  t7745 = t7729 + t7732;
  t7760 = t1195*t197*t2099*t956;
  t7762 = -1.*t7703*t2346;
  t7767 = t7760 + t7762;
  t7778 = -1.*t2654*t7745;
  t7785 = t2578*t7767;
  t7786 = t7778 + t7785;
  t7803 = t2578*t7745;
  t7805 = t2654*t7767;
  t7809 = t7803 + t7805;
  t7900 = -1.*t9*t1195*t880;
  t7908 = -1.*t3883*t956;
  t7911 = t7900 + t7908;
  t7947 = -1.*t2099*t7911*t1521;
  t7957 = t4012*t2346;
  t7958 = t7947 + t7957;
  t7964 = t2099*t4012;
  t7973 = t7911*t1521*t2346;
  t7985 = t7964 + t7973;
  t7990 = -1.*t2654*t7958;
  t8001 = t2578*t7985;
  t8004 = t7990 + t8001;
  t8018 = t2578*t7958;
  t8020 = t2654*t7985;
  t8023 = t8018 + t8020;
  t7879 = 0.087*t880;
  t7880 = -0.0222*t956;
  t7882 = t7879 + t7880;
  t7894 = 0.0222*t880;
  t7895 = t7894 + t1236;
  t8056 = t9*t197;
  t8057 = t515*t635*t654;
  t8070 = t8056 + t8057;
  t8072 = -1.*t8070*t956;
  t8082 = t2466 + t8072;
  t8108 = t880*t8070;
  t8116 = -1.*t1195*t515*t956;
  t8130 = t8108 + t8116;
  t8138 = -1.*t2099*t8082*t1521;
  t8143 = t8130*t2346;
  t8144 = t8138 + t8143;
  t8148 = t2099*t8130;
  t8153 = t8082*t1521*t2346;
  t8155 = t8148 + t8153;
  t8163 = -1.*t2654*t8144;
  t8165 = t2578*t8155;
  t8167 = t8163 + t8165;
  t8173 = t2578*t8144;
  t8176 = t2654*t8155;
  t8179 = t8173 + t8176;
  t8280 = t880*t635;
  t8287 = -1.*t1195*t654*t956;
  t8293 = t8280 + t8287;
  t8314 = t1195*t880*t654;
  t8328 = t635*t956;
  t8335 = t8314 + t8328;
  t8344 = -1.*t2099*t8293*t1521;
  t8346 = t8335*t2346;
  t8349 = t8344 + t8346;
  t8361 = t2099*t8335;
  t8362 = t8293*t1521*t2346;
  t8363 = t8361 + t8362;
  t8374 = -1.*t2654*t8349;
  t8380 = t2578*t8363;
  t8382 = t8374 + t8380;
  t8393 = t2578*t8349;
  t8409 = t2654*t8363;
  t8410 = t8393 + t8409;
  t8507 = -1.*t1397*t4012;
  t8509 = -1.*t4116*t1521;
  t8510 = t8507 + t8509;
  t8549 = -1.*t2099*t2654*t8510;
  t8566 = -1.*t2578*t8510*t2346;
  t8571 = t8549 + t8566;
  t8576 = t2578*t2099*t8510;
  t8577 = -1.*t2654*t8510*t2346;
  t8583 = t8576 + t8577;
  t8461 = -0.157*t1397;
  t8462 = t8461 + t1539;
  t8486 = -0.3151*t1397;
  t8488 = 0.157*t1521;
  t8496 = t8486 + t8488;
  t8659 = -1.*t1397*t8130;
  t8674 = -1.*t7436*t1521;
  t8678 = t8659 + t8674;
  t8722 = -1.*t2099*t2654*t8678;
  t8723 = -1.*t2578*t8678*t2346;
  t8727 = t8722 + t8723;
  t8744 = t2578*t2099*t8678;
  t8748 = -1.*t2654*t8678*t2346;
  t8759 = t8744 + t8748;
  t8838 = -1.*t1397*t8335;
  t8840 = -1.*t1195*t197*t1521;
  t8844 = t8838 + t8840;
  t8906 = -1.*t2099*t2654*t8844;
  t8908 = -1.*t2578*t8844*t2346;
  t8909 = t8906 + t8908;
  t8934 = t2578*t2099*t8844;
  t8957 = -1.*t2654*t8844*t2346;
  t8971 = t8934 + t8957;
  t9075 = -1.*t2099*t4425;
  t9078 = -1.*t4501*t2346;
  t9096 = t9075 + t9078;
  t9123 = t2654*t9096;
  t9132 = t9123 + t4655;
  t9152 = t2578*t9096;
  t9163 = -1.*t2654*t4621;
  t9166 = t9152 + t9163;
  t8703 = t1397*t7436;
  t8708 = -1.*t8130*t1521;
  t8709 = t8703 + t8708;
  t9046 = -0.0222*t2099;
  t9048 = -0.3801*t2346;
  t9051 = t9046 + t9048;
  t9059 = 0.3801*t2099;
  t9071 = t9059 + t2350;
  t9217 = t1195*t880*t515;
  t9223 = t8070*t956;
  t9224 = t9217 + t9223;
  t9231 = -1.*t2099*t8709;
  t9234 = -1.*t9224*t2346;
  t9235 = t9231 + t9234;
  t9244 = t2099*t9224;
  t9251 = -1.*t8709*t2346;
  t9255 = t9244 + t9251;
  t9278 = t2654*t9235;
  t9280 = t2578*t9255;
  t9281 = t9278 + t9280;
  t9286 = t2578*t9235;
  t9304 = -1.*t2654*t9255;
  t9307 = t9286 + t9304;
  t8847 = t1195*t197*t1397;
  t8858 = -1.*t8335*t1521;
  t8862 = t8847 + t8858;
  t9384 = -1.*t880*t635;
  t9385 = t1195*t654*t956;
  t9386 = t9384 + t9385;
  t9399 = -1.*t2099*t8862;
  t9408 = -1.*t9386*t2346;
  t9409 = t9399 + t9408;
  t9428 = t2099*t9386;
  t9466 = -1.*t8862*t2346;
  t9467 = t9428 + t9466;
  t9491 = t2654*t9409;
  t9503 = t2578*t9467;
  t9505 = t9491 + t9503;
  t9512 = t2578*t9409;
  t9516 = -1.*t2654*t9467;
  t9519 = t9512 + t9516;
  t9631 = -1.*t2578*t4543;
  t9636 = t9631 + t9163;
  t4885 = t2998*t4688;
  t9558 = -0.0222*t2578;
  t9570 = -0.8601*t2654;
  t9572 = t9558 + t9570;
  t9594 = 0.8601*t2578;
  t9598 = t9594 + t2673;
  t9682 = t2099*t8709;
  t9685 = t9224*t2346;
  t9696 = t9682 + t9685;
  t9711 = -1.*t2654*t9696;
  t9712 = t9711 + t9280;
  t9717 = -1.*t2578*t9696;
  t9724 = t9717 + t9304;
  t9744 = t2099*t8862;
  t9748 = t9386*t2346;
  t9750 = t9744 + t9748;
  t9755 = -1.*t2654*t9750;
  t9758 = t9755 + t9503;
  t9761 = -1.*t2578*t9750;
  t9762 = t9761 + t9516;
  t9653 = -1.*t3054*t4688;
  t4927 = -1.*t3054*t4844;
  t4978 = t4885 + t4927;
  t9780 = 1.3401*t2998;
  t9782 = t9780 + t3466;
  t9784 = -0.0211*t2998;
  t9785 = -1.3401*t3054;
  t9786 = t9784 + t9785;
  t9728 = -1.*t3054*t9712;
  t9794 = t2578*t9696;
  t9795 = t2654*t9255;
  t9796 = t9794 + t9795;
  t9736 = t2998*t9712;
  t9764 = -1.*t3054*t9758;
  t9807 = t2578*t9750;
  t9808 = t2654*t9467;
  t9809 = t9807 + t9808;
  t9773 = t2998*t9758;

  p_output1(0)=1.;
  p_output1(1)=0;
  p_output1(2)=0;
  p_output1(3)=0;
  p_output1(4)=1.;
  p_output1(5)=0;
  p_output1(6)=0;
  p_output1(7)=0;
  p_output1(8)=1.;
  p_output1(9)=t1351*t1555 + 0.242*(t1351*t1397 + t1521*t1714) + t1714*t1819 + t2062*t2357 + t2533*t2564 + t2679*t2739 + t2943*t2961 + t3087*t3216 + t3535*t3574 - 1.325152*(t3054*t3216 + t2998*t3574) + 0.043912*(t2998*t3216 - 1.*t3054*t3574) - 1.*t1195*t1280*t515 + t707*t998;
  p_output1(10)=t1555*t4012 + t1819*t4116 + 0.242*(t1397*t4012 + t1521*t4116) + t2357*t4425 + t2564*t4501 + t2679*t4543 + t2943*t4621 + t3087*t4688 + t3535*t4844 - 1.325152*(t3054*t4688 + t2998*t4844) + 0.043912*t4978 + t1195*t1280*t9 + t3883*t998;
  p_output1(11)=0;
  p_output1(12)=t1555*t5091 + t2357*t5337 + t2564*t5408 + t2679*t5477 + t2943*t5519 + t3087*t5583 + t3535*t5637 - 1.325152*(t3054*t5583 + t2998*t5637) + 0.043912*(t2998*t5583 - 1.*t3054*t5637) + t1195*t1819*t197*t9 - 1.*t1280*t635*t9 + 0.242*(t1397*t5091 + t1195*t1521*t197*t9) + t1195*t654*t9*t998;
  p_output1(13)=t1195*t1819*t197*t515 + t1555*t5816 + 0.242*(t1195*t1521*t197*t515 + t1397*t5816) + t2357*t6048 + t2564*t6070 + t2679*t6124 + t2943*t6168 + t3087*t6270 - 1.*t1280*t515*t635 + t3535*t6417 - 1.325152*(t3054*t6270 + t2998*t6417) + 0.043912*(t2998*t6270 - 1.*t3054*t6417) + t1195*t515*t654*t998;
  p_output1(14)=-1.*t1195*t1280 - 1.*t1819*t197*t635 + t1555*t6648 + 0.242*(-1.*t1521*t197*t635 + t1397*t6648) + t2357*t6743 + t2564*t6756 + t2679*t6829 + t2943*t6859 + t3087*t6925 + t3535*t6953 - 1.325152*(t3054*t6925 + t2998*t6953) + 0.043912*(t2998*t6925 - 1.*t3054*t6953) - 1.*t635*t654*t998;
  p_output1(15)=t1819*t7133 + t2357*t7167 + t2679*t7234 + t2943*t7278 + t3087*t7314 + t3535*t7362 - 1.325152*(t3054*t7314 + t2998*t7362) + 0.043912*(t2998*t7314 - 1.*t3054*t7362) + t1555*t4116*t880 + 0.242*(t1521*t7133 + t1397*t4116*t880) + t2564*t4116*t956 + t4116*t998;
  p_output1(16)=t1819*t707 + t2357*t7472 + t2679*t7517 + t2943*t7530 + t3087*t7572 + t3535*t7581 - 1.325152*(t3054*t7572 + t2998*t7581) + 0.043912*(t2998*t7572 - 1.*t3054*t7581) + t1555*t7436*t880 + 0.242*(t1521*t707 + t1397*t7436*t880) + t2564*t7436*t956 + t7436*t998;
  p_output1(17)=-1.*t1195*t1819*t654 + t2357*t7703 + t2679*t7745 + t2943*t7767 + t3087*t7786 + t3535*t7809 - 1.325152*(t3054*t7786 + t2998*t7809) + 0.043912*(t2998*t7786 - 1.*t3054*t7809) + t1195*t1555*t197*t880 + 0.242*(-1.*t1195*t1521*t654 + t1195*t1397*t197*t880) + t1195*t197*t2564*t956 + t1195*t197*t998;
  p_output1(18)=t2564*t4012 + t3883*t7895 + 0.242*t1397*t7911 + t1555*t7911 - 1.*t1521*t2357*t7911 + t2679*t7958 + t2943*t7985 + t3087*t8004 + t3535*t8023 - 1.325152*(t3054*t8004 + t2998*t8023) + 0.043912*(t2998*t8004 - 1.*t3054*t8023) + t1195*t7882*t9;
  p_output1(19)=t1195*t515*t7882 + t7895*t8070 + 0.242*t1397*t8082 + t1555*t8082 - 1.*t1521*t2357*t8082 + t2564*t8130 + t2679*t8144 + t2943*t8155 + t3087*t8167 + t3535*t8179 - 1.325152*(t3054*t8167 + t2998*t8179) + 0.043912*(t2998*t8167 - 1.*t3054*t8179);
  p_output1(20)=-1.*t635*t7882 + t1195*t654*t7895 + 0.242*t1397*t8293 + t1555*t8293 - 1.*t1521*t2357*t8293 + t2564*t8335 + t2679*t8349 + t2943*t8363 + t3087*t8382 + t3535*t8410 - 1.325152*(t3054*t8382 + t2998*t8410) + 0.043912*(t2998*t8382 - 1.*t3054*t8410);
  p_output1(21)=0.242*t4425 + t4116*t8462 + t4012*t8496 + t2357*t8510 + t2099*t2679*t8510 - 1.*t2346*t2943*t8510 + t3087*t8571 + t3535*t8583 - 1.325152*(t3054*t8571 + t2998*t8583) + 0.043912*(t2998*t8571 - 1.*t3054*t8583);
  p_output1(22)=t7436*t8462 + t8130*t8496 + t2357*t8678 + t2099*t2679*t8678 - 1.*t2346*t2943*t8678 + 0.242*t8709 + t3087*t8727 + t3535*t8759 - 1.325152*(t3054*t8727 + t2998*t8759) + 0.043912*(t2998*t8727 - 1.*t3054*t8759);
  p_output1(23)=t1195*t197*t8462 + t8335*t8496 + t2357*t8844 + t2099*t2679*t8844 - 1.*t2346*t2943*t8844 + 0.242*t8862 + t3087*t8909 + t3535*t8971 - 1.325152*(t3054*t8909 + t2998*t8971) + 0.043912*(t2998*t8909 - 1.*t3054*t8971);
  p_output1(24)=t2679*t4621 + t4425*t9051 + t4501*t9071 + t2943*t9096 + t3535*t9132 + t3087*t9166 + 0.043912*(-1.*t3054*t9132 + t2998*t9166) - 1.325152*(t2998*t9132 + t3054*t9166);
  p_output1(25)=t8709*t9051 + t9071*t9224 + t2943*t9235 + t2679*t9255 + t3535*t9281 + t3087*t9307 + 0.043912*(-1.*t3054*t9281 + t2998*t9307) - 1.325152*(t2998*t9281 + t3054*t9307);
  p_output1(26)=t8862*t9051 + t9071*t9386 + t2943*t9409 + t2679*t9467 + t3535*t9505 + t3087*t9519 + 0.043912*(-1.*t3054*t9505 + t2998*t9519) - 1.325152*(t2998*t9505 + t3054*t9519);
  p_output1(27)=t3535*t4688 + t4543*t9572 + t4621*t9598 + t3087*t9636 - 1.325152*(t4885 + t3054*t9636) + 0.043912*(t2998*t9636 + t9653);
  p_output1(28)=t9255*t9598 + t9572*t9696 + t3535*t9712 + t3087*t9724 + 0.043912*(t2998*t9724 + t9728) - 1.325152*(t3054*t9724 + t9736);
  p_output1(29)=t9467*t9598 + t9572*t9750 + t3535*t9758 + t3087*t9762 + 0.043912*(t2998*t9762 + t9764) - 1.325152*(t3054*t9762 + t9773);
  p_output1(30)=-1.325152*t4978 + 0.043912*(-1.*t2998*t4844 + t9653) + t4688*t9782 + t4844*t9786;
  p_output1(31)=t9712*t9782 + t9786*t9796 + 0.043912*(t9728 - 1.*t2998*t9796) - 1.325152*(t9736 - 1.*t3054*t9796);
  p_output1(32)=t9758*t9782 + t9786*t9809 + 0.043912*(t9764 - 1.*t2998*t9809) - 1.325152*(t9773 - 1.*t3054*t9809);
  p_output1(33)=0;
  p_output1(34)=0;
  p_output1(35)=0;
  p_output1(36)=0;
  p_output1(37)=0;
  p_output1(38)=0;
  p_output1(39)=0;
  p_output1(40)=0;
  p_output1(41)=0;
  p_output1(42)=0;
  p_output1(43)=0;
  p_output1(44)=0;
  p_output1(45)=0;
  p_output1(46)=0;
  p_output1(47)=0;
}


       
void Jp_LeftFootFront(Eigen::Matrix<double,3,16> &p_output1, const Eigen::Matrix<double,16,1> &var1)
{
  // Call Subroutines
  output1(p_output1, var1);

}
