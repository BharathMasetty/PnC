/*
 * Automatically Generated from Mathematica.
 * Thu 16 Aug 2018 23:21:56 GMT-05:00
 */
#include <stdio.h>
#include <stdlib.h>
#include <math.h>

#include "Jp_LeftFootFront.h"

#ifdef _MSC_VER
  #define INLINE __forceinline /* use __forceinline (VC++ specific) */
#else
  #define INLINE inline        /* use standard inline */
#endif

/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
INLINE double Power(double x, double y) { return pow(x, y); }
INLINE double Sqrt(double x) { return sqrt(x); }

INLINE double Abs(double x) { return fabs(x); }

INLINE double Exp(double x) { return exp(x); }
INLINE double Log(double x) { return log(x); }

INLINE double Sin(double x) { return sin(x); }
INLINE double Cos(double x) { return cos(x); }
INLINE double Tan(double x) { return tan(x); }

INLINE double Csc(double x) { return 1.0/sin(x); }
INLINE double Sec(double x) { return 1.0/cos(x); }

INLINE double ArcSin(double x) { return asin(x); }
INLINE double ArcCos(double x) { return acos(x); }
//INLINE double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
INLINE double ArcTan(double x, double y) { return atan2(y,x); }

INLINE double Sinh(double x) { return sinh(x); }
INLINE double Cosh(double x) { return cosh(x); }
INLINE double Tanh(double x) { return tanh(x); }

#define E 2.71828182845904523536029
#define Pi 3.14159265358979323846264
#define Degree 0.01745329251994329576924

/*
 * Sub functions
 */
static void output1(Eigen::Matrix<double,3,16> &p_output1, const Eigen::Matrix<double,16,1> &var1)
{
  double t179;
  double t450;
  double t500;
  double t532;
  double t697;
  double t38;
  double t41;
  double t83;
  double t247;
  double t248;
  double t278;
  double t284;
  double t923;
  double t1398;
  double t1536;
  double t1558;
  double t1667;
  double t1275;
  double t1276;
  double t1346;
  double t1688;
  double t1696;
  double t1719;
  double t2184;
  double t2185;
  double t2203;
  double t2258;
  double t2124;
  double t2125;
  double t2137;
  double t2336;
  double t2356;
  double t2358;
  double t2501;
  double t2551;
  double t2591;
  double t2725;
  double t2955;
  double t2977;
  double t3025;
  double t3087;
  double t3136;
  double t3154;
  double t3197;
  double t3218;
  double t3226;
  double t3281;
  double t3340;
  double t3386;
  double t3406;
  double t3644;
  double t3646;
  double t3683;
  double t664;
  double t724;
  double t793;
  double t954;
  double t973;
  double t1009;
  double t4236;
  double t4272;
  double t4319;
  double t1662;
  double t1673;
  double t1680;
  double t1748;
  double t1756;
  double t1764;
  double t4664;
  double t4680;
  double t4719;
  double t4810;
  double t4833;
  double t4834;
  double t2211;
  double t2291;
  double t2292;
  double t2379;
  double t2410;
  double t2444;
  double t2710;
  double t2734;
  double t2738;
  double t4938;
  double t4945;
  double t4950;
  double t5025;
  double t5063;
  double t5071;
  double t3041;
  double t3054;
  double t3059;
  double t3264;
  double t3295;
  double t3299;
  double t5121;
  double t5149;
  double t5197;
  double t5212;
  double t5216;
  double t5219;
  double t3455;
  double t3458;
  double t3581;
  double t5289;
  double t5305;
  double t5318;
  double t5364;
  double t5365;
  double t5378;
  double t5496;
  double t5502;
  double t5522;
  double t5649;
  double t5673;
  double t5688;
  double t5697;
  double t5707;
  double t5724;
  double t5755;
  double t5760;
  double t5778;
  double t5790;
  double t5808;
  double t5814;
  double t5831;
  double t5845;
  double t5852;
  double t5907;
  double t5921;
  double t5956;
  double t6127;
  double t6130;
  double t6140;
  double t6313;
  double t6338;
  double t6366;
  double t6374;
  double t6381;
  double t6400;
  double t6403;
  double t6438;
  double t6456;
  double t6478;
  double t6480;
  double t6481;
  double t6510;
  double t6534;
  double t6539;
  double t6568;
  double t6579;
  double t6592;
  double t6716;
  double t6724;
  double t6727;
  double t6765;
  double t6767;
  double t6769;
  double t6783;
  double t6786;
  double t6790;
  double t6801;
  double t6825;
  double t6829;
  double t6850;
  double t6853;
  double t6855;
  double t6864;
  double t6867;
  double t6870;
  double t6890;
  double t6896;
  double t6924;
  double t7019;
  double t7024;
  double t7029;
  double t7123;
  double t7134;
  double t7140;
  double t7166;
  double t7173;
  double t7180;
  double t7191;
  double t7194;
  double t7220;
  double t7234;
  double t7236;
  double t7239;
  double t7248;
  double t7253;
  double t7259;
  double t7332;
  double t7340;
  double t7346;
  double t7419;
  double t7424;
  double t7455;
  double t7466;
  double t7475;
  double t7489;
  double t7499;
  double t7500;
  double t7513;
  double t7525;
  double t7526;
  double t7531;
  double t7540;
  double t7541;
  double t7545;
  double t7667;
  double t7680;
  double t7712;
  double t7752;
  double t7753;
  double t7765;
  double t7781;
  double t7784;
  double t7787;
  double t7791;
  double t7793;
  double t7798;
  double t7816;
  double t7821;
  double t7830;
  double t7935;
  double t7936;
  double t7951;
  double t7992;
  double t8002;
  double t8003;
  double t8010;
  double t8014;
  double t8021;
  double t8024;
  double t8026;
  double t8031;
  double t8053;
  double t8061;
  double t8070;
  double t7893;
  double t7898;
  double t7903;
  double t7912;
  double t7920;
  double t8142;
  double t8161;
  double t8163;
  double t8168;
  double t8171;
  double t8196;
  double t8200;
  double t8201;
  double t8203;
  double t8205;
  double t8206;
  double t8210;
  double t8215;
  double t8216;
  double t8225;
  double t8229;
  double t8232;
  double t8246;
  double t8251;
  double t8268;
  double t8344;
  double t8347;
  double t8349;
  double t8357;
  double t8360;
  double t8365;
  double t8367;
  double t8369;
  double t8378;
  double t8384;
  double t8391;
  double t8399;
  double t8413;
  double t8424;
  double t8430;
  double t8451;
  double t8455;
  double t8456;
  double t8569;
  double t8572;
  double t8574;
  double t8594;
  double t8600;
  double t8604;
  double t8620;
  double t8628;
  double t8634;
  double t8527;
  double t8528;
  double t8537;
  double t8544;
  double t8557;
  double t8686;
  double t8687;
  double t8690;
  double t8729;
  double t8739;
  double t8743;
  double t8752;
  double t8764;
  double t8774;
  double t8845;
  double t8848;
  double t8852;
  double t8909;
  double t8910;
  double t8911;
  double t8922;
  double t8950;
  double t8952;
  double t9119;
  double t9122;
  double t9142;
  double t9192;
  double t9202;
  double t9226;
  double t9227;
  double t9235;
  double t8701;
  double t8713;
  double t8714;
  double t9078;
  double t9082;
  double t9083;
  double t9102;
  double t9106;
  double t9296;
  double t9308;
  double t9312;
  double t9330;
  double t9339;
  double t9343;
  double t9346;
  double t9351;
  double t9370;
  double t9384;
  double t9414;
  double t9422;
  double t9428;
  double t9432;
  double t9433;
  double t8875;
  double t8886;
  double t8896;
  double t9542;
  double t9550;
  double t9563;
  double t9577;
  double t9594;
  double t9598;
  double t9600;
  double t9614;
  double t9615;
  double t9647;
  double t9653;
  double t9654;
  double t9679;
  double t9681;
  double t9685;
  double t9848;
  double t9853;
  double t5420;
  double t9772;
  double t9780;
  double t9794;
  double t9820;
  double t9822;
  double t9886;
  double t9893;
  double t9894;
  double t9915;
  double t9935;
  double t9942;
  double t9943;
  double t9980;
  double t9981;
  double t9982;
  double t9991;
  double t9993;
  double t9996;
  double t9998;
  double t9857;
  double t5422;
  double t5433;
  double t10018;
  double t10020;
  double t10022;
  double t10023;
  double t10024;
  double t9948;
  double t10033;
  double t10034;
  double t10035;
  double t9957;
  double t10004;
  double t10046;
  double t10047;
  double t10049;
  double t10011;
  t179 = Sin(var1[3]);
  t450 = Cos(var1[6]);
  t500 = -1.*t450;
  t532 = 1. + t500;
  t697 = Sin(var1[6]);
  t38 = Cos(var1[3]);
  t41 = Cos(var1[5]);
  t83 = -1.*t38*t41;
  t247 = Sin(var1[4]);
  t248 = Sin(var1[5]);
  t278 = -1.*t179*t247*t248;
  t284 = t83 + t278;
  t923 = Cos(var1[4]);
  t1398 = Cos(var1[7]);
  t1536 = -1.*t1398;
  t1558 = 1. + t1536;
  t1667 = Sin(var1[7]);
  t1275 = t450*t284;
  t1276 = t923*t179*t697;
  t1346 = t1275 + t1276;
  t1688 = -1.*t41*t179*t247;
  t1696 = t38*t248;
  t1719 = t1688 + t1696;
  t2184 = Cos(var1[8]);
  t2185 = -1.*t2184;
  t2203 = 1. + t2185;
  t2258 = Sin(var1[8]);
  t2124 = t1398*t1719;
  t2125 = -1.*t1346*t1667;
  t2137 = t2124 + t2125;
  t2336 = -1.*t923*t450*t179;
  t2356 = t284*t697;
  t2358 = t2336 + t2356;
  t2501 = Cos(var1[9]);
  t2551 = -1.*t2501;
  t2591 = 1. + t2551;
  t2725 = Sin(var1[9]);
  t2955 = t2184*t2137;
  t2977 = t2358*t2258;
  t3025 = t2955 + t2977;
  t3087 = t2184*t2358;
  t3136 = -1.*t2137*t2258;
  t3154 = t3087 + t3136;
  t3197 = Cos(var1[10]);
  t3218 = -1.*t3197;
  t3226 = 1. + t3218;
  t3281 = Sin(var1[10]);
  t3340 = -1.*t2725*t3025;
  t3386 = t2501*t3154;
  t3406 = t3340 + t3386;
  t3644 = t2501*t3025;
  t3646 = t2725*t3154;
  t3683 = t3644 + t3646;
  t664 = 0.087004*t532;
  t724 = 0.022225*t697;
  t793 = 0. + t664 + t724;
  t954 = -0.022225*t532;
  t973 = 0.087004*t697;
  t1009 = 0. + t954 + t973;
  t4236 = -1.*t41*t179;
  t4272 = t38*t247*t248;
  t4319 = t4236 + t4272;
  t1662 = 0.157004*t1558;
  t1673 = -0.31508*t1667;
  t1680 = 0. + t1662 + t1673;
  t1748 = -0.31508*t1558;
  t1756 = -0.157004*t1667;
  t1764 = 0. + t1748 + t1756;
  t4664 = t450*t4319;
  t4680 = -1.*t38*t923*t697;
  t4719 = t4664 + t4680;
  t4810 = t38*t41*t247;
  t4833 = t179*t248;
  t4834 = t4810 + t4833;
  t2211 = -0.38008*t2203;
  t2291 = -0.022225*t2258;
  t2292 = 0. + t2211 + t2291;
  t2379 = -0.022225*t2203;
  t2410 = 0.38008*t2258;
  t2444 = 0. + t2379 + t2410;
  t2710 = -0.86008*t2591;
  t2734 = -0.022225*t2725;
  t2738 = 0. + t2710 + t2734;
  t4938 = t1398*t4834;
  t4945 = -1.*t4719*t1667;
  t4950 = t4938 + t4945;
  t5025 = t38*t923*t450;
  t5063 = t4319*t697;
  t5071 = t5025 + t5063;
  t3041 = -0.022225*t2591;
  t3054 = 0.86008*t2725;
  t3059 = 0. + t3041 + t3054;
  t3264 = -0.021147*t3226;
  t3295 = 1.34008*t3281;
  t3299 = 0. + t3264 + t3295;
  t5121 = t2184*t4950;
  t5149 = t5071*t2258;
  t5197 = t5121 + t5149;
  t5212 = t2184*t5071;
  t5216 = -1.*t4950*t2258;
  t5219 = t5212 + t5216;
  t3455 = -1.34008*t3226;
  t3458 = -0.021147*t3281;
  t3581 = 0. + t3455 + t3458;
  t5289 = -1.*t2725*t5197;
  t5305 = t2501*t5219;
  t5318 = t5289 + t5305;
  t5364 = t2501*t5197;
  t5365 = t2725*t5219;
  t5378 = t5364 + t5365;
  t5496 = t38*t923*t450*t248;
  t5502 = t38*t247*t697;
  t5522 = t5496 + t5502;
  t5649 = t38*t923*t41*t1398;
  t5673 = -1.*t5522*t1667;
  t5688 = t5649 + t5673;
  t5697 = -1.*t38*t450*t247;
  t5707 = t38*t923*t248*t697;
  t5724 = t5697 + t5707;
  t5755 = t2184*t5688;
  t5760 = t5724*t2258;
  t5778 = t5755 + t5760;
  t5790 = t2184*t5724;
  t5808 = -1.*t5688*t2258;
  t5814 = t5790 + t5808;
  t5831 = -1.*t2725*t5778;
  t5845 = t2501*t5814;
  t5852 = t5831 + t5845;
  t5907 = t2501*t5778;
  t5921 = t2725*t5814;
  t5956 = t5907 + t5921;
  t6127 = t923*t450*t179*t248;
  t6130 = t179*t247*t697;
  t6140 = t6127 + t6130;
  t6313 = t923*t41*t1398*t179;
  t6338 = -1.*t6140*t1667;
  t6366 = t6313 + t6338;
  t6374 = -1.*t450*t179*t247;
  t6381 = t923*t179*t248*t697;
  t6400 = t6374 + t6381;
  t6403 = t2184*t6366;
  t6438 = t6400*t2258;
  t6456 = t6403 + t6438;
  t6478 = t2184*t6400;
  t6480 = -1.*t6366*t2258;
  t6481 = t6478 + t6480;
  t6510 = -1.*t2725*t6456;
  t6534 = t2501*t6481;
  t6539 = t6510 + t6534;
  t6568 = t2501*t6456;
  t6579 = t2725*t6481;
  t6592 = t6568 + t6579;
  t6716 = -1.*t450*t247*t248;
  t6724 = t923*t697;
  t6727 = t6716 + t6724;
  t6765 = -1.*t41*t1398*t247;
  t6767 = -1.*t6727*t1667;
  t6769 = t6765 + t6767;
  t6783 = -1.*t923*t450;
  t6786 = -1.*t247*t248*t697;
  t6790 = t6783 + t6786;
  t6801 = t2184*t6769;
  t6825 = t6790*t2258;
  t6829 = t6801 + t6825;
  t6850 = t2184*t6790;
  t6853 = -1.*t6769*t2258;
  t6855 = t6850 + t6853;
  t6864 = -1.*t2725*t6829;
  t6867 = t2501*t6855;
  t6870 = t6864 + t6867;
  t6890 = t2501*t6829;
  t6896 = t2725*t6855;
  t6924 = t6890 + t6896;
  t7019 = t41*t179;
  t7024 = -1.*t38*t247*t248;
  t7029 = t7019 + t7024;
  t7123 = t1398*t7029;
  t7134 = -1.*t450*t4834*t1667;
  t7140 = t7123 + t7134;
  t7166 = t2184*t7140;
  t7173 = t4834*t697*t2258;
  t7180 = t7166 + t7173;
  t7191 = t2184*t4834*t697;
  t7194 = -1.*t7140*t2258;
  t7220 = t7191 + t7194;
  t7234 = -1.*t2725*t7180;
  t7236 = t2501*t7220;
  t7239 = t7234 + t7236;
  t7248 = t2501*t7180;
  t7253 = t2725*t7220;
  t7259 = t7248 + t7253;
  t7332 = t41*t179*t247;
  t7340 = -1.*t38*t248;
  t7346 = t7332 + t7340;
  t7419 = t1398*t284;
  t7424 = -1.*t450*t7346*t1667;
  t7455 = t7419 + t7424;
  t7466 = t2184*t7455;
  t7475 = t7346*t697*t2258;
  t7489 = t7466 + t7475;
  t7499 = t2184*t7346*t697;
  t7500 = -1.*t7455*t2258;
  t7513 = t7499 + t7500;
  t7525 = -1.*t2725*t7489;
  t7526 = t2501*t7513;
  t7531 = t7525 + t7526;
  t7540 = t2501*t7489;
  t7541 = t2725*t7513;
  t7545 = t7540 + t7541;
  t7667 = -1.*t923*t1398*t248;
  t7680 = -1.*t923*t41*t450*t1667;
  t7712 = t7667 + t7680;
  t7752 = t2184*t7712;
  t7753 = t923*t41*t697*t2258;
  t7765 = t7752 + t7753;
  t7781 = t923*t41*t2184*t697;
  t7784 = -1.*t7712*t2258;
  t7787 = t7781 + t7784;
  t7791 = -1.*t2725*t7765;
  t7793 = t2501*t7787;
  t7798 = t7791 + t7793;
  t7816 = t2501*t7765;
  t7821 = t2725*t7787;
  t7830 = t7816 + t7821;
  t7935 = -1.*t38*t923*t450;
  t7936 = -1.*t4319*t697;
  t7951 = t7935 + t7936;
  t7992 = -1.*t2184*t7951*t1667;
  t8002 = t4719*t2258;
  t8003 = t7992 + t8002;
  t8010 = t2184*t4719;
  t8014 = t7951*t1667*t2258;
  t8021 = t8010 + t8014;
  t8024 = -1.*t2725*t8003;
  t8026 = t2501*t8021;
  t8031 = t8024 + t8026;
  t8053 = t2501*t8003;
  t8061 = t2725*t8021;
  t8070 = t8053 + t8061;
  t7893 = 0.087004*t450;
  t7898 = -0.022225*t697;
  t7903 = t7893 + t7898;
  t7912 = 0.022225*t450;
  t7920 = t7912 + t973;
  t8142 = t38*t41;
  t8161 = t179*t247*t248;
  t8163 = t8142 + t8161;
  t8168 = -1.*t8163*t697;
  t8171 = t2336 + t8168;
  t8196 = t450*t8163;
  t8200 = -1.*t923*t179*t697;
  t8201 = t8196 + t8200;
  t8203 = -1.*t2184*t8171*t1667;
  t8205 = t8201*t2258;
  t8206 = t8203 + t8205;
  t8210 = t2184*t8201;
  t8215 = t8171*t1667*t2258;
  t8216 = t8210 + t8215;
  t8225 = -1.*t2725*t8206;
  t8229 = t2501*t8216;
  t8232 = t8225 + t8229;
  t8246 = t2501*t8206;
  t8251 = t2725*t8216;
  t8268 = t8246 + t8251;
  t8344 = t450*t247;
  t8347 = -1.*t923*t248*t697;
  t8349 = t8344 + t8347;
  t8357 = t923*t450*t248;
  t8360 = t247*t697;
  t8365 = t8357 + t8360;
  t8367 = -1.*t2184*t8349*t1667;
  t8369 = t8365*t2258;
  t8378 = t8367 + t8369;
  t8384 = t2184*t8365;
  t8391 = t8349*t1667*t2258;
  t8399 = t8384 + t8391;
  t8413 = -1.*t2725*t8378;
  t8424 = t2501*t8399;
  t8430 = t8413 + t8424;
  t8451 = t2501*t8378;
  t8455 = t2725*t8399;
  t8456 = t8451 + t8455;
  t8569 = -1.*t1398*t4719;
  t8572 = -1.*t4834*t1667;
  t8574 = t8569 + t8572;
  t8594 = -1.*t2184*t2725*t8574;
  t8600 = -1.*t2501*t8574*t2258;
  t8604 = t8594 + t8600;
  t8620 = t2501*t2184*t8574;
  t8628 = -1.*t2725*t8574*t2258;
  t8634 = t8620 + t8628;
  t8527 = -0.157004*t1398;
  t8528 = t8527 + t1673;
  t8537 = -0.31508*t1398;
  t8544 = 0.157004*t1667;
  t8557 = t8537 + t8544;
  t8686 = -1.*t1398*t8201;
  t8687 = -1.*t7346*t1667;
  t8690 = t8686 + t8687;
  t8729 = -1.*t2184*t2725*t8690;
  t8739 = -1.*t2501*t8690*t2258;
  t8743 = t8729 + t8739;
  t8752 = t2501*t2184*t8690;
  t8764 = -1.*t2725*t8690*t2258;
  t8774 = t8752 + t8764;
  t8845 = -1.*t1398*t8365;
  t8848 = -1.*t923*t41*t1667;
  t8852 = t8845 + t8848;
  t8909 = -1.*t2184*t2725*t8852;
  t8910 = -1.*t2501*t8852*t2258;
  t8911 = t8909 + t8910;
  t8922 = t2501*t2184*t8852;
  t8950 = -1.*t2725*t8852*t2258;
  t8952 = t8922 + t8950;
  t9119 = -1.*t2184*t4950;
  t9122 = -1.*t5071*t2258;
  t9142 = t9119 + t9122;
  t9192 = t2725*t9142;
  t9202 = t9192 + t5305;
  t9226 = t2501*t9142;
  t9227 = -1.*t2725*t5219;
  t9235 = t9226 + t9227;
  t8701 = t1398*t7346;
  t8713 = -1.*t8201*t1667;
  t8714 = t8701 + t8713;
  t9078 = -0.022225*t2184;
  t9082 = -0.38008*t2258;
  t9083 = t9078 + t9082;
  t9102 = 0.38008*t2184;
  t9106 = t9102 + t2291;
  t9296 = t923*t450*t179;
  t9308 = t8163*t697;
  t9312 = t9296 + t9308;
  t9330 = -1.*t2184*t8714;
  t9339 = -1.*t9312*t2258;
  t9343 = t9330 + t9339;
  t9346 = t2184*t9312;
  t9351 = -1.*t8714*t2258;
  t9370 = t9346 + t9351;
  t9384 = t2725*t9343;
  t9414 = t2501*t9370;
  t9422 = t9384 + t9414;
  t9428 = t2501*t9343;
  t9432 = -1.*t2725*t9370;
  t9433 = t9428 + t9432;
  t8875 = t923*t41*t1398;
  t8886 = -1.*t8365*t1667;
  t8896 = t8875 + t8886;
  t9542 = -1.*t450*t247;
  t9550 = t923*t248*t697;
  t9563 = t9542 + t9550;
  t9577 = -1.*t2184*t8896;
  t9594 = -1.*t9563*t2258;
  t9598 = t9577 + t9594;
  t9600 = t2184*t9563;
  t9614 = -1.*t8896*t2258;
  t9615 = t9600 + t9614;
  t9647 = t2725*t9598;
  t9653 = t2501*t9615;
  t9654 = t9647 + t9653;
  t9679 = t2501*t9598;
  t9681 = -1.*t2725*t9615;
  t9685 = t9679 + t9681;
  t9848 = -1.*t2501*t5197;
  t9853 = t9848 + t9227;
  t5420 = t3197*t5318;
  t9772 = -0.022225*t2501;
  t9780 = -0.86008*t2725;
  t9794 = t9772 + t9780;
  t9820 = 0.86008*t2501;
  t9822 = t9820 + t2734;
  t9886 = t2184*t8714;
  t9893 = t9312*t2258;
  t9894 = t9886 + t9893;
  t9915 = -1.*t2725*t9894;
  t9935 = t9915 + t9414;
  t9942 = -1.*t2501*t9894;
  t9943 = t9942 + t9432;
  t9980 = t2184*t8896;
  t9981 = t9563*t2258;
  t9982 = t9980 + t9981;
  t9991 = -1.*t2725*t9982;
  t9993 = t9991 + t9653;
  t9996 = -1.*t2501*t9982;
  t9998 = t9996 + t9681;
  t9857 = -1.*t3281*t5318;
  t5422 = -1.*t3281*t5378;
  t5433 = t5420 + t5422;
  t10018 = 1.34008*t3197;
  t10020 = t10018 + t3458;
  t10022 = -0.021147*t3197;
  t10023 = -1.34008*t3281;
  t10024 = t10022 + t10023;
  t9948 = -1.*t3281*t9935;
  t10033 = t2501*t9894;
  t10034 = t2725*t9370;
  t10035 = t10033 + t10034;
  t9957 = t3197*t9935;
  t10004 = -1.*t3281*t9993;
  t10046 = t2501*t9982;
  t10047 = t2725*t9615;
  t10049 = t10046 + t10047;
  t10011 = t3197*t9993;

  p_output1(0)=1.;
  p_output1(1)=0;
  p_output1(2)=0;
  p_output1(3)=0;
  p_output1(4)=1.;
  p_output1(5)=0;
  p_output1(6)=0;
  p_output1(7)=0;
  p_output1(8)=1.;
  p_output1(9)=t1346*t1680 + 0.167004*(t1346*t1398 + t1667*t1719) + t1719*t1764 + t2137*t2292 + t2358*t2444 + t2738*t3025 + t3059*t3154 + t3299*t3406 + t3581*t3683 - 1.250132*(t3281*t3406 + t3197*t3683) + 0.043925*(t3197*t3406 - 1.*t3281*t3683) + t284*t793 - 1.*t1009*t179*t923;
  p_output1(10)=t1680*t4719 + t1764*t4834 + 0.167004*(t1398*t4719 + t1667*t4834) + t2292*t4950 + t2444*t5071 + t2738*t5197 + t3059*t5219 + t3299*t5318 + t3581*t5378 - 1.250132*(t3281*t5318 + t3197*t5378) + 0.043925*t5433 + t4319*t793 + t1009*t38*t923;
  p_output1(11)=0;
  p_output1(12)=-1.*t1009*t247*t38 + t1680*t5522 + t2292*t5688 + t2444*t5724 + t2738*t5778 + t3059*t5814 + t3299*t5852 + t3581*t5956 - 1.250132*(t3281*t5852 + t3197*t5956) + 0.043925*(t3197*t5852 - 1.*t3281*t5956) + t1764*t38*t41*t923 + t248*t38*t793*t923 + 0.167004*(t1398*t5522 + t1667*t38*t41*t923);
  p_output1(13)=-1.*t1009*t179*t247 + t1680*t6140 + t2292*t6366 + t2444*t6400 + t2738*t6456 + t3059*t6481 + t3299*t6539 + t3581*t6592 - 1.250132*(t3281*t6539 + t3197*t6592) + 0.043925*(t3197*t6539 - 1.*t3281*t6592) + t1764*t179*t41*t923 + t179*t248*t793*t923 + 0.167004*(t1398*t6140 + t1667*t179*t41*t923);
  p_output1(14)=-1.*t1764*t247*t41 + t1680*t6727 + 0.167004*(-1.*t1667*t247*t41 + t1398*t6727) + t2292*t6769 + t2444*t6790 + t2738*t6829 + t3059*t6855 + t3299*t6870 + t3581*t6924 - 1.250132*(t3281*t6870 + t3197*t6924) + 0.043925*(t3197*t6870 - 1.*t3281*t6924) - 1.*t247*t248*t793 - 1.*t1009*t923;
  p_output1(15)=t1680*t450*t4834 + t2444*t4834*t697 + t1764*t7029 + 0.167004*(t1398*t450*t4834 + t1667*t7029) + t2292*t7140 + t2738*t7180 + t3059*t7220 + t3299*t7239 + t3581*t7259 - 1.250132*(t3281*t7239 + t3197*t7259) + 0.043925*(t3197*t7239 - 1.*t3281*t7259) + t4834*t793;
  p_output1(16)=t1764*t284 + t1680*t450*t7346 + t2444*t697*t7346 + 0.167004*(t1667*t284 + t1398*t450*t7346) + t2292*t7455 + t2738*t7489 + t3059*t7513 + t3299*t7531 + t3581*t7545 - 1.250132*(t3281*t7531 + t3197*t7545) + 0.043925*(t3197*t7531 - 1.*t3281*t7545) + t7346*t793;
  p_output1(17)=t2292*t7712 + t2738*t7765 + t3059*t7787 + t3299*t7798 + t3581*t7830 - 1.250132*(t3281*t7798 + t3197*t7830) + 0.043925*(t3197*t7798 - 1.*t3281*t7830) - 1.*t1764*t248*t923 + t1680*t41*t450*t923 + t2444*t41*t697*t923 + t41*t793*t923 + 0.167004*(-1.*t1667*t248*t923 + t1398*t41*t450*t923);
  p_output1(18)=t2444*t4719 + t4319*t7920 + 0.167004*t1398*t7951 + t1680*t7951 - 1.*t1667*t2292*t7951 + t2738*t8003 + t3059*t8021 + t3299*t8031 + t3581*t8070 - 1.250132*(t3281*t8031 + t3197*t8070) + 0.043925*(t3197*t8031 - 1.*t3281*t8070) + t38*t7903*t923;
  p_output1(19)=t7920*t8163 + 0.167004*t1398*t8171 + t1680*t8171 - 1.*t1667*t2292*t8171 + t2444*t8201 + t2738*t8206 + t3059*t8216 + t3299*t8232 + t3581*t8268 - 1.250132*(t3281*t8232 + t3197*t8268) + 0.043925*(t3197*t8232 - 1.*t3281*t8268) + t179*t7903*t923;
  p_output1(20)=-1.*t247*t7903 + 0.167004*t1398*t8349 + t1680*t8349 - 1.*t1667*t2292*t8349 + t2444*t8365 + t2738*t8378 + t3059*t8399 + t3299*t8430 + t3581*t8456 - 1.250132*(t3281*t8430 + t3197*t8456) + 0.043925*(t3197*t8430 - 1.*t3281*t8456) + t248*t7920*t923;
  p_output1(21)=0.167004*t4950 + t4834*t8528 + t4719*t8557 + t2292*t8574 + t2184*t2738*t8574 - 1.*t2258*t3059*t8574 + t3299*t8604 + t3581*t8634 - 1.250132*(t3281*t8604 + t3197*t8634) + 0.043925*(t3197*t8604 - 1.*t3281*t8634);
  p_output1(22)=t7346*t8528 + t8201*t8557 + t2292*t8690 + t2184*t2738*t8690 - 1.*t2258*t3059*t8690 + 0.167004*t8714 + t3299*t8743 + t3581*t8774 - 1.250132*(t3281*t8743 + t3197*t8774) + 0.043925*(t3197*t8743 - 1.*t3281*t8774);
  p_output1(23)=t8365*t8557 + t2292*t8852 + t2184*t2738*t8852 - 1.*t2258*t3059*t8852 + 0.167004*t8896 + t3299*t8911 + t3581*t8952 - 1.250132*(t3281*t8911 + t3197*t8952) + 0.043925*(t3197*t8911 - 1.*t3281*t8952) + t41*t8528*t923;
  p_output1(24)=t2738*t5219 + t4950*t9083 + t5071*t9106 + t3059*t9142 + t3581*t9202 + t3299*t9235 + 0.043925*(-1.*t3281*t9202 + t3197*t9235) - 1.250132*(t3197*t9202 + t3281*t9235);
  p_output1(25)=t8714*t9083 + t9106*t9312 + t3059*t9343 + t2738*t9370 + t3581*t9422 + t3299*t9433 + 0.043925*(-1.*t3281*t9422 + t3197*t9433) - 1.250132*(t3197*t9422 + t3281*t9433);
  p_output1(26)=t8896*t9083 + t9106*t9563 + t3059*t9598 + t2738*t9615 + t3581*t9654 + t3299*t9685 + 0.043925*(-1.*t3281*t9654 + t3197*t9685) - 1.250132*(t3197*t9654 + t3281*t9685);
  p_output1(27)=t3581*t5318 + t5197*t9794 + t5219*t9822 + t3299*t9853 - 1.250132*(t5420 + t3281*t9853) + 0.043925*(t3197*t9853 + t9857);
  p_output1(28)=t9370*t9822 + t9794*t9894 + t3581*t9935 + t3299*t9943 + 0.043925*(t3197*t9943 + t9948) - 1.250132*(t3281*t9943 + t9957);
  p_output1(29)=t9615*t9822 + t9794*t9982 + t3581*t9993 + t3299*t9998 + 0.043925*(t10004 + t3197*t9998) - 1.250132*(t10011 + t3281*t9998);
  p_output1(30)=t10020*t5318 + t10024*t5378 - 1.250132*t5433 + 0.043925*(-1.*t3197*t5378 + t9857);
  p_output1(31)=t10024*t10035 + t10020*t9935 + 0.043925*(-1.*t10035*t3197 + t9948) - 1.250132*(-1.*t10035*t3281 + t9957);
  p_output1(32)=t10024*t10049 + 0.043925*(t10004 - 1.*t10049*t3197) - 1.250132*(t10011 - 1.*t10049*t3281) + t10020*t9993;
  p_output1(33)=0;
  p_output1(34)=0;
  p_output1(35)=0;
  p_output1(36)=0;
  p_output1(37)=0;
  p_output1(38)=0;
  p_output1(39)=0;
  p_output1(40)=0;
  p_output1(41)=0;
  p_output1(42)=0;
  p_output1(43)=0;
  p_output1(44)=0;
  p_output1(45)=0;
  p_output1(46)=0;
  p_output1(47)=0;
}


       
void Jp_LeftFootFront(Eigen::Matrix<double,3,16> &p_output1, const Eigen::Matrix<double,16,1> &var1)
{
  // Call Subroutines
  output1(p_output1, var1);

}
