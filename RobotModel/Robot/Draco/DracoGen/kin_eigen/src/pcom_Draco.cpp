/*
 * Automatically Generated from Mathematica.
 * Thu 23 Aug 2018 15:50:43 GMT-05:00
 */
#include <stdio.h>
#include <stdlib.h>
#include <math.h>

#include "RobotSystem/RobotModel/Robot/Draco/DracoGen/kin_eigen/include/pcom_Draco.h"

#ifdef _MSC_VER
  #define INLINE __forceinline /* use __forceinline (VC++ specific) */
#else
  #define INLINE inline        /* use standard inline */
#endif

/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
INLINE double Power(double x, double y) { return pow(x, y); }
INLINE double Sqrt(double x) { return sqrt(x); }

INLINE double Abs(double x) { return fabs(x); }

INLINE double Exp(double x) { return exp(x); }
INLINE double Log(double x) { return log(x); }

INLINE double Sin(double x) { return sin(x); }
INLINE double Cos(double x) { return cos(x); }
INLINE double Tan(double x) { return tan(x); }

INLINE double Csc(double x) { return 1.0/sin(x); }
INLINE double Sec(double x) { return 1.0/cos(x); }

INLINE double ArcSin(double x) { return asin(x); }
INLINE double ArcCos(double x) { return acos(x); }
//INLINE double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
INLINE double ArcTan(double x, double y) { return atan2(y,x); }

INLINE double Sinh(double x) { return sinh(x); }
INLINE double Cosh(double x) { return cosh(x); }
INLINE double Tanh(double x) { return tanh(x); }

#define E 2.71828182845904523536029
#define Pi 3.14159265358979323846264
#define Degree 0.01745329251994329576924

/*
 * Sub functions
 */
static void output1(Eigen::Matrix<double,3,1> &p_output1, const Eigen::Matrix<double,16,1> &var1)
{
  double t61;
  double t338;
  double t1032;
  double t465;
  double t1072;
  double t91;
  double t896;
  double t1116;
  double t1168;
  double t2744;
  double t2748;
  double t2750;
  double t3226;
  double t1690;
  double t1856;
  double t1934;
  double t2914;
  double t3273;
  double t3285;
  double t3290;
  double t3752;
  double t3769;
  double t3781;
  double t3784;
  double t4231;
  double t4240;
  double t4246;
  double t4508;
  double t3785;
  double t3892;
  double t3946;
  double t3978;
  double t4056;
  double t4145;
  double t4146;
  double t4385;
  double t4512;
  double t4694;
  double t4799;
  double t4803;
  double t4805;
  double t4899;
  double t5163;
  double t5193;
  double t5202;
  double t5238;
  double t5728;
  double t5729;
  double t5732;
  double t5738;
  double t5449;
  double t5501;
  double t5502;
  double t5733;
  double t5755;
  double t5757;
  double t5758;
  double t5760;
  double t5776;
  double t5792;
  double t5798;
  double t5811;
  double t5916;
  double t5956;
  double t6187;
  double t6192;
  double t6206;
  double t6317;
  double t5970;
  double t5999;
  double t6058;
  double t6174;
  double t6302;
  double t6322;
  double t6430;
  double t6445;
  double t6465;
  double t6471;
  double t6472;
  double t6473;
  double t6479;
  double t6481;
  double t6500;
  double t6635;
  double t6647;
  double t6648;
  double t6710;
  double t6572;
  double t6574;
  double t6576;
  double t3541;
  double t6931;
  double t6934;
  double t6935;
  double t6954;
  double t6946;
  double t6971;
  double t6987;
  double t6993;
  double t6996;
  double t7007;
  double t7012;
  double t7023;
  double t7184;
  double t7258;
  double t7302;
  double t7371;
  double t7027;
  double t7028;
  double t7032;
  double t7411;
  double t7433;
  double t7443;
  double t7508;
  double t7464;
  double t7642;
  double t7701;
  double t7711;
  double t7712;
  double t7713;
  double t7717;
  double t7722;
  double t7740;
  double t7746;
  double t7747;
  double t7756;
  double t7757;
  double t7760;
  double t7873;
  double t7967;
  double t8054;
  double t8058;
  double t8056;
  double t8070;
  double t8172;
  double t8195;
  double t8197;
  double t8206;
  double t8208;
  double t8243;
  double t8258;
  double t8284;
  double t8308;
  double t8409;
  double t8429;
  double t8436;
  double t8451;
  double t8324;
  double t8367;
  double t8370;
  double t8449;
  double t8453;
  double t8463;
  double t8474;
  double t8519;
  double t8527;
  double t8531;
  double t8540;
  double t8542;
  double t8543;
  double t8545;
  double t8598;
  double t8607;
  double t8609;
  double t8636;
  double t8552;
  double t8557;
  double t8561;
  double t8796;
  double t8814;
  double t8825;
  double t8833;
  double t8839;
  double t8843;
  double t8880;
  double t8901;
  double t8953;
  double t8963;
  double t8971;
  double t8979;
  double t8980;
  double t8982;
  double t8992;
  double t9007;
  double t9031;
  double t9032;
  double t9034;
  double t9041;
  double t9049;
  double t9063;
  double t9074;
  double t9096;
  double t9098;
  double t9100;
  double t9130;
  double t9136;
  double t9155;
  double t9158;
  double t9162;
  double t9167;
  double t9181;
  double t9182;
  double t6686;
  double t6716;
  double t6732;
  double t9183;
  double t9191;
  double t9197;
  double t6772;
  double t6779;
  double t6783;
  double t9200;
  double t9202;
  double t9206;
  double t8882;
  double t9290;
  double t9303;
  double t9310;
  double t9313;
  double t9317;
  double t9326;
  double t9305;
  double t9306;
  double t9307;
  double t9342;
  double t9344;
  double t9369;
  double t9374;
  double t9378;
  double t9383;
  double t9384;
  double t9386;
  double t9397;
  double t9399;
  double t9408;
  double t9409;
  double t9422;
  double t9461;
  double t9467;
  double t9468;
  double t9479;
  double t9484;
  double t8610;
  double t8656;
  double t8677;
  double t9493;
  double t9500;
  double t9505;
  double t8693;
  double t8696;
  double t8699;
  double t9508;
  double t9510;
  double t9511;
  double t9678;
  double t9686;
  double t9687;
  double t9690;
  double t9694;
  double t9721;
  double t9726;
  double t9727;
  double t9731;
  double t9737;
  double t9742;
  double t9743;
  double t9746;
  double t9747;
  double t9774;
  double t9787;
  double t9790;
  double t9820;
  double t9826;
  double t9843;
  double t9844;
  double t11392;
  double t11394;
  double t11395;
  double t11396;
  double t11403;
  double t11404;
  double t11410;
  double t11414;
  double t11415;
  double t11416;
  double t11429;
  double t11436;
  double t11644;
  double t9668;
  double t11940;
  double t11941;
  double t11946;
  double t11947;
  double t11948;
  double t11949;
  double t11942;
  double t11943;
  double t11944;
  double t11962;
  double t11976;
  double t11977;
  double t11996;
  double t12038;
  double t12040;
  double t12041;
  double t12047;
  double t12177;
  double t12211;
  double t12226;
  double t12230;
  double t12233;
  double t12241;
  double t12248;
  double t12255;
  double t12280;
  double t12287;
  double t12288;
  double t12291;
  double t12299;
  double t12308;
  double t12332;
  double t12342;
  t61 = Cos(var1[3]);
  t338 = Cos(var1[5]);
  t1032 = Sin(var1[3]);
  t465 = Sin(var1[4]);
  t1072 = Sin(var1[5]);
  t91 = Cos(var1[4]);
  t896 = t61*t338*t465;
  t1116 = t1032*t1072;
  t1168 = t896 + t1116;
  t2744 = Cos(var1[11]);
  t2748 = -1.*t2744;
  t2750 = 1. + t2748;
  t3226 = Sin(var1[11]);
  t1690 = -1.*t338*t1032;
  t1856 = t61*t465*t1072;
  t1934 = t1690 + t1856;
  t2914 = -0.0222*t2750;
  t3273 = -0.087*t3226;
  t3285 = t2914 + t3273;
  t3290 = t61*t91*t3285;
  t3752 = -0.087*t2750;
  t3769 = 0.0222*t3226;
  t3781 = t3752 + t3769;
  t3784 = t3781*t1934;
  t4231 = Cos(var1[12]);
  t4240 = -1.*t4231;
  t4246 = 1. + t4240;
  t4508 = Sin(var1[12]);
  t3785 = -1.*t61*t91*t3226;
  t3892 = t2744*t1934;
  t3946 = t3785 + t3892;
  t3978 = t2744*t61*t91;
  t4056 = t3226*t1934;
  t4145 = t3978 + t4056;
  t4146 = -0.0222*t4145;
  t4385 = -0.3151*t4246;
  t4512 = 0.157*t4508;
  t4694 = t4385 + t4512;
  t4799 = t4694*t1168;
  t4803 = -0.157*t4246;
  t4805 = -0.3151*t4508;
  t4899 = t4803 + t4805;
  t5163 = t4899*t3946;
  t5193 = t4508*t1168;
  t5202 = t4231*t3946;
  t5238 = t5193 + t5202;
  t5728 = Cos(var1[13]);
  t5729 = -1.*t5728;
  t5732 = 1. + t5729;
  t5738 = Sin(var1[13]);
  t5449 = t4231*t1168;
  t5501 = -1.*t4508*t3946;
  t5502 = t5449 + t5501;
  t5733 = -0.0222*t5732;
  t5755 = 0.3801*t5738;
  t5757 = t5733 + t5755;
  t5758 = t5757*t4145;
  t5760 = -0.3801*t5732;
  t5776 = -0.0222*t5738;
  t5792 = t5760 + t5776;
  t5798 = t5792*t5502;
  t5811 = t5738*t4145;
  t5916 = t5728*t5502;
  t5956 = t5811 + t5916;
  t6187 = Cos(var1[14]);
  t6192 = -1.*t6187;
  t6206 = 1. + t6192;
  t6317 = Sin(var1[14]);
  t5970 = t5728*t4145;
  t5999 = -1.*t5738*t5502;
  t6058 = t5970 + t5999;
  t6174 = -0.16705*t5238;
  t6302 = -0.8601*t6206;
  t6322 = -0.0222*t6317;
  t6430 = t6302 + t6322;
  t6445 = t6430*t5956;
  t6465 = -0.0222*t6206;
  t6471 = 0.8601*t6317;
  t6472 = t6465 + t6471;
  t6473 = t6472*t6058;
  t6479 = -1.*t6317*t5956;
  t6481 = t6187*t6058;
  t6500 = t6479 + t6481;
  t6635 = Cos(var1[15]);
  t6647 = -1.*t6635;
  t6648 = 1. + t6647;
  t6710 = Sin(var1[15]);
  t6572 = t6187*t5956;
  t6574 = t6317*t6058;
  t6576 = t6572 + t6574;
  t3541 = -0.2451*t1168;
  t6931 = Cos(var1[6]);
  t6934 = -1.*t6931;
  t6935 = 1. + t6934;
  t6954 = Sin(var1[6]);
  t6946 = 0.087*t6935;
  t6971 = 0.0222*t6954;
  t6987 = t6946 + t6971;
  t6993 = t1934*t6987;
  t6996 = -0.0222*t6935;
  t7007 = 0.087*t6954;
  t7012 = t6996 + t7007;
  t7023 = t61*t91*t7012;
  t7184 = t61*t91*t6931;
  t7258 = t1934*t6954;
  t7302 = t7184 + t7258;
  t7371 = -0.0222*t7302;
  t7027 = t6931*t1934;
  t7028 = -1.*t61*t91*t6954;
  t7032 = t7027 + t7028;
  t7411 = Cos(var1[7]);
  t7433 = -1.*t7411;
  t7443 = 1. + t7433;
  t7508 = Sin(var1[7]);
  t7464 = 0.157*t7443;
  t7642 = -0.3151*t7508;
  t7701 = t7464 + t7642;
  t7711 = t7032*t7701;
  t7712 = -0.3151*t7443;
  t7713 = -0.157*t7508;
  t7717 = t7712 + t7713;
  t7722 = t1168*t7717;
  t7740 = t7411*t7032;
  t7746 = t1168*t7508;
  t7747 = t7740 + t7746;
  t7756 = t7411*t1168;
  t7757 = -1.*t7032*t7508;
  t7760 = t7756 + t7757;
  t7873 = Cos(var1[8]);
  t7967 = -1.*t7873;
  t8054 = 1. + t7967;
  t8058 = Sin(var1[8]);
  t8056 = -0.3801*t8054;
  t8070 = -0.0222*t8058;
  t8172 = t8056 + t8070;
  t8195 = t7760*t8172;
  t8197 = -0.0222*t8054;
  t8206 = 0.3801*t8058;
  t8208 = t8197 + t8206;
  t8243 = t7302*t8208;
  t8258 = t7873*t7760;
  t8284 = t7302*t8058;
  t8308 = t8258 + t8284;
  t8409 = Cos(var1[9]);
  t8429 = -1.*t8409;
  t8436 = 1. + t8429;
  t8451 = Sin(var1[9]);
  t8324 = t7873*t7302;
  t8367 = -1.*t7760*t8058;
  t8370 = t8324 + t8367;
  t8449 = -0.8601*t8436;
  t8453 = -0.0222*t8451;
  t8463 = t8449 + t8453;
  t8474 = t8463*t8308;
  t8519 = -0.0222*t8436;
  t8527 = 0.8601*t8451;
  t8531 = t8519 + t8527;
  t8540 = t8531*t8370;
  t8542 = -1.*t8451*t8308;
  t8543 = t8409*t8370;
  t8545 = t8542 + t8543;
  t8598 = Cos(var1[10]);
  t8607 = -1.*t8598;
  t8609 = 1. + t8607;
  t8636 = Sin(var1[10]);
  t8552 = t8409*t8308;
  t8557 = t8451*t8370;
  t8561 = t8552 + t8557;
  t8796 = t338*t1032*t465;
  t8814 = -1.*t61*t1072;
  t8825 = t8796 + t8814;
  t8833 = t61*t338;
  t8839 = t1032*t465*t1072;
  t8843 = t8833 + t8839;
  t8880 = t91*t3285*t1032;
  t8901 = t3781*t8843;
  t8953 = -1.*t91*t3226*t1032;
  t8963 = t2744*t8843;
  t8971 = t8953 + t8963;
  t8979 = t2744*t91*t1032;
  t8980 = t3226*t8843;
  t8982 = t8979 + t8980;
  t8992 = -0.0222*t8982;
  t9007 = t4694*t8825;
  t9031 = t4899*t8971;
  t9032 = t4508*t8825;
  t9034 = t4231*t8971;
  t9041 = t9032 + t9034;
  t9049 = t4231*t8825;
  t9063 = -1.*t4508*t8971;
  t9074 = t9049 + t9063;
  t9096 = t5757*t8982;
  t9098 = t5792*t9074;
  t9100 = t5738*t8982;
  t9130 = t5728*t9074;
  t9136 = t9100 + t9130;
  t9155 = t5728*t8982;
  t9158 = -1.*t5738*t9074;
  t9162 = t9155 + t9158;
  t9167 = -0.16705*t9041;
  t9181 = t6430*t9136;
  t9182 = t6472*t9162;
  t6686 = -0.0211*t6648;
  t6716 = 1.3401*t6710;
  t6732 = t6686 + t6716;
  t9183 = -1.*t6317*t9136;
  t9191 = t6187*t9162;
  t9197 = t9183 + t9191;
  t6772 = -1.3401*t6648;
  t6779 = -0.0211*t6710;
  t6783 = t6772 + t6779;
  t9200 = t6187*t9136;
  t9202 = t6317*t9162;
  t9206 = t9200 + t9202;
  t8882 = -0.2451*t8825;
  t9290 = t8843*t6987;
  t9303 = t91*t1032*t7012;
  t9310 = t91*t6931*t1032;
  t9313 = t8843*t6954;
  t9317 = t9310 + t9313;
  t9326 = -0.0222*t9317;
  t9305 = t6931*t8843;
  t9306 = -1.*t91*t1032*t6954;
  t9307 = t9305 + t9306;
  t9342 = t9307*t7701;
  t9344 = t8825*t7717;
  t9369 = t7411*t9307;
  t9374 = t8825*t7508;
  t9378 = t9369 + t9374;
  t9383 = t7411*t8825;
  t9384 = -1.*t9307*t7508;
  t9386 = t9383 + t9384;
  t9397 = t9386*t8172;
  t9399 = t9317*t8208;
  t9408 = t7873*t9386;
  t9409 = t9317*t8058;
  t9422 = t9408 + t9409;
  t9461 = t7873*t9317;
  t9467 = -1.*t9386*t8058;
  t9468 = t9461 + t9467;
  t9479 = t8463*t9422;
  t9484 = t8531*t9468;
  t8610 = -0.0211*t8609;
  t8656 = 1.3401*t8636;
  t8677 = t8610 + t8656;
  t9493 = -1.*t8451*t9422;
  t9500 = t8409*t9468;
  t9505 = t9493 + t9500;
  t8693 = -1.3401*t8609;
  t8696 = -0.0211*t8636;
  t8699 = t8693 + t8696;
  t9508 = t8409*t9422;
  t9510 = t8451*t9468;
  t9511 = t9508 + t9510;
  t9678 = -1.*t3285*t465;
  t9686 = t91*t3781*t1072;
  t9687 = t3226*t465;
  t9690 = t2744*t91*t1072;
  t9694 = t9687 + t9690;
  t9721 = -1.*t2744*t465;
  t9726 = t91*t3226*t1072;
  t9727 = t9721 + t9726;
  t9731 = -0.0222*t9727;
  t9737 = t91*t338*t4694;
  t9742 = t4899*t9694;
  t9743 = t91*t338*t4508;
  t9746 = t4231*t9694;
  t9747 = t9743 + t9746;
  t9774 = t4231*t91*t338;
  t9787 = -1.*t4508*t9694;
  t9790 = t9774 + t9787;
  t9820 = t5757*t9727;
  t9826 = t5792*t9790;
  t9843 = t5738*t9727;
  t9844 = t5728*t9790;
  t11392 = t9843 + t9844;
  t11394 = t5728*t9727;
  t11395 = -1.*t5738*t9790;
  t11396 = t11394 + t11395;
  t11403 = -0.16705*t9747;
  t11404 = t6430*t11392;
  t11410 = t6472*t11396;
  t11414 = -1.*t6317*t11392;
  t11415 = t6187*t11396;
  t11416 = t11414 + t11415;
  t11429 = t6187*t11392;
  t11436 = t6317*t11396;
  t11644 = t11429 + t11436;
  t9668 = -0.2451*t91*t338;
  t11940 = t91*t1072*t6987;
  t11941 = -1.*t465*t7012;
  t11946 = -1.*t6931*t465;
  t11947 = t91*t1072*t6954;
  t11948 = t11946 + t11947;
  t11949 = -0.0222*t11948;
  t11942 = t91*t6931*t1072;
  t11943 = t465*t6954;
  t11944 = t11942 + t11943;
  t11962 = t11944*t7701;
  t11976 = t91*t338*t7717;
  t11977 = t7411*t11944;
  t11996 = t91*t338*t7508;
  t12038 = t11977 + t11996;
  t12040 = t91*t338*t7411;
  t12041 = -1.*t11944*t7508;
  t12047 = t12040 + t12041;
  t12177 = t12047*t8172;
  t12211 = t11948*t8208;
  t12226 = t7873*t12047;
  t12230 = t11948*t8058;
  t12233 = t12226 + t12230;
  t12241 = t7873*t11948;
  t12248 = -1.*t12047*t8058;
  t12255 = t12241 + t12248;
  t12280 = t8463*t12233;
  t12287 = t8531*t12255;
  t12288 = -1.*t8451*t12233;
  t12291 = t8409*t12255;
  t12299 = t12288 + t12291;
  t12308 = t8409*t12233;
  t12332 = t8451*t12255;
  t12342 = t12308 + t12332;

  p_output1(0)=0.0271665308340125*(2.962*(t3290 + t3541 + t3784 - 0.157*t3946 + t4146 + var1(0)) + 0.408*(t3290 + t3784 + t4146 + t4799 + t5163 - 0.179*t5238 - 0.3351*t5502 + var1(0)) + 6.*(t3290 + t3784 + t4799 + t5163 - 0.1604*t5238 + t5758 + t5798 - 0.6201*t5956 - 0.0213*t6058 + var1(0)) + 3.5*(t3290 + t3784 + t4799 + t5163 + t5758 + t5798 + t6174 + t6445 + t6473 - 0.0383*t6500 - 1.1351*t6576 + var1(0)) + 0.7*(t3290 + t3784 + t4799 + t5163 + t5758 + t5798 + t6174 + t6445 + t6473 - 1.329335*(t6576*t6635 + t6500*t6710) + 0.023209*(t6500*t6635 - 1.*t6576*t6710) + t6500*t6732 + t6576*t6783 + var1(0)) + 2.962*(t3541 + t6993 + t7023 + 0.157*t7032 + t7371 + var1(0)) + 0.408*(t6993 + t7023 + t7371 + t7711 + t7722 + 0.179*t7747 - 0.3351*t7760 + var1(0)) + 6.*(t6993 + t7023 + t7711 + t7722 + 0.1736*t7747 + t8195 + t8243 - 0.6201*t8308 - 0.0213*t8370 + var1(0)) + 3.5*(t6993 + t7023 + t7711 + t7722 + 0.1669*t7747 + t8195 + t8243 + t8474 + t8540 - 0.0061*t8545 - 1.1351*t8561 + var1(0)) + 0.7*(t6993 + t7023 + t7711 + t7722 + 0.167*t7747 + t8195 + t8243 + t8474 + t8540 - 1.329335*(t8561*t8598 + t8545*t8636) + 0.023209*(t8545*t8598 - 1.*t8561*t8636) + t8545*t8677 + t8561*t8699 + var1(0)) + 9.67*(-0.187273*t1168 + 0.000754*t1934 - 0.013391*t61*t91 + var1(0)));
  p_output1(1)=0.0271665308340125*(2.962*(t8880 + t8882 + t8901 - 0.157*t8971 + t8992 + var1(1)) + 0.408*(t8880 + t8901 + t8992 + t9007 + t9031 - 0.179*t9041 - 0.3351*t9074 + var1(1)) + 9.67*(-0.187273*t8825 + 0.000754*t8843 - 0.013391*t1032*t91 + var1(1)) + 6.*(t8880 + t8901 + t9007 + t9031 - 0.1604*t9041 + t9096 + t9098 - 0.6201*t9136 - 0.0213*t9162 + var1(1)) + 3.5*(t8880 + t8901 + t9007 + t9031 + t9096 + t9098 + t9167 + t9181 + t9182 - 0.0383*t9197 - 1.1351*t9206 + var1(1)) + 0.7*(t8880 + t8901 + t9007 + t9031 + t9096 + t9098 + t9167 + t9181 + t9182 + t6732*t9197 + t6783*t9206 - 1.329335*(t6710*t9197 + t6635*t9206) + 0.023209*(t6635*t9197 - 1.*t6710*t9206) + var1(1)) + 2.962*(t8882 + t9290 + t9303 + 0.157*t9307 + t9326 + var1(1)) + 0.408*(t9290 + t9303 + t9326 + t9342 + t9344 + 0.179*t9378 - 0.3351*t9386 + var1(1)) + 6.*(t9290 + t9303 + t9342 + t9344 + 0.1736*t9378 + t9397 + t9399 - 0.6201*t9422 - 0.0213*t9468 + var1(1)) + 3.5*(t9290 + t9303 + t9342 + t9344 + 0.1669*t9378 + t9397 + t9399 + t9479 + t9484 - 0.0061*t9505 - 1.1351*t9511 + var1(1)) + 0.7*(t9290 + t9303 + t9342 + t9344 + 0.167*t9378 + t9397 + t9399 + t9479 + t9484 + t8677*t9505 + t8699*t9511 - 1.329335*(t8636*t9505 + t8598*t9511) + 0.023209*(t8598*t9505 - 1.*t8636*t9511) + var1(1)));
  p_output1(2)=0.0271665308340125*(0.408*(t11940 + t11941 + t11949 + t11962 + t11976 + 0.179*t12038 - 0.3351*t12047 + var1(2)) + 6.*(t11940 + t11941 + t11962 + t11976 + 0.1736*t12038 + t12177 + t12211 - 0.6201*t12233 - 0.0213*t12255 + var1(2)) + 3.5*(t11940 + t11941 + t11962 + t11976 + 0.1669*t12038 + t12177 + t12211 + t12280 + t12287 - 0.0061*t12299 - 1.1351*t12342 + var1(2)) + 0.7*(t11940 + t11941 + t11962 + t11976 + 0.167*t12038 + t12177 + t12211 + t12280 + t12287 - 1.329335*(t12342*t8598 + t12299*t8636) + 0.023209*(t12299*t8598 - 1.*t12342*t8636) + t12299*t8677 + t12342*t8699 + var1(2)) + 9.67*(0.013391*t465 + 0.000754*t1072*t91 - 0.187273*t338*t91 + var1(2)) + 2.962*(t11940 + t11941 + 0.157*t11944 + t11949 + t9668 + var1(2)) + 2.962*(t9668 + t9678 + t9686 - 0.157*t9694 + t9731 + var1(2)) + 0.408*(t9678 + t9686 + t9731 + t9737 + t9742 - 0.179*t9747 - 0.3351*t9790 + var1(2)) + 3.5*(t11403 + t11404 + t11410 - 0.0383*t11416 - 1.1351*t11644 + t9678 + t9686 + t9737 + t9742 + t9820 + t9826 + var1(2)) + 0.7*(t11403 + t11404 + t11410 - 1.329335*(t11644*t6635 + t11416*t6710) + 0.023209*(t11416*t6635 - 1.*t11644*t6710) + t11416*t6732 + t11644*t6783 + t9678 + t9686 + t9737 + t9742 + t9820 + t9826 + var1(2)) + 6.*(-0.6201*t11392 - 0.0213*t11396 + t9678 + t9686 + t9737 + t9742 - 0.1604*t9747 + t9820 + t9826 + var1(2)));
}


       
void pcom_Draco(Eigen::Matrix<double,3,1> &p_output1, const Eigen::Matrix<double,16,1> &var1)
{
  // Call Subroutines
  output1(p_output1, var1);

}
