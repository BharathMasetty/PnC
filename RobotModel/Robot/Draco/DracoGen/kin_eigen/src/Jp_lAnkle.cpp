/*
 * Automatically Generated from Mathematica.
 * Thu 23 Aug 2018 15:50:21 GMT-05:00
 */
#include <stdio.h>
#include <stdlib.h>
#include <math.h>

#include "RobotSystem/RobotModel/Robot/Draco/DracoGen/kin_eigen/include/Jp_lAnkle.h"

#ifdef _MSC_VER
  #define INLINE __forceinline /* use __forceinline (VC++ specific) */
#else
  #define INLINE inline        /* use standard inline */
#endif

/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
INLINE double Power(double x, double y) { return pow(x, y); }
INLINE double Sqrt(double x) { return sqrt(x); }

INLINE double Abs(double x) { return fabs(x); }

INLINE double Exp(double x) { return exp(x); }
INLINE double Log(double x) { return log(x); }

INLINE double Sin(double x) { return sin(x); }
INLINE double Cos(double x) { return cos(x); }
INLINE double Tan(double x) { return tan(x); }

INLINE double Csc(double x) { return 1.0/sin(x); }
INLINE double Sec(double x) { return 1.0/cos(x); }

INLINE double ArcSin(double x) { return asin(x); }
INLINE double ArcCos(double x) { return acos(x); }
//INLINE double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
INLINE double ArcTan(double x, double y) { return atan2(y,x); }

INLINE double Sinh(double x) { return sinh(x); }
INLINE double Cosh(double x) { return cosh(x); }
INLINE double Tanh(double x) { return tanh(x); }

#define E 2.71828182845904523536029
#define Pi 3.14159265358979323846264
#define Degree 0.01745329251994329576924

/*
 * Sub functions
 */
static void output1(Eigen::Matrix<double,3,16> &p_output1, const Eigen::Matrix<double,16,1> &var1)
{
  double t188;
  double t552;
  double t586;
  double t609;
  double t762;
  double t44;
  double t48;
  double t103;
  double t312;
  double t341;
  double t342;
  double t450;
  double t920;
  double t1194;
  double t1384;
  double t1546;
  double t1612;
  double t1046;
  double t1080;
  double t1143;
  double t1918;
  double t1926;
  double t1951;
  double t2373;
  double t2374;
  double t2554;
  double t2559;
  double t2315;
  double t2368;
  double t2372;
  double t2807;
  double t3018;
  double t3053;
  double t3203;
  double t3415;
  double t3655;
  double t3728;
  double t3809;
  double t3893;
  double t3906;
  double t3936;
  double t3937;
  double t3943;
  double t3962;
  double t3964;
  double t3976;
  double t3984;
  double t4093;
  double t4103;
  double t4141;
  double t4283;
  double t4295;
  double t4323;
  double t641;
  double t789;
  double t862;
  double t966;
  double t995;
  double t1010;
  double t4398;
  double t4402;
  double t4404;
  double t1567;
  double t1690;
  double t1802;
  double t1995;
  double t2019;
  double t2031;
  double t4411;
  double t4413;
  double t4414;
  double t4417;
  double t4419;
  double t4420;
  double t2558;
  double t2618;
  double t2712;
  double t3085;
  double t3113;
  double t3119;
  double t3716;
  double t3754;
  double t3762;
  double t4444;
  double t4447;
  double t4448;
  double t4450;
  double t4451;
  double t4452;
  double t3908;
  double t3921;
  double t3934;
  double t3978;
  double t3989;
  double t4092;
  double t4458;
  double t4460;
  double t4462;
  double t4466;
  double t4469;
  double t4470;
  double t4206;
  double t4263;
  double t4270;
  double t4566;
  double t4578;
  double t4582;
  double t4594;
  double t4602;
  double t4613;
  double t5040;
  double t5044;
  double t5057;
  double t5218;
  double t5222;
  double t5228;
  double t5239;
  double t5250;
  double t5258;
  double t5434;
  double t5447;
  double t5453;
  double t5549;
  double t5553;
  double t5558;
  double t5580;
  double t5610;
  double t5613;
  double t5625;
  double t5639;
  double t5647;
  double t5803;
  double t5828;
  double t5834;
  double t5957;
  double t5959;
  double t5960;
  double t5966;
  double t5968;
  double t6009;
  double t6014;
  double t6020;
  double t6022;
  double t6044;
  double t6047;
  double t6059;
  double t6081;
  double t6084;
  double t6096;
  double t6125;
  double t6153;
  double t6155;
  double t6307;
  double t6316;
  double t6317;
  double t6356;
  double t6373;
  double t6386;
  double t6406;
  double t6427;
  double t6431;
  double t6437;
  double t6440;
  double t6454;
  double t6464;
  double t6465;
  double t6468;
  double t6490;
  double t6491;
  double t6500;
  double t6515;
  double t6524;
  double t6526;
  double t6604;
  double t6612;
  double t6615;
  double t6663;
  double t6667;
  double t6670;
  double t6685;
  double t6693;
  double t6716;
  double t6732;
  double t6744;
  double t6747;
  double t6760;
  double t6778;
  double t6784;
  double t6795;
  double t6802;
  double t6803;
  double t6864;
  double t6866;
  double t6867;
  double t6899;
  double t6901;
  double t6915;
  double t6936;
  double t6937;
  double t6944;
  double t6957;
  double t6959;
  double t6965;
  double t6970;
  double t6974;
  double t6978;
  double t6985;
  double t6997;
  double t7000;
  double t7135;
  double t7138;
  double t7142;
  double t7159;
  double t7165;
  double t7166;
  double t7171;
  double t7173;
  double t7175;
  double t7190;
  double t7219;
  double t7222;
  double t7229;
  double t7231;
  double t7232;
  double t7346;
  double t7355;
  double t7358;
  double t7372;
  double t7375;
  double t7379;
  double t7390;
  double t7391;
  double t7393;
  double t7414;
  double t7420;
  double t7430;
  double t7439;
  double t7446;
  double t7454;
  double t7311;
  double t7315;
  double t7321;
  double t7326;
  double t7333;
  double t7537;
  double t7539;
  double t7542;
  double t7547;
  double t7553;
  double t7567;
  double t7568;
  double t7569;
  double t7597;
  double t7605;
  double t7607;
  double t7623;
  double t7639;
  double t7647;
  double t7671;
  double t7673;
  double t7682;
  double t7692;
  double t7717;
  double t7724;
  double t7792;
  double t7795;
  double t7818;
  double t7854;
  double t7882;
  double t7888;
  double t7909;
  double t7912;
  double t7916;
  double t7928;
  double t7933;
  double t7939;
  double t7953;
  double t7954;
  double t7960;
  double t7978;
  double t7981;
  double t7984;
  double t8094;
  double t8098;
  double t8101;
  double t8115;
  double t8123;
  double t8124;
  double t8154;
  double t8174;
  double t8178;
  double t8048;
  double t8050;
  double t8053;
  double t8067;
  double t8078;
  double t8222;
  double t8226;
  double t8227;
  double t8254;
  double t8270;
  double t8285;
  double t8290;
  double t8292;
  double t8312;
  double t8416;
  double t8417;
  double t8436;
  double t8557;
  double t8565;
  double t8581;
  double t8592;
  double t8596;
  double t8598;
  double t8773;
  double t8774;
  double t8775;
  double t8802;
  double t8803;
  double t8810;
  double t8834;
  double t8850;
  double t8240;
  double t8241;
  double t8243;
  double t8717;
  double t8730;
  double t8732;
  double t8755;
  double t8757;
  double t8957;
  double t8962;
  double t8963;
  double t8985;
  double t8998;
  double t8999;
  double t9010;
  double t9020;
  double t9021;
  double t9040;
  double t9041;
  double t9044;
  double t9060;
  double t9061;
  double t9066;
  double t8475;
  double t8477;
  double t8481;
  double t9197;
  double t9198;
  double t9200;
  double t9206;
  double t9207;
  double t9219;
  double t9231;
  double t9240;
  double t9248;
  double t9274;
  double t9279;
  double t9284;
  double t9312;
  double t9340;
  double t9358;
  double t9522;
  double t9525;
  double t4845;
  double t9453;
  double t9459;
  double t9466;
  double t9500;
  double t9506;
  double t9558;
  double t9565;
  double t9574;
  double t9584;
  double t9587;
  double t9595;
  double t9602;
  double t9636;
  double t9641;
  double t9644;
  double t9651;
  double t9661;
  double t9664;
  double t9665;
  double t9528;
  double t4902;
  double t4913;
  double t9689;
  double t9691;
  double t9697;
  double t9698;
  double t9704;
  double t9610;
  double t9717;
  double t9718;
  double t9719;
  double t9618;
  double t9668;
  double t9739;
  double t9740;
  double t9741;
  double t9675;
  t188 = Sin(var1[3]);
  t552 = Cos(var1[6]);
  t586 = -1.*t552;
  t609 = 1. + t586;
  t762 = Sin(var1[6]);
  t44 = Cos(var1[3]);
  t48 = Cos(var1[5]);
  t103 = -1.*t44*t48;
  t312 = Sin(var1[4]);
  t341 = Sin(var1[5]);
  t342 = -1.*t188*t312*t341;
  t450 = t103 + t342;
  t920 = Cos(var1[4]);
  t1194 = Cos(var1[7]);
  t1384 = -1.*t1194;
  t1546 = 1. + t1384;
  t1612 = Sin(var1[7]);
  t1046 = t552*t450;
  t1080 = t920*t188*t762;
  t1143 = t1046 + t1080;
  t1918 = -1.*t48*t188*t312;
  t1926 = t44*t341;
  t1951 = t1918 + t1926;
  t2373 = Cos(var1[8]);
  t2374 = -1.*t2373;
  t2554 = 1. + t2374;
  t2559 = Sin(var1[8]);
  t2315 = t1194*t1951;
  t2368 = -1.*t1143*t1612;
  t2372 = t2315 + t2368;
  t2807 = -1.*t920*t552*t188;
  t3018 = t450*t762;
  t3053 = t2807 + t3018;
  t3203 = Cos(var1[9]);
  t3415 = -1.*t3203;
  t3655 = 1. + t3415;
  t3728 = Sin(var1[9]);
  t3809 = t2373*t2372;
  t3893 = t3053*t2559;
  t3906 = t3809 + t3893;
  t3936 = t2373*t3053;
  t3937 = -1.*t2372*t2559;
  t3943 = t3936 + t3937;
  t3962 = Cos(var1[10]);
  t3964 = -1.*t3962;
  t3976 = 1. + t3964;
  t3984 = Sin(var1[10]);
  t4093 = -1.*t3728*t3906;
  t4103 = t3203*t3943;
  t4141 = t4093 + t4103;
  t4283 = t3203*t3906;
  t4295 = t3728*t3943;
  t4323 = t4283 + t4295;
  t641 = 0.087*t609;
  t789 = 0.0222*t762;
  t862 = 0. + t641 + t789;
  t966 = -0.0222*t609;
  t995 = 0.087*t762;
  t1010 = 0. + t966 + t995;
  t4398 = -1.*t48*t188;
  t4402 = t44*t312*t341;
  t4404 = t4398 + t4402;
  t1567 = 0.157*t1546;
  t1690 = -0.3151*t1612;
  t1802 = 0. + t1567 + t1690;
  t1995 = -0.3151*t1546;
  t2019 = -0.157*t1612;
  t2031 = 0. + t1995 + t2019;
  t4411 = t552*t4404;
  t4413 = -1.*t44*t920*t762;
  t4414 = t4411 + t4413;
  t4417 = t44*t48*t312;
  t4419 = t188*t341;
  t4420 = t4417 + t4419;
  t2558 = -0.3801*t2554;
  t2618 = -0.0222*t2559;
  t2712 = 0. + t2558 + t2618;
  t3085 = -0.0222*t2554;
  t3113 = 0.3801*t2559;
  t3119 = 0. + t3085 + t3113;
  t3716 = -0.8601*t3655;
  t3754 = -0.0222*t3728;
  t3762 = 0. + t3716 + t3754;
  t4444 = t1194*t4420;
  t4447 = -1.*t4414*t1612;
  t4448 = t4444 + t4447;
  t4450 = t44*t920*t552;
  t4451 = t4404*t762;
  t4452 = t4450 + t4451;
  t3908 = -0.0222*t3655;
  t3921 = 0.8601*t3728;
  t3934 = 0. + t3908 + t3921;
  t3978 = -0.0211*t3976;
  t3989 = 1.3401*t3984;
  t4092 = 0. + t3978 + t3989;
  t4458 = t2373*t4448;
  t4460 = t4452*t2559;
  t4462 = t4458 + t4460;
  t4466 = t2373*t4452;
  t4469 = -1.*t4448*t2559;
  t4470 = t4466 + t4469;
  t4206 = -1.3401*t3976;
  t4263 = -0.0211*t3984;
  t4270 = 0. + t4206 + t4263;
  t4566 = -1.*t3728*t4462;
  t4578 = t3203*t4470;
  t4582 = t4566 + t4578;
  t4594 = t3203*t4462;
  t4602 = t3728*t4470;
  t4613 = t4594 + t4602;
  t5040 = t44*t920*t552*t341;
  t5044 = t44*t312*t762;
  t5057 = t5040 + t5044;
  t5218 = t44*t920*t48*t1194;
  t5222 = -1.*t5057*t1612;
  t5228 = t5218 + t5222;
  t5239 = -1.*t44*t552*t312;
  t5250 = t44*t920*t341*t762;
  t5258 = t5239 + t5250;
  t5434 = t2373*t5228;
  t5447 = t5258*t2559;
  t5453 = t5434 + t5447;
  t5549 = t2373*t5258;
  t5553 = -1.*t5228*t2559;
  t5558 = t5549 + t5553;
  t5580 = -1.*t3728*t5453;
  t5610 = t3203*t5558;
  t5613 = t5580 + t5610;
  t5625 = t3203*t5453;
  t5639 = t3728*t5558;
  t5647 = t5625 + t5639;
  t5803 = t920*t552*t188*t341;
  t5828 = t188*t312*t762;
  t5834 = t5803 + t5828;
  t5957 = t920*t48*t1194*t188;
  t5959 = -1.*t5834*t1612;
  t5960 = t5957 + t5959;
  t5966 = -1.*t552*t188*t312;
  t5968 = t920*t188*t341*t762;
  t6009 = t5966 + t5968;
  t6014 = t2373*t5960;
  t6020 = t6009*t2559;
  t6022 = t6014 + t6020;
  t6044 = t2373*t6009;
  t6047 = -1.*t5960*t2559;
  t6059 = t6044 + t6047;
  t6081 = -1.*t3728*t6022;
  t6084 = t3203*t6059;
  t6096 = t6081 + t6084;
  t6125 = t3203*t6022;
  t6153 = t3728*t6059;
  t6155 = t6125 + t6153;
  t6307 = -1.*t552*t312*t341;
  t6316 = t920*t762;
  t6317 = t6307 + t6316;
  t6356 = -1.*t48*t1194*t312;
  t6373 = -1.*t6317*t1612;
  t6386 = t6356 + t6373;
  t6406 = -1.*t920*t552;
  t6427 = -1.*t312*t341*t762;
  t6431 = t6406 + t6427;
  t6437 = t2373*t6386;
  t6440 = t6431*t2559;
  t6454 = t6437 + t6440;
  t6464 = t2373*t6431;
  t6465 = -1.*t6386*t2559;
  t6468 = t6464 + t6465;
  t6490 = -1.*t3728*t6454;
  t6491 = t3203*t6468;
  t6500 = t6490 + t6491;
  t6515 = t3203*t6454;
  t6524 = t3728*t6468;
  t6526 = t6515 + t6524;
  t6604 = t48*t188;
  t6612 = -1.*t44*t312*t341;
  t6615 = t6604 + t6612;
  t6663 = t1194*t6615;
  t6667 = -1.*t552*t4420*t1612;
  t6670 = t6663 + t6667;
  t6685 = t2373*t6670;
  t6693 = t4420*t762*t2559;
  t6716 = t6685 + t6693;
  t6732 = t2373*t4420*t762;
  t6744 = -1.*t6670*t2559;
  t6747 = t6732 + t6744;
  t6760 = -1.*t3728*t6716;
  t6778 = t3203*t6747;
  t6784 = t6760 + t6778;
  t6795 = t3203*t6716;
  t6802 = t3728*t6747;
  t6803 = t6795 + t6802;
  t6864 = t48*t188*t312;
  t6866 = -1.*t44*t341;
  t6867 = t6864 + t6866;
  t6899 = t1194*t450;
  t6901 = -1.*t552*t6867*t1612;
  t6915 = t6899 + t6901;
  t6936 = t2373*t6915;
  t6937 = t6867*t762*t2559;
  t6944 = t6936 + t6937;
  t6957 = t2373*t6867*t762;
  t6959 = -1.*t6915*t2559;
  t6965 = t6957 + t6959;
  t6970 = -1.*t3728*t6944;
  t6974 = t3203*t6965;
  t6978 = t6970 + t6974;
  t6985 = t3203*t6944;
  t6997 = t3728*t6965;
  t7000 = t6985 + t6997;
  t7135 = -1.*t920*t1194*t341;
  t7138 = -1.*t920*t48*t552*t1612;
  t7142 = t7135 + t7138;
  t7159 = t2373*t7142;
  t7165 = t920*t48*t762*t2559;
  t7166 = t7159 + t7165;
  t7171 = t920*t48*t2373*t762;
  t7173 = -1.*t7142*t2559;
  t7175 = t7171 + t7173;
  t7190 = -1.*t3728*t7166;
  t7219 = t3203*t7175;
  t7222 = t7190 + t7219;
  t7229 = t3203*t7166;
  t7231 = t3728*t7175;
  t7232 = t7229 + t7231;
  t7346 = -1.*t44*t920*t552;
  t7355 = -1.*t4404*t762;
  t7358 = t7346 + t7355;
  t7372 = -1.*t2373*t7358*t1612;
  t7375 = t4414*t2559;
  t7379 = t7372 + t7375;
  t7390 = t2373*t4414;
  t7391 = t7358*t1612*t2559;
  t7393 = t7390 + t7391;
  t7414 = -1.*t3728*t7379;
  t7420 = t3203*t7393;
  t7430 = t7414 + t7420;
  t7439 = t3203*t7379;
  t7446 = t3728*t7393;
  t7454 = t7439 + t7446;
  t7311 = 0.087*t552;
  t7315 = -0.0222*t762;
  t7321 = t7311 + t7315;
  t7326 = 0.0222*t552;
  t7333 = t7326 + t995;
  t7537 = t44*t48;
  t7539 = t188*t312*t341;
  t7542 = t7537 + t7539;
  t7547 = -1.*t7542*t762;
  t7553 = t2807 + t7547;
  t7567 = t552*t7542;
  t7568 = -1.*t920*t188*t762;
  t7569 = t7567 + t7568;
  t7597 = -1.*t2373*t7553*t1612;
  t7605 = t7569*t2559;
  t7607 = t7597 + t7605;
  t7623 = t2373*t7569;
  t7639 = t7553*t1612*t2559;
  t7647 = t7623 + t7639;
  t7671 = -1.*t3728*t7607;
  t7673 = t3203*t7647;
  t7682 = t7671 + t7673;
  t7692 = t3203*t7607;
  t7717 = t3728*t7647;
  t7724 = t7692 + t7717;
  t7792 = t552*t312;
  t7795 = -1.*t920*t341*t762;
  t7818 = t7792 + t7795;
  t7854 = t920*t552*t341;
  t7882 = t312*t762;
  t7888 = t7854 + t7882;
  t7909 = -1.*t2373*t7818*t1612;
  t7912 = t7888*t2559;
  t7916 = t7909 + t7912;
  t7928 = t2373*t7888;
  t7933 = t7818*t1612*t2559;
  t7939 = t7928 + t7933;
  t7953 = -1.*t3728*t7916;
  t7954 = t3203*t7939;
  t7960 = t7953 + t7954;
  t7978 = t3203*t7916;
  t7981 = t3728*t7939;
  t7984 = t7978 + t7981;
  t8094 = -1.*t1194*t4414;
  t8098 = -1.*t4420*t1612;
  t8101 = t8094 + t8098;
  t8115 = -1.*t2373*t3728*t8101;
  t8123 = -1.*t3203*t8101*t2559;
  t8124 = t8115 + t8123;
  t8154 = t3203*t2373*t8101;
  t8174 = -1.*t3728*t8101*t2559;
  t8178 = t8154 + t8174;
  t8048 = -0.157*t1194;
  t8050 = t8048 + t1690;
  t8053 = -0.3151*t1194;
  t8067 = 0.157*t1612;
  t8078 = t8053 + t8067;
  t8222 = -1.*t1194*t7569;
  t8226 = -1.*t6867*t1612;
  t8227 = t8222 + t8226;
  t8254 = -1.*t2373*t3728*t8227;
  t8270 = -1.*t3203*t8227*t2559;
  t8285 = t8254 + t8270;
  t8290 = t3203*t2373*t8227;
  t8292 = -1.*t3728*t8227*t2559;
  t8312 = t8290 + t8292;
  t8416 = -1.*t1194*t7888;
  t8417 = -1.*t920*t48*t1612;
  t8436 = t8416 + t8417;
  t8557 = -1.*t2373*t3728*t8436;
  t8565 = -1.*t3203*t8436*t2559;
  t8581 = t8557 + t8565;
  t8592 = t3203*t2373*t8436;
  t8596 = -1.*t3728*t8436*t2559;
  t8598 = t8592 + t8596;
  t8773 = -1.*t2373*t4448;
  t8774 = -1.*t4452*t2559;
  t8775 = t8773 + t8774;
  t8802 = t3728*t8775;
  t8803 = t8802 + t4578;
  t8810 = t3203*t8775;
  t8834 = -1.*t3728*t4470;
  t8850 = t8810 + t8834;
  t8240 = t1194*t6867;
  t8241 = -1.*t7569*t1612;
  t8243 = t8240 + t8241;
  t8717 = -0.0222*t2373;
  t8730 = -0.3801*t2559;
  t8732 = t8717 + t8730;
  t8755 = 0.3801*t2373;
  t8757 = t8755 + t2618;
  t8957 = t920*t552*t188;
  t8962 = t7542*t762;
  t8963 = t8957 + t8962;
  t8985 = -1.*t2373*t8243;
  t8998 = -1.*t8963*t2559;
  t8999 = t8985 + t8998;
  t9010 = t2373*t8963;
  t9020 = -1.*t8243*t2559;
  t9021 = t9010 + t9020;
  t9040 = t3728*t8999;
  t9041 = t3203*t9021;
  t9044 = t9040 + t9041;
  t9060 = t3203*t8999;
  t9061 = -1.*t3728*t9021;
  t9066 = t9060 + t9061;
  t8475 = t920*t48*t1194;
  t8477 = -1.*t7888*t1612;
  t8481 = t8475 + t8477;
  t9197 = -1.*t552*t312;
  t9198 = t920*t341*t762;
  t9200 = t9197 + t9198;
  t9206 = -1.*t2373*t8481;
  t9207 = -1.*t9200*t2559;
  t9219 = t9206 + t9207;
  t9231 = t2373*t9200;
  t9240 = -1.*t8481*t2559;
  t9248 = t9231 + t9240;
  t9274 = t3728*t9219;
  t9279 = t3203*t9248;
  t9284 = t9274 + t9279;
  t9312 = t3203*t9219;
  t9340 = -1.*t3728*t9248;
  t9358 = t9312 + t9340;
  t9522 = -1.*t3203*t4462;
  t9525 = t9522 + t8834;
  t4845 = t3962*t4582;
  t9453 = -0.0222*t3203;
  t9459 = -0.8601*t3728;
  t9466 = t9453 + t9459;
  t9500 = 0.8601*t3203;
  t9506 = t9500 + t3754;
  t9558 = t2373*t8243;
  t9565 = t8963*t2559;
  t9574 = t9558 + t9565;
  t9584 = -1.*t3728*t9574;
  t9587 = t9584 + t9041;
  t9595 = -1.*t3203*t9574;
  t9602 = t9595 + t9061;
  t9636 = t2373*t8481;
  t9641 = t9200*t2559;
  t9644 = t9636 + t9641;
  t9651 = -1.*t3728*t9644;
  t9661 = t9651 + t9279;
  t9664 = -1.*t3203*t9644;
  t9665 = t9664 + t9340;
  t9528 = -1.*t3984*t4582;
  t4902 = -1.*t3984*t4613;
  t4913 = t4845 + t4902;
  t9689 = 1.3401*t3962;
  t9691 = t9689 + t4263;
  t9697 = -0.0211*t3962;
  t9698 = -1.3401*t3984;
  t9704 = t9697 + t9698;
  t9610 = -1.*t3984*t9587;
  t9717 = t3203*t9574;
  t9718 = t3728*t9021;
  t9719 = t9717 + t9718;
  t9618 = t3962*t9587;
  t9668 = -1.*t3984*t9661;
  t9739 = t3203*t9644;
  t9740 = t3728*t9248;
  t9741 = t9739 + t9740;
  t9675 = t3962*t9661;

  p_output1(0)=1.;
  p_output1(1)=0;
  p_output1(2)=0;
  p_output1(3)=0;
  p_output1(4)=1.;
  p_output1(5)=0;
  p_output1(6)=0;
  p_output1(7)=0;
  p_output1(8)=1.;
  p_output1(9)=t1143*t1802 + 0.167*(t1143*t1194 + t1612*t1951) + t1951*t2031 + t2372*t2712 + t3053*t3119 + t3762*t3906 + t3934*t3943 + t4092*t4141 + t4270*t4323 - 1.3401*(t3984*t4141 + t3962*t4323) - 0.0211*(t3962*t4141 - 1.*t3984*t4323) + t450*t862 - 1.*t1010*t188*t920;
  p_output1(10)=t1802*t4414 + t2031*t4420 + 0.167*(t1194*t4414 + t1612*t4420) + t2712*t4448 + t3119*t4452 + t3762*t4462 + t3934*t4470 + t4092*t4582 + t4270*t4613 - 1.3401*(t3984*t4582 + t3962*t4613) - 0.0211*t4913 + t4404*t862 + t1010*t44*t920;
  p_output1(11)=0;
  p_output1(12)=-1.*t1010*t312*t44 + t1802*t5057 + t2712*t5228 + t3119*t5258 + t3762*t5453 + t3934*t5558 + t4092*t5613 + t4270*t5647 - 1.3401*(t3984*t5613 + t3962*t5647) - 0.0211*(t3962*t5613 - 1.*t3984*t5647) + t2031*t44*t48*t920 + t341*t44*t862*t920 + 0.167*(t1194*t5057 + t1612*t44*t48*t920);
  p_output1(13)=-1.*t1010*t188*t312 + t1802*t5834 + t2712*t5960 + t3119*t6009 + t3762*t6022 + t3934*t6059 + t4092*t6096 + t4270*t6155 - 1.3401*(t3984*t6096 + t3962*t6155) - 0.0211*(t3962*t6096 - 1.*t3984*t6155) + t188*t2031*t48*t920 + t188*t341*t862*t920 + 0.167*(t1194*t5834 + t1612*t188*t48*t920);
  p_output1(14)=-1.*t2031*t312*t48 + t1802*t6317 + 0.167*(-1.*t1612*t312*t48 + t1194*t6317) + t2712*t6386 + t3119*t6431 + t3762*t6454 + t3934*t6468 + t4092*t6500 + t4270*t6526 - 1.3401*(t3984*t6500 + t3962*t6526) - 0.0211*(t3962*t6500 - 1.*t3984*t6526) - 1.*t312*t341*t862 - 1.*t1010*t920;
  p_output1(15)=t1802*t4420*t552 + t2031*t6615 + 0.167*(t1194*t4420*t552 + t1612*t6615) + t2712*t6670 + t3762*t6716 + t3934*t6747 + t4092*t6784 + t4270*t6803 - 1.3401*(t3984*t6784 + t3962*t6803) - 0.0211*(t3962*t6784 - 1.*t3984*t6803) + t3119*t4420*t762 + t4420*t862;
  p_output1(16)=t2031*t450 + t1802*t552*t6867 + 0.167*(t1612*t450 + t1194*t552*t6867) + t2712*t6915 + t3762*t6944 + t3934*t6965 + t4092*t6978 + t4270*t7000 - 1.3401*(t3984*t6978 + t3962*t7000) - 0.0211*(t3962*t6978 - 1.*t3984*t7000) + t3119*t6867*t762 + t6867*t862;
  p_output1(17)=t2712*t7142 + t3762*t7166 + t3934*t7175 + t4092*t7222 + t4270*t7232 - 1.3401*(t3984*t7222 + t3962*t7232) - 0.0211*(t3962*t7222 - 1.*t3984*t7232) - 1.*t2031*t341*t920 + t1802*t48*t552*t920 + t3119*t48*t762*t920 + t48*t862*t920 + 0.167*(-1.*t1612*t341*t920 + t1194*t48*t552*t920);
  p_output1(18)=t3119*t4414 + t4404*t7333 + 0.167*t1194*t7358 + t1802*t7358 - 1.*t1612*t2712*t7358 + t3762*t7379 + t3934*t7393 + t4092*t7430 + t4270*t7454 - 1.3401*(t3984*t7430 + t3962*t7454) - 0.0211*(t3962*t7430 - 1.*t3984*t7454) + t44*t7321*t920;
  p_output1(19)=t7333*t7542 + 0.167*t1194*t7553 + t1802*t7553 - 1.*t1612*t2712*t7553 + t3119*t7569 + t3762*t7607 + t3934*t7647 + t4092*t7682 + t4270*t7724 - 1.3401*(t3984*t7682 + t3962*t7724) - 0.0211*(t3962*t7682 - 1.*t3984*t7724) + t188*t7321*t920;
  p_output1(20)=-1.*t312*t7321 + 0.167*t1194*t7818 + t1802*t7818 - 1.*t1612*t2712*t7818 + t3119*t7888 + t3762*t7916 + t3934*t7939 + t4092*t7960 + t4270*t7984 - 1.3401*(t3984*t7960 + t3962*t7984) - 0.0211*(t3962*t7960 - 1.*t3984*t7984) + t341*t7333*t920;
  p_output1(21)=0.167*t4448 + t4420*t8050 + t4414*t8078 + t2712*t8101 + t2373*t3762*t8101 - 1.*t2559*t3934*t8101 + t4092*t8124 + t4270*t8178 - 1.3401*(t3984*t8124 + t3962*t8178) - 0.0211*(t3962*t8124 - 1.*t3984*t8178);
  p_output1(22)=t6867*t8050 + t7569*t8078 + t2712*t8227 + t2373*t3762*t8227 - 1.*t2559*t3934*t8227 + 0.167*t8243 + t4092*t8285 + t4270*t8312 - 1.3401*(t3984*t8285 + t3962*t8312) - 0.0211*(t3962*t8285 - 1.*t3984*t8312);
  p_output1(23)=t7888*t8078 + t2712*t8436 + t2373*t3762*t8436 - 1.*t2559*t3934*t8436 + 0.167*t8481 + t4092*t8581 + t4270*t8598 - 1.3401*(t3984*t8581 + t3962*t8598) - 0.0211*(t3962*t8581 - 1.*t3984*t8598) + t48*t8050*t920;
  p_output1(24)=t3762*t4470 + t4448*t8732 + t4452*t8757 + t3934*t8775 + t4270*t8803 + t4092*t8850 - 0.0211*(-1.*t3984*t8803 + t3962*t8850) - 1.3401*(t3962*t8803 + t3984*t8850);
  p_output1(25)=t8243*t8732 + t8757*t8963 + t3934*t8999 + t3762*t9021 + t4270*t9044 + t4092*t9066 - 0.0211*(-1.*t3984*t9044 + t3962*t9066) - 1.3401*(t3962*t9044 + t3984*t9066);
  p_output1(26)=t8481*t8732 + t8757*t9200 + t3934*t9219 + t3762*t9248 + t4270*t9284 + t4092*t9358 - 0.0211*(-1.*t3984*t9284 + t3962*t9358) - 1.3401*(t3962*t9284 + t3984*t9358);
  p_output1(27)=t4270*t4582 + t4462*t9466 + t4470*t9506 + t4092*t9525 - 1.3401*(t4845 + t3984*t9525) - 0.0211*(t3962*t9525 + t9528);
  p_output1(28)=t9021*t9506 + t9466*t9574 + t4270*t9587 + t4092*t9602 - 0.0211*(t3962*t9602 + t9610) - 1.3401*(t3984*t9602 + t9618);
  p_output1(29)=t9248*t9506 + t9466*t9644 + t4270*t9661 + t4092*t9665 - 0.0211*(t3962*t9665 + t9668) - 1.3401*(t3984*t9665 + t9675);
  p_output1(30)=-1.3401*t4913 - 0.0211*(-1.*t3962*t4613 + t9528) + t4582*t9691 + t4613*t9704;
  p_output1(31)=t9587*t9691 + t9704*t9719 - 0.0211*(t9610 - 1.*t3962*t9719) - 1.3401*(t9618 - 1.*t3984*t9719);
  p_output1(32)=t9661*t9691 + t9704*t9741 - 0.0211*(t9668 - 1.*t3962*t9741) - 1.3401*(t9675 - 1.*t3984*t9741);
  p_output1(33)=0;
  p_output1(34)=0;
  p_output1(35)=0;
  p_output1(36)=0;
  p_output1(37)=0;
  p_output1(38)=0;
  p_output1(39)=0;
  p_output1(40)=0;
  p_output1(41)=0;
  p_output1(42)=0;
  p_output1(43)=0;
  p_output1(44)=0;
  p_output1(45)=0;
  p_output1(46)=0;
  p_output1(47)=0;
}


       
void Jp_lAnkle(Eigen::Matrix<double,3,16> &p_output1, const Eigen::Matrix<double,16,1> &var1)
{
  // Call Subroutines
  output1(p_output1, var1);

}
